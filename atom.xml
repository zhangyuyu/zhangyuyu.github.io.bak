<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若见喻笺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-24T11:57:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test Double</title>
    <link href="http://yoursite.com/2018/06/24/Test-Double/"/>
    <id>http://yoursite.com/2018/06/24/Test-Double/</id>
    <published>2018-06-24T05:42:53.000Z</published>
    <updated>2018-06-24T11:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文的主要内容是翻译自《Test Double – xUnit Test Patterns》书的<em>Test Double</em>章节</p></blockquote><p>　　很多时候，在执行单元测试时，待测对象依赖于其他模块，我们经常听到的有 Mock、Stub、Fake、Spy之类的词。xUnit Test Patterns一书中对此进行了统称<code>Test Double</code>，并清晰的说明了各个术语的区别与应用场景。下面主要从以下几个方面进行阐述：</p><ul><li>Four-Phase Test</li><li>理解Test Double</li><li>Test Double的分类</li><li>实现方式</li><li>对比总结</li></ul><a id="more"></a><h3 id="一、Four-Phase-Test"><a href="#一、Four-Phase-Test" class="headerlink" title="一、Four-Phase Test"></a>一、Four-Phase Test</h3><p>　　在开始步入正题 Test Double 之前，我们先大致看一下测试的 Four Phrase，以便我们可以on same page，不至于因为术语不同产生歧义。</p><p>　　<img src="/imgs/test-double-four-phase-test.png" width="500" height="250"></p><ul><li>第一阶段，可以理解为做<code>GIVEN</code>，做一些准备工作，其中可以包括创建test fixture以及设置 expectation。</li><li>第二阶段，可以理解为<code>WHEN</code>，即和 SUT 进行交互。</li><li>第三阶段，可以理解为<code>TEHN</code>，判断是否获取到了期望的输出或者行为。</li><li>第四阶段，做一些善后和清理操作，将系统还原成初始的样子。</li></ul><h3 id="二、理解Test-Double"><a href="#二、理解Test-Double" class="headerlink" title="二、理解Test Double"></a>二、理解Test Double</h3><p>　　有时候，测试被测系统（System under test, SUT）非常困难，因为它依赖于其他组件，而这些组件在测试环境中无法使用。这可能是因为这些组件不可用，亦或者是执行它们会产生副作用。在其他情况下，我们的测试策略要求我们对SUT的内部行为有更多的控制权或可见性。</p><p>　　<img src="/imgs/test-double-for-sut.png" width="400" height="200"></p><p>　　在编写测试时候，我们不能（或者不选择）使用一个真正的依赖组件（ Depended-On Component，DOC），我们会用 Test Double代替它。Test Double 不用有像真正的 DOC 一样的行为，只需要提供和真实的 API 相同的 API即可，这样SUT可以认为该 Test Double 就是真正的 API。</p><h4 id="1-WHAT"><a href="#1-WHAT" class="headerlink" title="1. WHAT"></a>1. WHAT</h4><blockquote class="blockquote-center"><p>　　在计算机编程和计算机科学中，程序员和开发人员使用称为自动化单元测试的技术来提高软件的质量。 通常情况下，最终版本软件由一组复杂的对象或过程相互作用组成以创建最终结果。 在自动化单元测试中，可能有必要使用外观和行为与其发布相对应的对象或过程，但实际上用的却是简化版本的对象和过程，以降低复杂性并促进测试。Test Double是这些对象或过程的通用术语。</p></blockquote><p>　　一句话介绍的话， Test Double是一个通用术语，用于在任何情况下，为了测试目的而替换生产对象。</p><h4 id="2-WHY"><a href="#2-WHY" class="headerlink" title="2. WHY"></a>2. WHY</h4><ul><li>减少对被测对象的依赖，使得测试更加单一</li><li>让测试案例执行的时间更短，运行更加稳定</li><li>对SUT（待测系统）内部的输入输出进行验证，让测试更加彻底深入</li></ul><h3 id="三、Test-Double的分类"><a href="#三、Test-Double的分类" class="headerlink" title="三、Test Double的分类"></a>三、Test Double的分类</h3><p>　　Test Double可以进一步细化为以下5种：</p><ul><li>Test Stub，桩,在测试中为每个调用提供一个封装好的响应，通常不会对测试之外的请求进行响应，只用于测试。</li><li>Test Spy，是一种记录一些关于它们如何被调用的信息的桩。这种形式的桩可能是记录它发出去了多少个消息的一个电子邮件服务。</li><li>Mock Object，模拟对象，是一种在编程时就设定了它预期要接收到调用。如果收到了为预期的调用，它会抛出异常，并且还会在验证时被检查是否收到了它们所预期的所有调用。</li><li>Fake Object，假对象，可以真正使用的实现，通常利用一些捷径，不适合在生产环境中使用，比如内存数据库（InMemoryTestDatabase）。</li><li>Dummy Object，哑对象，是指那些被传递但不被真正使用的对象。通常用于添充参数列表。</li></ul><p>　　<img src="/imgs/test-double-type.png" width="500" height="200"></p><h4 id="1-Stub"><a href="#1-Stub" class="headerlink" title="1. Stub"></a>1. Stub</h4><p>　　Test Stub是指一个完全代替待测系统依赖组件的对象，这个对象按照我们设计的输出与待测系统进行交互。这个桩既不会与测试用例(代码)交互，也不会在待测系统内部进行验证。</p><p>　　<img src="/imgs/test-double-stub.png" width="400" height="200"></p><h5 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h5><ul><li>完全代替待测系统依赖组件的对象</li><li>不会对 SUT 内部的输入进行验证</li></ul><h5 id="1-2-场景"><a href="#1-2-场景" class="headerlink" title="1.2 场景"></a>1.2 场景</h5><ul><li>依赖组件无法使用，影响测试结果</li><li>依赖组件运行太慢，影响测试速度</li><li>成为Responder响应者，当需要给待测系统注入特定数据，从而对待测系统产生影响</li><li>成为Saboteur破坏者，当需要给待测系统注入无效数据，从而对待测系统产生异常影响，观察待测系统如何处理错误情况</li></ul><h5 id="1-3-示例"><a href="#1-3-示例" class="headerlink" title="1.3 示例"></a>1.3 示例</h5><ul><li><p>初始测试 - 依赖组件无法使用<br>　　下面的代码只是测试了基本功能–格式化含有时间的 HTML 字符串，但是它依赖于真正的系统时钟。所以测试不会通过。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testDisplayCurrentTime_AtMidnight() &#123;</span><br><span class="line">      <span class="comment">// fixture setup</span></span><br><span class="line">      TimeDisplay sut = <span class="keyword">new</span> TimeDisplay();</span><br><span class="line">      <span class="comment">// exercise sut</span></span><br><span class="line">      <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">      <span class="comment">// verify direct output</span></span><br><span class="line">      <span class="keyword">String</span> expectedTimeString = <span class="string">"&lt;span class=\"tinyBoldText\"&gt;Midnight&lt;/span&gt;"</span>;</span><br><span class="line">      assertEquals( expectedTimeString, result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用真正的系统时钟之后的测试<br>　　下面的代码引入了当前系统的时钟，但是又带来了两个问题：其一，有些测试条件永远不会执行（比如测试Midnight 的部分，你可能需要大晚上爬起来运行测试）；其二，这个测试部分的逻辑和真正的实现代码逻辑重复了。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testDisplayCurrentTime_whenever() &#123;</span><br><span class="line">  <span class="comment">// fixture setup</span></span><br><span class="line">  TimeDisplay sut = <span class="keyword">new</span> TimeDisplay();</span><br><span class="line">  <span class="comment">// exercise sut</span></span><br><span class="line">  <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">  <span class="comment">// verify outcome</span></span><br><span class="line">  Calendar</span><br><span class="line">  time = <span class="keyword">new</span> DefaultTimeProvider().getTime();</span><br><span class="line">  StringBuffer expectedTime = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  expectedTime.<span class="built_in">append</span>(<span class="string">"&lt;span class=\"tinyBoldText\"&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((time.<span class="built_in">get</span>(Calendar.HOUR_OF_DAY) == <span class="number">0</span>)</span><br><span class="line">      &amp;&amp; (time.<span class="built_in">get</span>(Calendar.MINUTE) &lt;= <span class="number">1</span>)) &#123;</span><br><span class="line">    expectedTime.<span class="built_in">append</span>(<span class="string">"Midnight"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((time.<span class="built_in">get</span>(Calendar.HOUR_OF_DAY) == <span class="number">12</span>)</span><br><span class="line">             &amp;&amp; (time.<span class="built_in">get</span>(Calendar.MINUTE) == <span class="number">0</span>)) &#123; <span class="comment">// noon</span></span><br><span class="line">    expectedTime.<span class="built_in">append</span>(<span class="string">"Noon"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    SimpleDateFormat fr = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"h:mm a"</span>);</span><br><span class="line">    expectedTime.<span class="built_in">append</span>(fr.format(time.getTime()));</span><br><span class="line">  &#125;</span><br><span class="line">  expectedTime.<span class="built_in">append</span>(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">  assertEquals(expectedTime, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Test Stub 之后的测试<br>　　下面的Stub用来注入有效的间接输入，被称为<code>Resnponder</code>，是一个 Happy Path。如果是注入无效的间接输入，则会是<code>Saboteur</code>。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testDisplayCurrentTime_AtMidnight() throws Exception &#123;</span><br><span class="line">  <span class="comment">// Fixture setup:</span></span><br><span class="line">  <span class="comment">//      Test Double configuration</span></span><br><span class="line">  TimeProviderTestStub tpStub = <span class="keyword">new</span> <span class="type">TimeProviderTestStub</span>();</span><br><span class="line">  tpStub.setHours(<span class="number">0</span>);</span><br><span class="line">  tpStub.setMinutes(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//   Instantiate SUT:</span></span><br><span class="line">  TimeDisplay sut = <span class="keyword">new</span> <span class="type">TimeDisplay</span>();</span><br><span class="line">  <span class="comment">//      Test Double installation</span></span><br><span class="line">  sut.setTimeProvider(tpStub);</span><br><span class="line">  <span class="comment">// exercise sut</span></span><br><span class="line">  <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">  <span class="comment">// verify outcome</span></span><br><span class="line">  <span class="keyword">String</span> expectedTimeString = <span class="string">"&lt;span class=\"tinyBoldText\"&gt;Midnight&lt;/span&gt;"</span>;</span><br><span class="line">  assertEquals(<span class="string">"Midnight"</span>, expectedTimeString, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TimeProviderTestStub的具体实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Calendar myTime = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The complete constructor for the TimeProviderTestStub</span></span><br><span class="line"><span class="comment">* @param hours specify the hours using a 24 hour clock</span></span><br><span class="line"><span class="comment">*    (e.g. 10 = 10 AM, 12 = noon, 22 = 10 PM, 0 = midnight)</span></span><br><span class="line"><span class="comment">* @param minutes specify the minutes after the hour</span></span><br><span class="line"><span class="comment">*   (e.g. 0 = exactly on the hour, 1 = 1 min after the hour)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeProviderTestStub</span><span class="params">(<span class="keyword">int</span> hours, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   setTime(hours, minutes);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> hours, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   setHours(hours);</span><br><span class="line">   setMinutes(minutes);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Configuration Interface:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHours</span><span class="params">(<span class="keyword">int</span> hours)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 0 is midnight; 12 is noon</span></span><br><span class="line">   myTime.<span class="built_in">set</span>(Calendar.HOUR_OF_DAY, hours);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinutes</span><span class="params">(<span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   myTime.<span class="built_in">set</span>(Calendar.MINUTE, minutes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Interface used by SUT</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Calendar <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// @return The last time that was set:</span></span><br><span class="line">   <span class="keyword">return</span> myTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Spy"><a href="#2-Spy" class="headerlink" title="2. Spy"></a>2. Spy</h4><p>　　Test Spy是指一个待测系统依赖组件的替身，并且会捕捉和保存待测对象对依赖系统的输出，这个输出会用于测试代码中的验证。Test Spy主要用于记录和验证待测对象对依赖系统的输出。</p><img src="/imgs/test-double-spy.png" width="400" height="200"><h5 id="2-1-特点："><a href="#2-1-特点：" class="headerlink" title="2.1 特点："></a>2.1 特点：</h5><ul><li>会将 Spy 内部的间接输出返回给测试用例，由测试用例进行验证</li><li>只负责获取内部信息，并把这些信息发出去，不负责验证信息的正确性</li></ul><h5 id="2-2-示例："><a href="#2-2-示例：" class="headerlink" title="2.2 示例："></a>2.2 示例：</h5><ul><li><p>初始测试<br>　　下面的代码只是测试了基本的remove flight 的功能，不能验证SUT的间接输出，也就是每次 flight 被删除之后的请求日志，包括数据、时间和用户。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testRemoveFlight</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// setup</span></span><br><span class="line">   FlightDto expectedFlightDto = createARegisteredFlight();</span><br><span class="line">   FlightManagementFacade facade = <span class="keyword">new</span> FlightManagementFacadeImpl();</span><br><span class="line">   <span class="comment">// exercise</span></span><br><span class="line">   facade.removeFlight(expectedFlightDto.getFlightNumber());</span><br><span class="line">   <span class="comment">// verify</span></span><br><span class="line">   assertFalse(<span class="string">"flight should not exist after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Test Spy 之后的测试<br>　　下面的代码中，logSpy 就是 Test Spy，<code>facade.setAuditLog(logSpy)</code>安装了 Test Spy，<code>getDate</code>, <code>getActionCode</code>等是Retrieval Interface（也称 Loopback）。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> public void testRemoveFlightLogging_recordingTestStub() throws Exception &#123;</span><br><span class="line">   // fixture setup</span><br><span class="line">   FlightD<span class="keyword">to</span> expectedFlightD<span class="keyword">to</span> = createAnUnregFlight();</span><br><span class="line">   FlightManagementFacade facade = new FlightManagementFacadeImpl();</span><br><span class="line">   //    Test Double setup</span><br><span class="line">   AuditLogSpy <span class="keyword">log</span>Spy = new AuditLogSpy();</span><br><span class="line">   facade.<span class="built_in">set</span>AuditLog(<span class="keyword">log</span>Spy);</span><br><span class="line">   // exercise</span><br><span class="line">   facade.removeFlight(expectedFlightD<span class="keyword">to</span>.getFlightNumber());</span><br><span class="line">   // verify</span><br><span class="line">   assertFalse(<span class="string">"flight still exists after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightD<span class="keyword">to</span>.getFlightNumber()));</span><br><span class="line">   assertEquals(<span class="string">"number of calls"</span>, <span class="number">1</span>, <span class="keyword">log</span>Spy.getNumberOfCalls());</span><br><span class="line">   assertEquals(<span class="string">"action code"</span>, Helper.REMOVE_FLIGHT_ACTION_CODE,</span><br><span class="line">                <span class="keyword">log</span>Spy.getActionCode());</span><br><span class="line">   assertEquals(<span class="string">"date"</span>, helper.getTodaysDateWithoutTime(), <span class="keyword">log</span>Spy.getDate());</span><br><span class="line">   assertEquals(<span class="string">"user"</span>, Helper.TEST_USER_NAME, <span class="keyword">log</span>Spy.getUser());</span><br><span class="line">   assertEquals(<span class="string">"detail"</span>, expectedFlightD<span class="keyword">to</span>.getFlightNumber(),</span><br><span class="line">                <span class="keyword">log</span>Spy.getDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spy 的具体实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AuditLogSpy <span class="keyword">implements</span> AuditLog &#123;</span><br><span class="line">   <span class="comment">// Fields into which we record actual usage info</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">Date</span> date;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">String</span> user;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">String</span> actionCode;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">Object</span> detail;</span><br><span class="line">   <span class="keyword">private</span> int numberOfCalls = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// Recording implementation of real AuditLog interface:</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">void</span> logMessage(<span class="built_in">Date</span> date, <span class="built_in">String</span> user,</span><br><span class="line">                          <span class="built_in">String</span> actionCode,</span><br><span class="line">                          <span class="built_in">Object</span> detail) &#123;</span><br><span class="line">      <span class="keyword">this</span>.date = date;</span><br><span class="line">      <span class="keyword">this</span>.user = user;</span><br><span class="line">      <span class="keyword">this</span>.actionCode = actionCode;</span><br><span class="line">      <span class="keyword">this</span>.detail = detail;</span><br><span class="line">      numberOfCalls++;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// Retrieval Interface:</span></span><br><span class="line">   <span class="keyword">public</span> int getNumberOfCalls() &#123;</span><br><span class="line">      <span class="keyword">return</span> numberOfCalls;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">Date</span> getDate() &#123;</span><br><span class="line">      <span class="keyword">return</span> date;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">String</span> getUser() &#123;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">String</span> getActionCode() &#123;</span><br><span class="line">      <span class="keyword">return</span> actionCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">Object</span> getDetail() &#123;</span><br><span class="line">      <span class="keyword">return</span> detail;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Mock"><a href="#3-Mock" class="headerlink" title="3. Mock"></a>3. Mock</h4><p>　　它类似于Test Spy，安插在待测系统内部，获取到待测系统内部的间接输出，一般根据调用者输入，按照约定执行操作，然后返回调用者事先编码写好的预期结果。<br><img src="/imgs/test-double-mock.png" width="400" height="200"></p><h5 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h5><ul><li>Mock还会对调用进行验证（verify），若碰到不在预期范围的调用还会抛出异常。</li><li>Mock需要设置 expectation，而且必须要在 SUT的 exercise这一阶段之前进行设置。</li></ul><p>　　Mock 的相应操作对应到Four Phrase如下：</p><ul><li>Fixture set up<ul><li>构建 Mock Object</li><li>配置 Mock Object</li><li>安装 Mock Objct 到 SUT</li></ul></li><li>Exercise SUT<ul><li>SUT 调用 Mock Object，Mock Object 进行断言</li></ul></li><li>Result verification<ul><li>测试调用最后的 verify 方法</li></ul></li><li>Fixture tear down<ul><li>没有影响</li></ul></li></ul><h5 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h5><ul><li><p>初始测试</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testRemoveFlight</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// setup</span></span><br><span class="line">   FlightDto expectedFlightDto = createARegisteredFlight();</span><br><span class="line">   FlightManagementFacade facade = <span class="keyword">new</span> FlightManagementFacadeImpl();</span><br><span class="line">   <span class="comment">// exercise</span></span><br><span class="line">   facade.removeFlight(expectedFlightDto.getFlightNumber());</span><br><span class="line">   <span class="comment">// verify</span></span><br><span class="line">   assertFalse(<span class="string">"flight should not exist after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Mock Object 之后的测试</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void testRemoveFlight_Mock() throws <span class="type">Exception</span> &#123;</span><br><span class="line">   <span class="comment">// fixture setup</span></span><br><span class="line">   <span class="type">FlightDto</span> expectedFlightDto = createAnonRegFlight();</span><br><span class="line">   <span class="comment">// mock configuration</span></span><br><span class="line">   <span class="type">ConfigurableMockAuditLog</span> mockLog = <span class="function"><span class="keyword">new</span> <span class="title">ConfigurableMockAuditLog</span>();</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">setExpectedLogMessage</span>( helper.getTodaysDateWithoutTime(),</span></span><br><span class="line"><span class="function">                        <span class="title">Helper</span>.<span class="title">TEST_USER_NAME</span>,</span></span><br><span class="line"><span class="function">                        <span class="title">Helper</span>.<span class="title">REMOVE_FLIGHT_ACTION_CODE</span>,</span></span><br><span class="line"><span class="function">                        <span class="title">expectedFlightDto</span>.<span class="title">getFlightNumber</span>());</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">setExpectedNumberCalls</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="function">   <span class="comment">// mock installation</span></span></span><br><span class="line"><span class="function">   <span class="title">FlightManagementFacade</span> <span class="title">facade</span> = <span class="title">new</span> <span class="title">FlightManagementFacadeImpl</span>();</span></span><br><span class="line"><span class="function">   <span class="title">facade</span>.<span class="title">setAuditLog</span>(mockLog);</span></span><br><span class="line"><span class="function">   <span class="comment">// exercise</span></span></span><br><span class="line"><span class="function">   <span class="title">facade</span>.<span class="title">removeFlight</span>(expectedFlightDto.getFlightNumber());</span></span><br><span class="line"><span class="function">   <span class="comment">// verify</span></span></span><br><span class="line"><span class="function">   <span class="title">assertFalse</span>("flight still exists after being removed",</span></span><br><span class="line"><span class="function">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">verify</span>();</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-Fake"><a href="#4-Fake" class="headerlink" title="4. Fake"></a>4. Fake</h4><p>　　Fake Object 和 Test Stub 很类似，都是依赖组件的代替，区别就在于Fake Object 更“轻量级”。“轻量级”是指Fake Object 仅仅提供和依赖组件一样的功能接口保证待测系统正常工作，让待测系统认为 Fake Object 就是“真的”依赖组件，实现细节可以非常简单，不需要具有真实依赖组件的很多特性，也不需要像Test Stub那样接受测试的需求，返回特定response给待测系统。</p><p>　　<img src="/imgs/test-double-fake.png" width="400" height="200"></p><h5 id="4-1-特点"><a href="#4-1-特点" class="headerlink" title="4.1 特点"></a>4.1 特点</h5><ul><li>轻量级、简单实现</li><li>不适合生产环境</li></ul><h5 id="4-2-场景"><a href="#4-2-场景" class="headerlink" title="4.2 场景"></a>4.2 场景</h5><ul><li>实际对象还未实现出来，先用一个简单的Fake Object代替它。</li><li>实际对象执行需要太长的时间</li><li>实际对象在实际环境下可能会有不稳定的情况。比如，网络发送数据包，不能保证每次都能成功发送。</li><li>实际对象在实际系统环境下不可用，或者很难让它变得可用。比如，使用一个依赖实际数据库的数据库访问层对象，必须安装数据库，并且进行大量的配置，才能生效。</li></ul><p>　　通常Fake Object用于构造下面的对象：</p><ul><li>Fake Database</li><li>In-Memory Database</li><li>Fake Web Service</li><li>Fake Service Layer</li></ul><h5 id="4-3-示例"><a href="#4-3-示例" class="headerlink" title="4.3 示例"></a>4.3 示例</h5><ul><li><p>初始测试</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testReadWrite() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// Setup:</span></span><br><span class="line">   FlightMngtFacade facade = <span class="keyword">new</span> FlightMgmtFacadeImpl();</span><br><span class="line">   <span class="comment">// Exercise:</span></span><br><span class="line">   BigDecimal yyc = facade.createAirport(<span class="string">"YYC"</span>, <span class="string">"Calgary"</span>, <span class="string">"Calgary"</span>);</span><br><span class="line">   BigDecimal lax = facade.createAirport(<span class="string">"LAX"</span>, <span class="string">"LAX Intl"</span>, <span class="string">"LA"</span>);</span><br><span class="line">   facade.createFlight(yyc, lax);</span><br><span class="line">   List flights = facade.getFlightsByOriginAirport(yyc);</span><br><span class="line">   <span class="comment">// Verify:</span></span><br><span class="line">   assertEquals( <span class="string">"# of flights"</span>, <span class="number">1</span>, flights.<span class="built_in">size</span>());</span><br><span class="line">   Flight flight = (Flight) flights.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertEquals( <span class="string">"origin"</span>, yyc,</span><br><span class="line">                 flight.getOrigin().getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Service真实实现</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal createAirport( String airportCode, String name,</span><br><span class="line">                                 String nearbyCity)</span><br><span class="line"><span class="keyword">throws</span> FlightBookingException&#123;</span><br><span class="line">   TransactionManager.beginTransaction();</span><br><span class="line">   Airport airport = dataAccess.createAirport(airportCode, name, nearbyCity);</span><br><span class="line">   logMessage(<span class="string">"Wrong Action Code"</span>, airport.getCode());<span class="comment">//bug</span></span><br><span class="line">   TransactionManager.commitTransaction();</span><br><span class="line">   <span class="function"><span class="keyword">return</span> airport.<span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> List getFlightsByOriginAirport( BigDecimal originAirportId)</span><br><span class="line">      <span class="keyword">throws</span> FlightBookingException &#123;</span><br><span class="line">   <span class="keyword">if</span> (originAirportId == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException( <span class="string">"Origin Airport Id has not been provided"</span>,</span><br><span class="line">              <span class="string">"originAirportId"</span>, <span class="keyword">null</span>);     </span><br><span class="line">   Airport origin = dataAccess.getAirportByPrimaryKey(originAirportId);</span><br><span class="line">   List flights = dataAccess.getFlightsByOriginAirport(origin);</span><br><span class="line">   <span class="keyword">return</span> flights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDao</span><span class="params">(Database dao)</span> </span>&#123;</span><br><span class="line">   dataAccess = dao;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Fake Object 之后的示例<br>　　下面的代码，将Fake Object InMemoryDatabase注入到了真实的 Service facade中，测试并没有更改太多，只是会调用 Fake 的 Database，整个测试执行会变快很多。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testReadWrite_inMemory() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// Setup:</span></span><br><span class="line">   FlightMgmtFacadeImpl facade = <span class="keyword">new</span> FlightMgmtFacadeImpl();</span><br><span class="line">   facade.setDao(<span class="keyword">new</span> InMemoryDatabase());</span><br><span class="line">   <span class="comment">// Exercise:</span></span><br><span class="line">   BigDecimal yyc = facade.createAirport(<span class="string">"YYC"</span>, <span class="string">"Calgary"</span>, <span class="string">"Calgary"</span>);</span><br><span class="line">   BigDecimal lax = facade.createAirport(<span class="string">"LAX"</span>, <span class="string">"LAX Intl"</span>, <span class="string">"LA"</span>);</span><br><span class="line">   facade.createFlight(yyc, lax);</span><br><span class="line">   List flights = facade.getFlightsByOriginAirport(yyc);</span><br><span class="line">   <span class="comment">// Verify:</span></span><br><span class="line">   assertEquals( <span class="string">"# of flights"</span>, <span class="number">1</span>, flights.<span class="built_in">size</span>());</span><br><span class="line">   Flight flight = (Flight) flights.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertEquals( <span class="string">"origin"</span>, yyc,</span><br><span class="line">                 flight.getOrigin().getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fake Object 的实现</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryDatabase</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">FlightDao</span></span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List airports = <span class="keyword">new</span> <span class="type">Vector</span>();</span><br><span class="line">    <span class="keyword">public</span> Airport createAirport(<span class="keyword">String</span> airportCode, <span class="keyword">String</span> name, <span class="keyword">String</span> nearbyCity)</span><br><span class="line">             throws DataException, InvalidArgumentException &#123;|------<span class="number">-10</span>-------<span class="number">-20</span>-------<span class="number">-30</span>-------<span class="number">-40</span>-------<span class="number">-50</span>-------<span class="number">-60</span>-----|</span><br><span class="line"></span><br><span class="line">       assertParamtersAreValid( airportCode, name, nearbyCity);     </span><br><span class="line">       assertAirportDoesntExist( airportCode); </span><br><span class="line">       Airport result = <span class="keyword">new</span> <span class="type">Airport</span>(getNextAirportId(),</span><br><span class="line">             airportCode, name, createCity(nearbyCity));</span><br><span class="line">       airports.add(result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Airport getAirportByPrimaryKey(BigDecimal airportId)</span><br><span class="line">             throws DataException, InvalidArgumentException &#123;</span><br><span class="line">       assertAirportNotNull(airportId);</span><br><span class="line">    Airport result = <span class="literal">null</span>;</span><br><span class="line">       Iterator i = airports.iterator();</span><br><span class="line">       <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">          Airport airport = (Airport) i.next();</span><br><span class="line">          <span class="keyword">if</span> (airport.getId().equals(airportId)) &#123;</span><br><span class="line">             <span class="keyword">return</span> airport;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">DataException</span>(<span class="string">"Airport not found:"</span>+airportId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-Dummy"><a href="#5-Dummy" class="headerlink" title="5. Dummy"></a>5. Dummy</h4><p>　　Dummy Object对象是指为了调用被测试方法而传入的假参数，为什么说是假参数呢？实际上这些传入的Dummy对象并不会对测试有任何作用，仅仅是为了成功调用被测试方法。所以，Dummy Object又被称为Dummy parameter或placeholder。</p><h5 id="5-1-特点"><a href="#5-1-特点" class="headerlink" title="5.1 特点"></a>5.1 特点</h5><ul><li>测试中须传入的对象</li><li>测试中实际并不使用Dummy Object</li></ul><h5 id="5-2-场景"><a href="#5-2-场景" class="headerlink" title="5.2 场景"></a>5.2 场景</h5><ul><li>Dummy Argument</li><li>Dummy Attribute</li></ul><h5 id="5-3-示例"><a href="#5-3-示例" class="headerlink" title="5.3 示例"></a>5.3 示例</h5><ul><li><p>初始测试<br>下面的代码中，Invoice需要 Product 和 Customer 信息，但是 Customer的依赖信息为 Customer -&gt;Address -&gt; City -&gt; State，这就需要我们构造很多对象，让 Test setup 变得复杂起来。此外，测试只测试了 Invoice 相关的功能，并不关心 Address -&gt; City -&gt; State，因此冗余的代码会在某种程度上误导读者（该例子可能太简单，不足以说明）。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testInvoice_addLineItem_noECS() &#123;</span><br><span class="line">   final int QUANTITY = <span class="number">1</span>;</span><br><span class="line">   Product product = <span class="keyword">new</span> <span class="type">Product</span>(getUniqueNumberAsString(), getUniqueNumber());</span><br><span class="line">   State state = <span class="keyword">new</span> <span class="type">State</span>(<span class="string">"West Dakota"</span>, <span class="string">"WD"</span>);</span><br><span class="line">   City city = <span class="keyword">new</span> <span class="type">City</span>(<span class="string">"Centreville"</span>, state);</span><br><span class="line">   Address address = <span class="keyword">new</span> <span class="type">Address</span>(<span class="string">"123 Blake St."</span>, city, <span class="string">"12345"</span>);</span><br><span class="line">   Customer customer= <span class="keyword">new</span> <span class="type">Customer</span>(getUniqueNumberAsString(), getUniqueNumberAsString(), address);</span><br><span class="line">   Invoice inv = <span class="keyword">new</span> <span class="type">Invoice</span>(customer);</span><br><span class="line">   <span class="comment">// Exercise</span></span><br><span class="line">   inv.addItemQuantity(product, QUANTITY);</span><br><span class="line">   <span class="comment">// Verify</span></span><br><span class="line">   List lineItems = inv.getLineItems();</span><br><span class="line">   assertEquals(<span class="string">"number of items"</span>, lineItems.size(), <span class="number">1</span>);</span><br><span class="line">   LineItem actual = (LineItem)lineItems.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">   LineItem expItem = <span class="keyword">new</span> <span class="type">LineItem</span>(inv, product, QUANTITY);</span><br><span class="line">   assertLineItemsEqual(<span class="string">""</span>,expItem, actual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Dummy Object之后的测试<br>　　我们用 DummyCustomer 代替了实际的 Customer，而我们并不关系具体的实现，因为我们只是需要这个 Customer 对象作为一个参数输入。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testInvoice_addLineItem_DO() &#123;</span><br><span class="line">   final int QUANTITY = <span class="number">1</span>;</span><br><span class="line">   Product product = <span class="keyword">new</span> <span class="type">Product</span>(<span class="string">"Dummy Product Name"</span>, getUniqueNumber());</span><br><span class="line">   Invoice inv = <span class="keyword">new</span> <span class="type">Invoice</span>( <span class="keyword">new</span> <span class="type">DummyCustomer</span>() );</span><br><span class="line">   LineItem expItem = <span class="keyword">new</span> <span class="type">LineItem</span>(inv, product, QUANTITY);</span><br><span class="line">   <span class="comment">// Exercise</span></span><br><span class="line">   inv.addItemQuantity(product, QUANTITY);</span><br><span class="line">   <span class="comment">// Verify</span></span><br><span class="line">   List lineItems = inv.getLineItems();</span><br><span class="line">   assertEquals(<span class="string">"number of items"</span>, lineItems.size(), <span class="number">1</span>);</span><br><span class="line">   LineItem actual = (LineItem)lineItems.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertLineItemsEqual(<span class="string">""</span>, expItem, actual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dummy Object 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyCustomer</span> <span class="keyword">implements</span> <span class="title">ICustomer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DummyCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Real simple; nothing to initialize!</span></span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This should never be called!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、实现方式"><a href="#四、实现方式" class="headerlink" title="四、实现方式"></a>四、实现方式</h3><ul><li>Hard-Coded Test Double - 会返回固定response的Test Double</li><li>Configurable Test Double - 会根据测试需求返回相应response的Test Double</li></ul><h3 id="五、对比总结"><a href="#五、对比总结" class="headerlink" title="五、对比总结"></a>五、对比总结</h3><table><thead><tr><th>Pattern</th><th style="text-align:center">Purpose</th><th style="text-align:center">Has Behavior</th><th style="text-align:center">Injects indirect inputs into SUT</th><th style="text-align:center">Handles indirect outputs of SUT</th><th style="text-align:center">Values provided by test(er)</th><th style="text-align:center">Examples</th></tr></thead><tbody><tr><td>Test Double</td><td style="text-align:center">Generic name for family</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Dummy Object</td><td style="text-align:center">Attribute or Method Parameter</td><td style="text-align:center">no</td><td style="text-align:center">no, never called</td><td style="text-align:center">no, never called</td><td style="text-align:center">no</td><td style="text-align:center">Null, “Ignored String”, new Object()</td></tr><tr><td>Test Stub</td><td style="text-align:center">Verify indirect inputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">ignores them</td><td style="text-align:center">inputs</td><td style="text-align:center"></td></tr><tr><td>Test Spy</td><td style="text-align:center">Verify indirect outputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">optional</td><td style="text-align:center">captures them for later verification</td><td style="text-align:center">inputs (optional)</td><td style="text-align:center"></td></tr><tr><td>Mock Object</td><td style="text-align:center">Verify indirect outputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">optional</td><td style="text-align:center">verifies correctness against expectations</td><td style="text-align:center">outputs &amp; inputs (optional)</td><td style="text-align:center"></td></tr><tr><td>Fake Object</td><td style="text-align:center">Run (unrunnable) tests (faster)</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">uses them</td><td style="text-align:center">none</td><td style="text-align:center">In-memory database emulator</td></tr><tr><td>Temporary Test Stub</td><td style="text-align:center">Stand in for procedural code not yet written</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">uses them</td><td style="text-align:center">none</td><td style="text-align:center">In-memory database emulator</td></tr></tbody></table><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　有些开源框架中可能名字叫法不一样，比如 Junit 中使用<code>Dummy Object</code>代表本文中的<code>Fake Object</code>等。因此，本篇文章主要是弄清楚一些形式，并不局限于概念的名称，理解才是关键。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" rel="noopener">Test Double – Martin Fowler</a></li><li><a href="http://xunitpatterns.com/Test%20Double.html" target="_blank" rel="noopener">Test Double – xUnit Test Patterns</a></li><li><a href="https://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="noopener">Mocks Aren’t Stubs -— Martin Fowler</a></li><li><a href="http://www.softwaretestingmagazine.com/knowledge/unit-testing-fakes-mocks-and-stubs/" target="_blank" rel="noopener">Unit Testing: Fakes, Mocks and Stubs</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文的主要内容是翻译自《Test Double – xUnit Test Patterns》书的&lt;em&gt;Test Double&lt;/em&gt;章节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　很多时候，在执行单元测试时，待测对象依赖于其他模块，我们经常听到的有 Mock、Stub、Fake、Spy之类的词。xUnit Test Patterns一书中对此进行了统称&lt;code&gt;Test Double&lt;/code&gt;，并清晰的说明了各个术语的区别与应用场景。下面主要从以下几个方面进行阐述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Four-Phase Test&lt;/li&gt;
&lt;li&gt;理解Test Double&lt;/li&gt;
&lt;li&gt;Test Double的分类&lt;/li&gt;
&lt;li&gt;实现方式&lt;/li&gt;
&lt;li&gt;对比总结&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Test" scheme="http://yoursite.com/categories/Test/"/>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>认识IoT</title>
    <link href="http://yoursite.com/2018/06/23/IoT-%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2018/06/23/IoT-初识/</id>
    <published>2018-06-23T12:32:04.000Z</published>
    <updated>2018-06-23T14:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文的主要内容是翻译自《Internet of Things with Raspberry Pi 3 —— Maneesh Rao》一书的第一章<em>Introduction to IoT</em></p></blockquote><p>　　本篇文章中，我们将认识物联网 (IoT)相关内容。了解 IoT 生态系统的体系架构、其在不同领域的应用与优势、背景、当前场景以及未来。主要包含以下方面：</p><ul><li>理解 IoT</li><li>IoT生态系统的体系架构</li><li>历史与发展</li><li>IoT应用和未来前景</li></ul><a id="more"></a><h3 id="一、理解-IoT"><a href="#一、理解-IoT" class="headerlink" title="一、理解 IoT"></a>一、理解 IoT</h3><p>　　回顾过去几年，可以看到，IoT已经成为研发最具革命性的技术之一。它给即将到来的众多商业模式打开了大门，并帮助重塑现有的业务。<br>　　但是什么是物联网呢？ 为什么被称为新技术革命？ 谁发明了它，什么时候发生？ 它的应用有哪些？ 它真的具有改变我们生活的潜力吗？ </p><p>　　IoT 不仅仅是技术，它是一个全新世界的概念，在这个世界里，像汽车、住宅、建筑物和城市其他组成部分这样的物理事物，有能力连接到互联网并与人类互动。简而言之，它是一个智能和互联的世界。<br>　　IoT是一种只能被描述和不能被定义的现象，因为它是一种没有边界的包容性技术。<br>　　IoT生态系统中的物理设备也被称为事物（Thing）或智能事物（smart thing）。一件事物可以是具有一个或多个以下特征的任何设备：</p><ul><li>传感器 Sensors（温度，湿度，运动检测器）</li><li>通信 Communication（有线或无线）</li><li>执行器 Actuators（电机，继电器，显示器）</li><li>控制器或处理器Controller or processor（用于计算，运行软件）</li></ul><p>　　比如：</p><ul><li>Tags<br>　　NFC、RFID 和 QR code是计算机可读的，可用于识别物体</li><li>设备<br>　　iBeacon、Arduino、Raspberry Pi等设备内置控制器/处理器和通信通道，如蓝牙、Wi-Fi、以太网等</li><li>机器<br>　　汽车，自行车，空调机组和可以自主工作的洗衣机</li><li>基础设施<br>　　智能连接工厂，智能连接建筑和智能城市等</li></ul><h3 id="二、IoT生态系统的体系架构"><a href="#二、IoT生态系统的体系架构" class="headerlink" title="二、IoT生态系统的体系架构"></a>二、IoT生态系统的体系架构</h3><p>　　让我们通过一个示例来了解物联网生态系统的工作原理吧！</p><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>　　Ghanshyam先生是一家货运公司的所有者，该公司拥有大量卡车作为其机队的一部分。 他们为全国各地的其他企业提供运输服务。最近，由于各种原因，他一直在业务上遭受损失，然而他无法识别和纠正这些损失。</p><h4 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h4><p>　　他的儿子Shyam作为物联网工程师，了解他父亲的商业情况，并决定协助他。 Shyam在接下来的几个月里与他合作，并观察到了一些遭受损失的重大问题。 这里列出了一些问题：</p><ul><li>高燃油消耗</li><li>高维护成本</li><li>交货延迟</li><li>事故率高</li></ul><h4 id="3-措施"><a href="#3-措施" class="headerlink" title="3.措施"></a>3.措施</h4><p>　　作为物联网工程师的Shyam知道需要采取哪些措施才能使业务盈利并易于管理。我们来看看他到底执行了做了那些事情：</p><h5 id="3-1-转换车型"><a href="#3-1-转换车型" class="headerlink" title="3.1 转换车型"></a>3.1 转换车型</h5><p>　　Shyam将所有车队的卡车转换为智能车型，并通过配备各种传感器来连接车辆，以测量诸如燃油油位，轮胎压力，发动机状态，温度等重要数据。控制器用于根据要求执行操作，例如在太阳落山时打开灯光，下雨时打开雨刷，提醒驾驶员，并在Wi-Fi / GPRS / GPS模块的帮助下通过互联网向云端发送重要信息。摄像头和其他类似的设备用来密切注视驾驶员的表现，来从卡车获取实时数据，如下图所示：</p><img src="/imgs/iot-trunk-component.png" width="600" height="350"><h5 id="3-2-开发移动应用"><a href="#3-2-开发移动应用" class="headerlink" title="3.2 开发移动应用"></a>3.2 开发移动应用</h5><p>　　公司团队开发了一款移动应用程序，可帮助司机实时监控卡车的状况、通过最佳路线导航、接收警报通知、分配工作/任务。<br>　　此外，公司还开发了一个管理员/控制面板应用程序，该应用由管理人员和操作员在指挥中心使用，以监控所有正在通过互联网发送实时数据的卡车。 这通过以下方式促进了更好的车队管理：</p><ul><li>监控卡车到达目的地的路线; 如果驾驶员进入可疑位置，则可以远程关闭发动机。</li><li>借助机舱内的摄像头监控驾驶员的行为。这可以避免在驾车时睡觉或打电话的事件，并立即发送警报。</li><li>如遇故障，可导航至附近的服务站。</li></ul><h4 id="4-影响"><a href="#4-影响" class="headerlink" title="4.影响"></a>4.影响</h4><p>　　在采取了上述所有措施后，车队现在已经被改造成智能和联网的车队了，下图可以帮助理解Shyam的IoT解决方案架构：<br><img src="/imgs/iot-trunk-solution.png" width="600" height="350"></p><p>　　我们可以分析一下智能和联网车队是如何Ghanshyam先生的业务盈利的：</p><ul><li>燃油效率：收到的关于制动、换档和速度的数据，有助于建立和改善每位驾驶员的驾驶风格，从而提高燃油效率。此外，定期检查油位有助于遏制偷油事件，从而降低整体燃油成本。</li><li>维护成本和交货延迟：安装在每辆卡车上的传感器发送有关发动机健康状况、刹车、电气系统和油位的重要信息。这有助于操作员通过及时和预防性维护保持车辆的整体健康状况，从而减少频繁的故障和延误，从而节省大量成本。</li><li>改进的安全性：使用摄像头和其他传感器数据监控驾驶员的行为，有助于检测哪些对驾驶员和车辆安全构成威胁的激进、粗心和不当驾驶，这些数据可用于提醒司机、让他更负责的开车，并为未来的改进提供适当的培训。</li><li>路线优化：通过使用GPS跟踪车辆的当前位置和交通状况，可以建议最短和最佳的路线，从而使车辆在最短时间内到达目的地、降低燃料成本、节省时间以促进更多交付，从而反过来增加利润。</li><li>环境影响：通过改善车辆状况并采取优化路线，使用较少的燃料，从而减少有害气体的排放。</li></ul><h4 id="5-总结架构"><a href="#5-总结架构" class="headerlink" title="5.总结架构"></a>5.总结架构</h4><img src="/imgs/iot-ecosystem-architecture.png" width="800" height="350"><ul><li>传感器（Sensors）、标签（Tags）和微芯片（Microchips）系统中的终端设备（END Devices），可以观察环境并提供相关信息。</li><li>连接管理（Connection Management）负责通过互联网上的各种协议（如HTTP，MQTT和AQMP）以及蓝牙和射频来维护终端设备与用户/平台之间的连接。</li><li>实时数据管理（Data Management）有助于收集和存储从数据库中的终端设备接收的数据，这些数据可能是基于数据类型的关系数据库或NoSQL数据库。</li><li>安全和访问控制（Security &amp; Access Control）可防止未经授权的用户访问系统，然后可能会被滥用。安全是物联网生态系统中最重要的组成部分之一;忽视它可能会给企业和个人造成巨大的损失。</li><li>云平台（Cloud platforms）以最小的停机时间促进整个系统的可扩展性，可用性和可访问性，这对于连接系统非常重要。</li><li>管理和分析（Administration &amp; analytics）组件使用设备提供的所有数据来了解设备和最终用户的行为，从而进一步帮助改进服务，执行预防性维护并提供必要的警报和通知。</li><li>与社交媒体，BI和CMS等其他平台以及企业和供应链的整合（3th Party Integration），有助于缩小不同业务部门之间的差距。</li><li>开发人员工具（Developer tools）可帮助第三方无缝集成现有系统。</li></ul><h3 id="三、历史与发展"><a href="#三、历史与发展" class="headerlink" title="三、历史与发展"></a>三、历史与发展</h3><p>　　几十年前，人类互相联系的唯一途径就是通过私人交流、邮政服务和固定电话。 谁会想到机器之间的交流、机器与人类的交流？但随着互联网的引入，以及硬件和通信技术的进步，这已成为现实。<br>IoT对我们许多人来说可能是一个新话题，但是它最初是由麻省理工学院（MIT）的AutoID实验室的凯文阿什顿（Kevin Ashton）在1999年提出的，当时他在宝洁公司做了演讲时创造了IoT这个词。</p><p>　　今天，IoT已经成为互联网世界的下一场革命；它利用数十亿传感器和连接物的只能，收集大数据，从而作出决定。 请参阅下图了解过去几十年物联网的发展历程：</p><img src="/imgs/iot-history-and-evolution.png" width="800" height="300"><h3 id="四、IoT应用和未来前景"><a href="#四、IoT应用和未来前景" class="headerlink" title="四、IoT应用和未来前景"></a>四、IoT应用和未来前景</h3><p>　　下图显示了不同行业物联网应用的详细视图：<br><img src="/imgs/iot-applications-and-future-prospects.png" width="400" height="200"></p><ul><li>冰箱，照明，洗衣机和恒温器等家用设备（Household devices）可以通过任何地方的移动应用进行控制。</li><li>可穿戴设备（Wearable devices），比如追踪身体运动和卡路里消耗的Fitbit等，已经成为主流。</li><li>联网汽车（Connected vehicles）已经从本田，大众和特斯拉等大型汽车市场进入市场，而这些汽车正在引领这一领域。纵观最近自动驾驶技术的发展，自动驾驶汽车已不再是不可想象的。</li><li>制造工厂（Manufacturing plants）和工厂（Factories）将能够在适当的时间监控自己的健康状况并预测维护情况，这将延长使用寿命并缩短停机时间。</li><li>电网（Power grids）和太阳能电站（solar plants）将连接到互联网，这将有助于分销商更有效地向终端用户供电，跟踪实际使用情况并防止盗窃等。</li><li>受益于物联网增长的行业包括：<ul><li>互联设备制造商（Connected device manufactures）：可穿戴设备，智能电表和家用电器的制造者。</li><li>网络提供商（Network providers）：IoT需要设备和系统的快速、安全和可靠的网络互连。</li><li>半导体（Semi-conductor）：微控制器（Microcontrollers），闪存设备（Flash devices）和传感器（Sensors）的需求将非常大。</li></ul></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　WHAT：简而言之，IoT，Internet of Things是一个将任何设备（只要具有开/关切换）连接到因特网和其他连接的设备的概念。<br>　　HOW：IoT 系统由一些带有传感器的设备和对象构成，这些设备通过嵌入式传感器、处理器和通信硬件，收集、发送和处理从周围环境中获得的数据。这些“联网”或“智能”设备可以和云平台进行交流发送数据、并接收对应的行为。<br>　　WHY：当平台集成了来自不同设备的数据后，可以对其进行应用分析，作出相应的回应行为；此外，共享最有价值的信息，可以帮助作出合适的决定。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.ibm.com/blogs/internet-of-things/what-is-the-iot/" target="_blank" rel="noopener">What is the Internet of Things?</a></li><li><a href="https://medium.com/iotforall/iot-explained-how-does-an-iot-system-actually-work-e90e2c435fe7" target="_blank" rel="noopener">IoT Explained — How Does an IoT System Actually Work?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文的主要内容是翻译自《Internet of Things with Raspberry Pi 3 —— Maneesh Rao》一书的第一章&lt;em&gt;Introduction to IoT&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　本篇文章中，我们将认识物联网 (IoT)相关内容。了解 IoT 生态系统的体系架构、其在不同领域的应用与优势、背景、当前场景以及未来。主要包含以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解 IoT&lt;/li&gt;
&lt;li&gt;IoT生态系统的体系架构&lt;/li&gt;
&lt;li&gt;历史与发展&lt;/li&gt;
&lt;li&gt;IoT应用和未来前景&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IoT" scheme="http://yoursite.com/categories/IoT/"/>
    
    
      <category term="IoT" scheme="http://yoursite.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Team Event</title>
    <link href="http://yoursite.com/2018/05/27/Team-Event/"/>
    <id>http://yoursite.com/2018/05/27/Team-Event/</id>
    <published>2018-05-27T09:20:27.000Z</published>
    <updated>2018-05-29T14:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　处于Team之中，也许你知道如何去做一件事，也许你习以为常，觉得这就是常态。<br>　　当你猛不丁地回过头看时，你会发现，这些流程与步骤是一次次的尝试与实践之后，最适合 Team 的方法措施；<br>　　抑或着，当你尝试给新人或者其他组的人描述时候，你会恍然大悟，为什么有些事情没有做，为什么有些事情会是这样发生的。</p><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　现在是笔者参与的第三个项目了，第一个是国外某大型传统金融保险行业的项目，第二个是国内电商零售行业项目，现在的是德国某制造生产行业的 IOT 项目。<br>　　当你只参与了一个项目的时候，更多的是接受；当开始不同的项目时候，开始学会比较，但是层次还是不够抽象层面还不够高。<br>　　最近刚好有一个 Team Event 机会，来对目前的项目组进行回顾与总结，在对不同的维度进行划分的过程中，可以清晰的理解不同项目采取不同的方法和措施的背景与原因。</p><h2 id="三、内容"><a href="#三、内容" class="headerlink" title="三、内容"></a>三、内容</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>　　首先提前将日常的 Team Event 按照下述的维度进行横向纵向划分：<br>　　<img src="/imgs/team-event.png" width="800" height="600"></p><h3 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2. 讲解"></a>2. 讲解</h3><p>　　向 Team 讲解各个维度，不同的颜色代表不同的维度。</p><h3 id="3-头脑风暴"><a href="#3-头脑风暴" class="headerlink" title="3. 头脑风暴"></a>3. 头脑风暴</h3><p>　　对有疑问的部分，写在便利贴上面，然后贴到对应的 item 处。该过程需要 Time-Box。</p><h3 id="4-分类-amp-解释"><a href="#4-分类-amp-解释" class="headerlink" title="4. 分类 &amp; 解释"></a>4. 分类 &amp; 解释</h3><p>　　Go through 所有的便利贴，并进行快速的分类，遇到不明确的，可以让贴该便利贴的人解释一下。</p><h3 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h3><p>　　如果讨论所有的便利贴，肯定花费大家不少的时间，所以列优先级就非常重要。让大家投票选出优先级最高的3-5个。根据每个类别上的票数决定下一个阶段要讨论的item。</p><h3 id="6-讨论"><a href="#6-讨论" class="headerlink" title="6. 讨论"></a>6. 讨论</h3><p>　　从票数最多的 item 开始讨论，并且Time-Box十分钟，时间到的时候，如果还没有讨论完，就征询一下大家是否还要继续10分钟讨论。</p><h3 id="7-Actions"><a href="#7-Actions" class="headerlink" title="7. Actions"></a>7. Actions</h3><p>　　当讨论的时候，描述了问题，大家要积极的想解决办法，帮助提高或者改进，同时将 action 分配给相关的人。</p><p>Notes:</p><ul><li>平常的工作全部以 Pairing 进行，进一步解释了该项目目前没有 QA，没有 code review。</li><li>采用 T-shirt 方式而不是斐波那契数列进行估点</li><li>虽然物理墙和 Jira 电子墙都有，但是主要以物理墙为主。（之前的 Team 以电子墙为主，主要是因为 Team 是分布式的）</li><li>Show &amp; Tell这个活动的发生，不仅仅是内部的技术分享，还包括业务分享以及平常遇到比较好的技术小问题分享。（主要是没有 code review，所以可以分享的全部在这个里面）</li><li>物理墙上有一栏专门是 Inbox，每天早上都会过一遍，里面包括你任何想说的，比如你做的一些事情可能会潜在的影响，或者你的休假计划等等。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　在第一个项目时候，团队定期进行讨论，当时笔者参与很少，私下觉得这种会议很浪费时间，直到现在全程当场参与，才觉得效果颇佳。<br>　　在第二个项目时候，团队也有定期讨论，逐个逐个的说出自己某段时间的感受，但是形式不是非常 formal，所以当时笔者只是感受，并没有联系到一起。<br>　　现在第三个项目，特此记录一下该 Team event 做法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　处于Team之中，也许你知道如何去做一件事，也许你习以为常，觉得这就是常态。&lt;br&gt;　　当你猛不丁地回过头看时，你会发现，这些流程与步骤是一次次的尝试与实践之后，最适合 Team 的方法措施；&lt;br&gt;　　抑或着，当你尝试给新人或者其他组的人描述时候，你会恍然大悟，为什么有些事情没有做，为什么有些事情会是这样发生的。&lt;/p&gt;
    
    </summary>
    
      <category term="Team" scheme="http://yoursite.com/categories/Team/"/>
    
    
      <category term="Team" scheme="http://yoursite.com/tags/Team/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Jenkins pipeline Job构建、上传、部署</title>
    <link href="http://yoursite.com/2018/01/13/Nexus-Jenkins-pipeline-Job%E6%9E%84%E5%BB%BA%E3%80%81%E4%B8%8A%E4%BC%A0%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/01/13/Nexus-Jenkins-pipeline-Job构建、上传、部署/</id>
    <published>2018-01-13T12:56:23.000Z</published>
    <updated>2018-05-27T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　上一篇里面，在Jenkins容器里面，创建了一个简单的gradle job，进行构建产物。<br>本篇则构建多个stage：构建、上传、形成一个stage view。</p><a id="more"></a><p>　　本打算把build docker image，publish docker image的stage加上，但是中间出现了一些问题，主要是在jenkins的docker容器里运行docker，就形成了docker in docker 的局面。这部分问题查阅了相关的资料，没找到非常满意的做法，因此暂不在本文涉及。</p><p>　　下面暂时列举一些参考链接：</p><ul><li>[katacoda上关于Jenkins - Building Docker Images using Jenkins的实验课程]<br>(<a href="https://www.katacoda.com/courses/jenkins/build-docker-images" target="_blank" rel="noopener">https://www.katacoda.com/courses/jenkins/build-docker-images</a>)</li><li><a href="http://container-solutions.com/running-docker-in-jenkins-in-docker/" target="_blank" rel="noopener">Running Docker in Jenkins (in Docker)</a></li><li><a href="https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci" target="_blank" rel="noopener">The simple way to run Docker-in-Docker for CI</a></li></ul><h2 id="二、安装Pipeline插件"><a href="#二、安装Pipeline插件" class="headerlink" title="二、安装Pipeline插件"></a>二、安装Pipeline插件</h2><p>　　如果你是新建一个jenkins容器，只需要在安装的时候勾选Pipeline插件即可。</p><p>　　如果你是已经存在的jenkins容器，则进入Jenkins -&gt; Plugin Manager -&gt; <a href="http://localhost:51001/pluginManager/available" target="_blank" rel="noopener">available</a>，找到Pipeline插件，选择install without restart等待安装完成即可。</p><h2 id="三、新建pipeline工程"><a href="#三、新建pipeline工程" class="headerlink" title="三、新建pipeline工程"></a>三、新建pipeline工程</h2><h3 id="1-新建item，选择pipeline工程"><a href="#1-新建item，选择pipeline工程" class="headerlink" title="1. 新建item，选择pipeline工程"></a>1. 新建item，选择pipeline工程</h3><p>　　<img src="/imgs/nexus-jenkins-new-item-pipeline.png" width="800" height="400"></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>General，去一个项目名称</li><li>Pipeline，选择Pipeline Script；在Script里面写下如下脚本：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   stage <span class="string">'Checkout'</span></span><br><span class="line">   git([ur<span class="variable">l:</span> <span class="string">'https://github.com/zhangyuyu/Simple-web.git'</span>, branch: <span class="string">'master'</span>])</span><br><span class="line">   </span><br><span class="line">   stage <span class="string">'Build'</span></span><br><span class="line">   <span class="keyword">sh</span> <span class="string">'./gradlew clean build'</span></span><br><span class="line">   </span><br><span class="line">   stage <span class="string">'Upload'</span></span><br><span class="line">   <span class="keyword">sh</span> <span class="string">'./gradlew uploadArchives'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Build-Now"><a href="#3-Build-Now" class="headerlink" title="3. Build Now"></a>3. Build Now</h3><p>　　配置完成之后，即可手动触发了。<br>　　<img src="/imgs/nexus-jenkins-pipeline-build.png" width="500" height="300"></p><h2 id="四、jenkins中涉及到的术语"><a href="#四、jenkins中涉及到的术语" class="headerlink" title="四、jenkins中涉及到的术语"></a>四、jenkins中涉及到的术语</h2><ol><li><p>Master<br>　　Master是Jenkins安装和运行的地方，它负责解析job脚本，处理任务，调度计算资源。</p></li><li><p>Agent<br>　　Agent是负责处理从Master分发的任务。</p></li><li><p>Executor<br>　　Executor是执行任务的计算资源，它可以在Master或者Agent上运行。多个Executor也可以合作执行一些任务。</p></li><li><p>Job 任务<br>　　job用来定义具体的构建过程。一个新的job及时一个新的item（这一点区别于另外一个CI CD工具——GO CD，在Go里面，一个job只是一个pipeline的一个步骤）</p></li><li><p>Groovy<br>　　Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy代码能够与Java代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy可以使用其他Java语言编写的库。Jenkins用Groovy作为DSL。</p></li><li><p>Pipeline<br>　　流水线即代码（Pipeline as Code），通过编码而非配置持续集成/持续交付（CI/CD）运行工具的方式定义部署。流水线使得部署是可重现、可重复的。<br>　　流水线包括节点（Node）、阶段（Stage）和步骤（Step）。流水线执行在节点上。节点是Jenkins安装的一部分。流水线通常包含多个阶段。一个阶段包含多个步骤。</p><ul><li><p>node在Pipeline中的context中，node是job运行的地方。 node会给job创建一个工作空间。工作空间就是一个文件目录，这是为了避免跟资源相关的处理互相产生影响。工作空间是node创建的，在node里的所有step都执行完毕后会自动删除。</p></li><li><p>stage阶段，stage是一个任务执行过程的独立的并且唯一的逻辑块，Pipeline定义在语法上就是由一系列的stage组成的。 每一个stage逻辑都包含一个或多个step。</p></li><li><p>step步骤，一个step是整个流程中的一系列事情中的一个独立的任务，step是用来告诉Jenkins如何做。</p></li></ul></li><li><p>Jenkinfile<br>　　Jenkins支持创建流水线。它使用一种基于Groovy的流水线领域特定语言（Pipeline DSL）的简单脚。而这些脚本，通常名字叫Jenkinsfile。它定义了一些根据指定参数执行简单或复杂的任务的步骤。流水线创建好后，可以用来构建代码，或者编排从代码提交到交付过程中所需的工作。Jenkins中的Jenkinsfile有点类似Docker中的Dockfile的感觉。</p></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章只是基础的记录了一下运用jenkins构建pipeline工程的做法，关于docker的复杂步骤，以后将会更新。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/wzy5223/p/5554935.html" target="_blank" rel="noopener">试用Jenkins 2 的 Pipeline 项目</a></li><li><a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/" target="_blank" rel="noopener">Using a Jenkinsfile</a></li><li><a href="http://dockone.io/article/2594" target="_blank" rel="noopener">Jenkins与Docker的持续集成实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　上一篇里面，在Jenkins容器里面，创建了一个简单的gradle job，进行构建产物。&lt;br&gt;本篇则构建多个stage：构建、上传、形成一个stage view。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - 构建jenkins容器、配置gradle job从nexus获取依赖</title>
    <link href="http://yoursite.com/2018/01/12/Nexus-%E6%9E%84%E5%BB%BAjenkins%E5%AE%B9%E5%99%A8%E3%80%81%E9%85%8D%E7%BD%AEgradle-job%E4%BB%8Enexus%E8%8E%B7%E5%8F%96%E4%BE%9D%E8%B5%96/"/>
    <id>http://yoursite.com/2018/01/12/Nexus-构建jenkins容器、配置gradle-job从nexus获取依赖/</id>
    <published>2018-01-12T11:04:13.000Z</published>
    <updated>2018-05-27T09:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面都是在手动的构建、上传，那么接下来我们会熟悉持续集成与持续交付的相关过程：利用jenkins生成并上传构建产物、构建并上传应用程序的docker image以及部署应用。<br>　　本篇文章主要是先构建一个jenkins容器，然后基本实现利用jenkins生成构建产物。<br><a id="more"></a></p><h2 id="二、构建jenkins容器"><a href="#二、构建jenkins容器" class="headerlink" title="二、构建jenkins容器"></a>二、构建jenkins容器</h2><h3 id="1-通过nexus获取jenkins-jenkins-lts镜像"><a href="#1-通过nexus获取jenkins-jenkins-lts镜像" class="headerlink" title="1. 通过nexus获取jenkins/jenkins:lts镜像"></a>1. 通过nexus获取jenkins/jenkins:lts镜像</h3><h4 id="1-1-启动nexus-container"><a href="#1-1-启动nexus-container" class="headerlink" title="1.1 启动nexus container"></a>1.1 启动nexus container</h4><p>　　创建container的部分，可以参考前文<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">Nexus - Sonatype Nexus搭建maven私服</a>。<br>启动nexus container，可直接在docker for mac里面，点击start即可。</p><h4 id="1-2-获取镜像"><a href="#1-2-获取镜像" class="headerlink" title="1.2 获取镜像"></a>1.2 获取镜像</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull <span class="string">localhost:</span><span class="number">50000</span><span class="regexp">/jenkins/</span><span class="string">jenkins:</span>lts</span><br></pre></td></tr></table></figure><h4 id="1-3-运行容器"><a href="#1-3-运行容器" class="headerlink" title="1.3 运行容器"></a>1.3 运行容器</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name jenkins-container -p <span class="number">51001</span>:<span class="number">8080</span> -p <span class="number">51002</span>:<span class="number">50000</span> -v <span class="regexp">~/Documents/</span><span class="string">jenkins_home:</span><span class="regexp">/var/</span>jenkins_home <span class="string">localhost:</span><span class="number">50000</span><span class="regexp">/jenkins/</span><span class="string">jenkins:</span>lts</span><br></pre></td></tr></table></figure><h4 id="1-4-初始化jenkins配置"><a href="#1-4-初始化jenkins配置" class="headerlink" title="1.4 初始化jenkins配置"></a>1.4 初始化jenkins配置</h4><ul><li><p>上述运行容器的命令执行之后，会出现如下信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">97b8f494cbc340c4818083XXXXXXXXXX</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br></pre></td></tr></table></figure></li><li><p>kitematic的右侧也会出现如下页面：<br>　　<img src="/imgs/nexus-jenkins-kitematic-web-view.png" width="400" height="200"></p></li><li><p>浏览器访问<code>http://localhost:51001/</code>，输入上述命令行的password<br>　　<img src="/imgs/nexus-jenkins-unlock.png" width="400" height="200"></p></li><li><p>自定义安装插件<br>　　建议在下图中，选择“select plugins to install”，然后不要选择太多的插件，等到要用的时候再去安装。笔者在本次使用中只选择了<code>Git plugin</code>和<code>Gradle Plugin</code>。</p><ul><li>Git插件:用于从git仓库获取代码</li><li>Gradle插件:用于打包gradle项目</li></ul></li></ul><img src="/imgs/nexus-jenkins-customize-plugins.png" width="400" height="200"><ul><li>创建admin user<br>　　为了不忘记，笔者设置的是<code>admin/admin</code>。</li></ul><img src="/imgs/nexus-jenkins-admin-user.png" width="400" height="200"><ul><li>配置插件<br>　　依次选择Jenkins -&gt; Manage Jenkins -&gt; Global Tool Configuration：</li></ul><img src="/imgs/nexus-jenkins-configure-tools.png" width="800" height="500"><h2 id="三、配置gradle-job"><a href="#三、配置gradle-job" class="headerlink" title="三、配置gradle job"></a>三、配置gradle job</h2><h3 id="1-新建Freestyle-project"><a href="#1-新建Freestyle-project" class="headerlink" title="1. 新建Freestyle project"></a>1. 新建Freestyle project</h3><p>　　<img src="/imgs/nexus-jenkins-new-item.png" width="800" height="500"></p><h3 id="2-配置source-code-management"><a href="#2-配置source-code-management" class="headerlink" title="2. 配置source code management"></a>2. 配置source code management</h3><p>　　<img src="/imgs/nexus-jenkins-configure-source-code.png" width="800" height="500"></p><p>　　选择Git：</p><ul><li>Repository URL 填写你的项目的git地址</li><li>Credentials 选择你的git仓库的账户密码(如果没有，请点击Add)</li><li>Branches to build =&gt; Branch Specifier (blank for ‘any’) 这里填写构建项目时将要拉取的分支的名称 例如(*/master)</li></ul><h3 id="3-配置build"><a href="#3-配置build" class="headerlink" title="3. 配置build"></a>3. 配置build</h3><p>　　<img src="/imgs/nexus-jenkins-configure-build.png" width="800" height="500"></p><p>　　选择Invoke Gradle script：</p><ul><li>选择 Invoke Gradle , Gradle Version 中选择前面自动安装的gradle</li><li>Tasks 填写 <code>clean build</code></li><li>点击高级，勾上Force GRADLE_USER_HOME to use workspace</li></ul><h3 id="4-手动在容器里进行build"><a href="#4-手动在容器里进行build" class="headerlink" title="4. 手动在容器里进行build"></a>4. 手动在容器里进行build</h3><h4 id="4-1-登录到jenkins-container"><a href="#4-1-登录到jenkins-container" class="headerlink" title="4.1 登录到jenkins container"></a>4.1 登录到jenkins container</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bash -c <span class="string">"clear &amp;&amp; docker exec -it jenkins-container sh"</span></span></span><br></pre></td></tr></table></figure><h4 id="4-2-在jenkins-container里面"><a href="#4-2-在jenkins-container里面" class="headerlink" title="4.2 在jenkins container里面"></a>4.2 在jenkins container里面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/jenkins_home/workspace/simple-web</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew clean build</span></span><br></pre></td></tr></table></figure><h4 id="4-3-可能出现的错误"><a href="#4-3-可能出现的错误" class="headerlink" title="4.3 可能出现的错误"></a>4.3 可能出现的错误</h4><h5 id="4-3-1-具体错误"><a href="#4-3-1-具体错误" class="headerlink" title="4.3.1 具体错误"></a>4.3.1 具体错误</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew clean build</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed <span class="keyword">with</span> <span class="keyword">an</span> exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">'simple-web'</span>.</span><br><span class="line">&gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> all <span class="built_in">files</span> <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> org.akhikhl.gretty:gretty:<span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">     Required <span class="keyword">by</span>:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> org.akhikhl.gretty:gretty:<span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">         &gt; Could <span class="keyword">not</span> <span class="built_in">get</span> resource <span class="string">'http://localhost:32768/repository/maven-central/org/akhikhl/gretty/gretty/2.0.0/gretty-2.0.0.pom'</span>.</span><br><span class="line">            &gt; Could <span class="keyword">not</span> HEAD <span class="string">'http://localhost:32768/repository/maven-central/org/akhikhl/gretty/gretty/2.0.0/gretty-2.0.0.pom'</span>.</span><br><span class="line">               &gt; Connect <span class="built_in">to</span> localhost:<span class="number">32768</span> [localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] failed: Connection refused (Connection refused)</span><br></pre></td></tr></table></figure><h5 id="4-3-2-原因"><a href="#4-3-2-原因" class="headerlink" title="4.3.2 原因"></a>4.3.2 原因</h5><p>　　由于应用simple-web的代码<code>gradle.properties</code>里面的nexus是localhost，而实际上期望的是我们自己搭建的nexus repo的地址，因此会报错，连接失败，下载不了依赖。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexusUrl=http:<span class="regexp">//</span>localhost:<span class="number">32768</span><span class="regexp">/repository/</span></span><br></pre></td></tr></table></figure></p><h5 id="4-3-3-解决办法"><a href="#4-3-3-解决办法" class="headerlink" title="4.3.3 解决办法"></a>4.3.3 解决办法</h5><p>　　这里先提供粗暴的直接解决办法，下文会自动化整个过程。一般docker之间的互连有如下三种方式：</p><ul><li>通过端口公开（port exposure）连接</li><li>将宿主机端口绑定（bind）至容器端口</li><li>通过链接（link）选项去连接两个容器</li></ul><p>　　对于第一种方式，由于我们的容器已经正在运行了，不好再次公开端口；对于第二种方式，应该是连接jenkins container -&gt; host -&gt; nexus container，但是nexus container已经将32768端口号和宿主机绑定，jenkins就无法再次绑定该端口；第三种方式可以一试。</p><h5 id="4-3-4-具体解决步骤"><a href="#4-3-4-具体解决步骤" class="headerlink" title="4.3.4 具体解决步骤"></a>4.3.4 具体解决步骤</h5><ul><li><p>先构建nexus3-container容器和jenkins-container的网络连接<br>用Docker for mac，在两个container的network设置处，都要配置Links：</p><img src="/imgs/nexus-jenkins-link-container.png" width="600" height="300"><p>之后登陆到<code>jenkins-container</code>，就可以ping通<code>nexus3-container</code>了。</p></li><li><p>将gradle.properties文件里的nexusUrl设置为<code>nexus3-container</code>的ip地址及端口号<code>510001</code>。</p></li></ul><p>　　上述方式缺点很明显，每次构建都要更改代码里的nexusUrl，依赖于一个动态ip配置；此外，用link必须要求容器是正在运行的，因此每次都必须先启动两个容器，再去配置link container。可以有几种解决方案，比如动态设置环境变量、比如设置静态子网ip（下文将讲述该方式）。</p><h3 id="5-通过jenkins-UI进行build"><a href="#5-通过jenkins-UI进行build" class="headerlink" title="5. 通过jenkins UI进行build"></a>5. 通过jenkins UI进行build</h3><p>　　点击左侧的<code>Build Now</code>，即可看到<code>Build History</code>里面有Build的次数和时间信息。点击进入，可看到详细的console构建信息：<br>　　<img src="/imgs/nexus-jenkins-build-console.png" width="800" height="550"></p><h2 id="四、自动化"><a href="#四、自动化" class="headerlink" title="四、自动化"></a>四、自动化</h2><h3 id="1-删除已有container"><a href="#1-删除已有container" class="headerlink" title="1. 删除已有container"></a>1. 删除已有container</h3><p>　　手动删除本地的nexus3-container和jenkins-container，不删除其对应的容器数据。</p><h3 id="2-创建docker-compose-yml"><a href="#2-创建docker-compose-yml" class="headerlink" title="2. 创建docker-compose.yml"></a>2. 创建docker-compose.yml</h3><p>　　下面的docker-compose文件基本是按照现有的容器配置进行编写的，唯一不同的是，增加了关于网络的部分：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">nexus-service</span>:</span><br><span class="line">    <span class="attribute">image</span>: sonatype/<span class="attribute">nexus3</span>:latest</span><br><span class="line">    <span class="attribute">container_name</span>: nexus3-container</span><br><span class="line">    <span class="attribute">hostname</span>: wanzi</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="string">"32768:8081"</span></span><br><span class="line">      - <span class="string">"50000:50000"</span></span><br><span class="line">      - <span class="string">"50001:50001"</span></span><br><span class="line">      - <span class="string">"50002:50002"</span></span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ~/Documents/Kitematic/nexus3-container/<span class="attribute">nexus-data</span>:/nexus-data</span><br><span class="line">    <span class="attribute">networks</span>:</span><br><span class="line">      <span class="attribute">nexus-net</span>:</span><br><span class="line">        <span class="attribute">ipv4_address</span>: <span class="number">172.16</span>.<span class="number">238.10</span></span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line"></span><br><span class="line">  <span class="attribute">jenkins-service</span>:</span><br><span class="line">    <span class="attribute">image</span>: <span class="attribute">localhost</span>:<span class="number">50000</span>/jenkins/<span class="attribute">jenkins</span>:lts</span><br><span class="line">    <span class="attribute">container_name</span>: jenkins-container</span><br><span class="line">    <span class="attribute">hostname</span>: wanzi</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ~/Documents/<span class="attribute">jenkins_home</span>:/var/jenkins_home</span><br><span class="line">    <span class="attribute">networks</span>:</span><br><span class="line">      <span class="attribute">nexus-net</span>:</span><br><span class="line">        <span class="attribute">ipv4_address</span>: <span class="number">172.16</span>.<span class="number">238.11</span></span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="string">"51001:8080"</span></span><br><span class="line">      - <span class="string">"51002:50000"</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - nexus-service</span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks</span>:</span><br><span class="line">  <span class="attribute">nexus-net</span>:</span><br><span class="line">    <span class="attribute">driver</span>: bridge</span><br><span class="line">    <span class="attribute">ipam</span>:</span><br><span class="line">      <span class="attribute">driver</span>: default</span><br><span class="line">      <span class="attribute">config</span>:</span><br><span class="line">        - <span class="attribute">subnet</span>: <span class="number">172.16</span>.<span class="number">238.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure></p><h4 id="4-更改nexusUrl"><a href="#4-更改nexusUrl" class="headerlink" title="4. 更改nexusUrl"></a>4. 更改nexusUrl</h4><ul><li><p>更改<code>simple-web</code>中<code>gradle.properties</code>文件的nexusUrl</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexusUrl=http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">8081</span><span class="regexp">/repository/</span></span><br></pre></td></tr></table></figure></li><li><p>然后push代码到github</p></li></ul><h3 id="3-依次启动nexus3-container和jenkins-container"><a href="#3-依次启动nexus3-container和jenkins-container" class="headerlink" title="3. 依次启动nexus3-container和jenkins-container"></a>3. 依次启动<code>nexus3-container</code>和<code>jenkins-container</code></h3><p>　　由于<code>jenkins-container</code>要依赖于从<code>nexus3-container</code>下载依赖，所以要先启动<code>nexus3-container</code>。<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up nexus-service</span></span><br></pre></td></tr></table></figure></p><p>　　然后启动<code>jenkins-container</code><br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up jenkins-service</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章是以jenkins搭建持续集成、持续交付应用的首篇，主要介绍了一些基本的操作。包括搭建jenkens容器，与前文的nexus环境进行结合，创建第一个gradle job构建产物。<br>　　接下来，会逐步搭建jenkins上其他的job。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.jdkhome.com/article/build-automation-by-git-jenkins-gradle-docker" target="_blank" rel="noopener">基于 git + jenkins + gradle + docker 搭建自动化集成环境</a></li><li><a href="https://deepzz.com/post/docker-compose-file.html" target="_blank" rel="noopener">如何对docker-compose配置静态ip</a></li><li><a href="http://dockone.io/article/1155" target="_blank" rel="noopener">Docker容器互联方法-篇一</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面都是在手动的构建、上传，那么接下来我们会熟悉持续集成与持续交付的相关过程：利用jenkins生成并上传构建产物、构建并上传应用程序的docker image以及部署应用。&lt;br&gt;　　本篇文章主要是先构建一个jenkins容器，然后基本实现利用jenkins生成构建产物。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - 构建并上传docker image至Sonatype Nexus</title>
    <link href="http://yoursite.com/2018/01/09/Nexus-%E6%9E%84%E5%BB%BA%E5%B9%B6%E4%B8%8A%E4%BC%A0docker-image%E8%87%B3Sonatype-Nexus/"/>
    <id>http://yoursite.com/2018/01/09/Nexus-构建并上传docker-image至Sonatype-Nexus/</id>
    <published>2018-01-09T13:11:20.000Z</published>
    <updated>2018-05-27T09:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面两篇文章<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">Nexus - Sonatype Nexus搭建maven私服</a>、<a href="http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/" target="_blank" rel="noopener">Nexus - Gradle打包上传至Sonatype Nexus</a>都是介绍maven相关的仓库，下载应用程序相关的依赖包，上传应用程序的构建产物。<br>本篇文章将介绍docker相关的仓库，下载docker镜像，上传自己构建的应用程序的docker镜像。<br>方便持续集成时候，能够直接从ci上获取应用程序镜像，进行部署。</p><a id="more"></a><h2 id="二、搭建Nexus-docker仓库"><a href="#二、搭建Nexus-docker仓库" class="headerlink" title="二、搭建Nexus docker仓库"></a>二、搭建Nexus docker仓库</h2><p>　　下面我们会：</p><ul><li>创建一个docker proxy仓库，用于代理Docker Hub</li><li>创建一个docker hosted仓库，用于管理我们自己构建的镜像</li><li>创建一个docker group仓库，用于对上面两个仓库暴露统一的URL。</li></ul><p>　　与此同时，我们会创建三个blob：docker-hub-blob、docker-local-blob、docker-blob分别对应上面的docker proxy、docker hosted、docker group仓库。（创建blob的步骤略）</p><h3 id="1-创建docker-proxy仓库"><a href="#1-创建docker-proxy仓库" class="headerlink" title="1. 创建docker proxy仓库"></a>1. 创建docker proxy仓库</h3><h4 id="1-1-各项配置"><a href="#1-1-各项配置" class="headerlink" title="1.1 各项配置"></a>1.1 各项配置</h4><ul><li><p>Repository Connectors<br>　　<img src="/imgs/nexus-docker-proxy-repository-connectors.png" width="600" height="250"></p></li><li><p>Docker Registry API Support<br>　　<img src="/imgs/nexus-docker-proxy-registry-api.png" width="600" height="250"></p></li></ul><blockquote><p>　　Generally V1 support is only needed for repository groups that will be used for command line-based searches, when any client side tools in use require V1 or when a upstream proxy repository requires V1. If you are unsure if your setup uses these or V1, it is recommended to activate V1 support as there should be no harm if it is not needed.</p></blockquote><p>　　此处Enable v1之后，会允许使用V1作为V2的fallback。将来，V2会替代V1，但是有些功能（比如docker search）在V2中暂时还没实现。如果你不确定是否要enable V1，那么推荐你激活这个选项，因为激活这个选项不会造成任何危害，但是某些情况下，不激活反而会造成一些错误。</p><ul><li><p>Proxy<br>　　<img src="/imgs/nexus-docker-proxy-proxy.png" width="600" height="250"></p></li><li><p>Storage<br>　　<img src="/imgs/nexus-docker-proxy-storage.png" width="600" height="250"></p></li></ul><h4 id="1-2-从远程docker-hub获取base-image-tomcat-8-0-jre8-alpine"><a href="#1-2-从远程docker-hub获取base-image-tomcat-8-0-jre8-alpine" class="headerlink" title="1.2 从远程docker hub获取base image tomcat:8.0-jre8-alpine"></a>1.2 从远程docker hub获取base image <code>tomcat:8.0-jre8-alpine</code></h4><h5 id="1-2-1-宿主机和nexus-docker-proxy仓库的认证"><a href="#1-2-1-宿主机和nexus-docker-proxy仓库的认证" class="headerlink" title="1.2.1 宿主机和nexus docker proxy仓库的认证"></a>1.2.1 宿主机和nexus docker proxy仓库的认证</h5><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:<span class="number">50002</span></span><br><span class="line"><span class="literal">WARNING</span>! Using <span class="comment">--password via the CLI is insecure. Use --password-stdin.</span></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>检查配置文件<code>~/.docker/config.json</code>：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"auths"</span>: &#123;</span><br><span class="line">        <span class="string">"localhost:50000"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"localhost:50001"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"localhost:50002"</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"HttpHeaders"</span>: &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Docker-Client/17.09.1-ce (darwin)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"credsStore"</span>: <span class="string">"osxkeychain"</span></span><br><span class="line">&#125;%</span><br></pre></td></tr></table></figure></p><h5 id="1-2-2-获取base-image"><a href="#1-2-2-获取base-image" class="headerlink" title="1.2.2 获取base image"></a>1.2.2 获取base image</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sonatype/nexus3     latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line"></span><br><span class="line">$ docker pull localhos<span class="variable">t:50000</span>/tomca<span class="variable">t:8</span>.<span class="number">0</span>-jre8-alpine</span><br><span class="line"><span class="number">8.0</span>-jre8-alpine: Pulling from tomcat</span><br><span class="line"><span class="number">2</span>fdfe1cd78c2: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">82630</span>fd6e5b<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">119</span>d364c885d: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">749</span>ddbaec87<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">801</span>c4e05625<span class="variable">b:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">08</span>b85d1fac84: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">668</span>b34e85733: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">859329</span>ae45ee: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:fc67c79796f2bf034f9af3cf20fd1e051b780c403c31b945850c7e061c899bd7</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> localhos<span class="variable">t:50000</span>/tomca<span class="variable">t:8</span>.<span class="number">0</span>-jre8-alpine</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sonatype/nexus3          latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line">localhos<span class="variable">t:50000</span>/tomcat   <span class="number">8.0</span>-jre8-alpine     <span class="number">5</span>b01f7b2f446        <span class="number">3</span> weeks ago         <span class="number">117</span>MB</span><br></pre></td></tr></table></figure><h5 id="1-2-3-查看nexus-docker-proxy-仓库"><a href="#1-2-3-查看nexus-docker-proxy-仓库" class="headerlink" title="1.2.3 查看nexus docker proxy 仓库"></a>1.2.3 查看nexus docker proxy 仓库</h5><p>　　<img src="/imgs/nexus-browse-docker-proxy.png" width="600" height="500"><br>　　可以看到<code>tomcat:8.0-jre8-alpine</code>在我们的docker proxy仓库里也存下来了。</p><h4 id="1-3-可能出现的错误"><a href="#1-3-可能出现的错误" class="headerlink" title="1.3 可能出现的错误"></a>1.3 可能出现的错误</h4><h5 id="1-3-1-getsockopt-connection-refused"><a href="#1-3-1-getsockopt-connection-refused" class="headerlink" title="1.3.1 getsockopt: connection refused"></a>1.3.1 getsockopt: connection refused</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Get http://localhost:50002/v2/: dial tcp [::1]:50000: getsockopt: connection refused</span><br></pre></td></tr></table></figure></li><li><p>原因：<br>　　nexus3-container端口号没有暴露给宿主机</p></li><li><p>解决办法<br>　　在Docker for mac的Configure Ports处暴露端口号50002（下图暴露了50000、500001、500002供下文所用）</p><img src="/imgs/nexus-docker-proxy-configure-port.png" width="500" height="250"></li></ul><h5 id="1-3-2-401-Unauthorized"><a href="#1-3-2-401-Unauthorized" class="headerlink" title="1.3.2. 401 Unauthorized"></a>1.3.2. 401 Unauthorized</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line"><span class="keyword">Error </span>response from daemon: login attempt to http://localhost:50002/v2/ failed with status: 401 Unauthorized</span><br></pre></td></tr></table></figure></li><li><p>解决办法：<br>　　上面的Repository Connectors配置里，一定要勾选Force basic authentication</p></li></ul><h5 id="1-3-3-http-server-gave-HTTP-response-to-HTTPS-client"><a href="#1-3-3-http-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="1.3.3. http: server gave HTTP response to HTTPS client"></a>1.3.3. http: server gave HTTP response to HTTPS client</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Get https://localhost:50002/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure></li><li><p>原因：<br>　　宿主机上的Docker daemon应该用HTTP通信，而不是HTTPS。</p></li><li><p>解决办法<br>　　对于不同的操作系统，配置的方法不一样。</p></li></ul><p>　　对于Linux系统，应该在<code>/etc/docker/daemon.json</code>设置如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"localhost:50002"</span>,</span><br><span class="line">    <span class="string">"localhost:50001"</span>,</span><br><span class="line">    <span class="string">"localhost:50000"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"disable-legacy-registry"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　对于Windows or Mac，应该设置如下：<br>　　<img src="/imgs/nexus-docker-proxy-daemon.png" width="500" height="250"></p><h3 id="2-创建docker-hosted仓库"><a href="#2-创建docker-hosted仓库" class="headerlink" title="2. 创建docker hosted仓库"></a>2. 创建docker hosted仓库</h3><p>　　配置如下图所示：<br>　　<img src="/imgs/nexus-docker-hosted.png" width="600" height="600"></p><h3 id="3-创建docker-group仓库"><a href="#3-创建docker-group仓库" class="headerlink" title="3. 创建docker group仓库"></a>3. 创建docker group仓库</h3><p>　　配置如下图所示：<br>　　<img src="/imgs/nexus-docker-group.png" width="600" height="600"></p><h2 id="三、构建应用image上传至nexus"><a href="#三、构建应用image上传至nexus" class="headerlink" title="三、构建应用image上传至nexus"></a>三、构建应用image上传至nexus</h2><h3 id="1-构建应用image"><a href="#1-构建应用image" class="headerlink" title="1. 构建应用image"></a>1. 构建应用image</h3><h4 id="1-1-准备一个单独的文件夹，避免不必要的干扰"><a href="#1-1-准备一个单独的文件夹，避免不必要的干扰" class="headerlink" title="1.1 准备一个单独的文件夹，避免不必要的干扰"></a>1.1 准备一个单独的文件夹，避免不必要的干扰</h4><p>　　<code>mkdir docker</code></p><h4 id="1-2-准备材料Dockerfile和war包"><a href="#1-2-准备材料Dockerfile和war包" class="headerlink" title="1.2 准备材料Dockerfile和war包"></a>1.2 准备材料Dockerfile和war包</h4><ul><li>Dockerfile<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> localhost:<span class="number">50000</span>/tomcat:<span class="number">8.0</span>-jre8-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> yuzhang &lt;<span class="number">1580074674</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> simple-web-1.0.0.war /usr/<span class="built_in">local</span>/tomcat/webapps/</span></span><br></pre></td></tr></table></figure></li></ul><p>　　端口号<code>50000</code>是docker group的端口号，该端口号既包含了docker proxy的端口，也包含了docker hosted的端口。</p><ul><li>simple-web-1.0.0.war<br>　　<code>cp build/libs/simple-web-1.0.0.war docker/</code></li></ul><h4 id="1-3-构建镜像"><a href="#1-3-构建镜像" class="headerlink" title="1.3 构建镜像"></a>1.3 构建镜像</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t localhost:<span class="number">50001</span>/<span class="built_in">simple</span>-web:<span class="number">1.0</span><span class="number">.0</span> .</span><br><span class="line">ending build context to Docker daemon  <span class="number">22.53</span>kB</span><br><span class="line"><span class="keyword">Step</span> <span class="number">1</span>/<span class="number">3</span> : FROM localhost:<span class="number">50000</span>/tomcat:<span class="number">8.0</span>-jre8-alpine</span><br><span class="line"> ---&gt; <span class="number">5</span>b01f7b2f446</span><br><span class="line"><span class="keyword">Step</span> <span class="number">2</span>/<span class="number">3</span> : MAINTAINER yuzhang &lt;<span class="number">1580074674</span>@qq.com&gt;</span><br><span class="line"> ---&gt; Running <span class="built_in">in</span> <span class="number">9</span>eba56fa9840</span><br><span class="line"> ---&gt; <span class="number">966</span>ac719976a</span><br><span class="line">Removing intermediate container <span class="number">9</span>eba56fa9840</span><br><span class="line"><span class="keyword">Step</span> <span class="number">3</span>/<span class="number">3</span> : ADD <span class="built_in">simple</span>-web<span class="number">-1.0</span><span class="number">.0</span>.war /usr/local/tomcat/webapps/</span><br><span class="line"> ---&gt; <span class="number">6</span>d3159ba5d64</span><br><span class="line">Successfully built <span class="number">6</span>d3159ba5d64</span><br><span class="line">Successfully tagged <span class="built_in">simple</span>-web:<span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>　　这里的端口号只是为了待会上传时候，指定到docker hosted里面，因为group包含了两个端口。</p><h4 id="1-4-查看宿主机上镜像"><a href="#1-4-查看宿主机上镜像" class="headerlink" title="1.4 查看宿主机上镜像"></a>1.4 查看宿主机上镜像</h4><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">simple-web               1.0.0               6d3159ba5d64        20 seconds ago      117MB</span><br><span class="line">sonatype/nexus3          latest              0b6b1bc88ccb        7 days ago          484MB</span><br><span class="line">localhost:50000/tomcat   8.0-jre8-alpine     5b01f7b2f446        3 weeks ago         117MB</span><br><span class="line"></span><br><span class="line">$ docker history 6d3159ba5d64</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">6d3159ba5d64        41 seconds ago      /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> ADD file:1f503d2e5f794e3...   19.5kB</span><br><span class="line">966ac719976a        41 seconds ago      /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  MAINTAINER yuzhang &lt;158...   0B</span><br><span class="line">5b01f7b2f446        3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["catalina.sh" "run"]    0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  EXPOSE 8080/tcp              0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -e  &amp;&amp; nativeLines="$(catal...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -eux;   apk add --no-cache ...   20.9MB</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_ASC_URLS=htt...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_TGZ_URLS=htt...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_SHA1=d2446c1...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_VERSION=8.0.48    0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_MAJOR=8           0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c set -ex;  for key in $GPG_KEYS;...   124kB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV GPG_KEYS=05AB331109...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c apk add --no-cache gnupg             14.5MB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV LD_LIBRARY_PATH=/us...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_NATIVE_LIBDI...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> WORKDIR /usr/local/tomcat     0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c mkdir -p "$CATALINA_HOME"            0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV PATH=/usr/local/tom...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV CATALINA_HOME=/usr/...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c set -x  &amp;&amp; apk add --no-cache  ...   77.8MB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_ALPINE_VERSION...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_VERSION=8u151       0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV PATH=/usr/local/sbi...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_HOME=/usr/lib/...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c &#123;   echo '#!/bin/sh';   echo 's...   87B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV LANG=C.UTF-8             0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["/bin/sh"]              0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> ADD file:2b00f26f6004576...   4.14MB</span><br></pre></td></tr></table></figure><h4 id="1-4-确保镜像可用"><a href="#1-4-确保镜像可用" class="headerlink" title="1.4 确保镜像可用"></a>1.4 确保镜像可用</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -<span class="selector-tag">p</span> <span class="number">8090</span>:<span class="number">8080</span> --name dockerwar localhost:<span class="number">50001</span>/simple-web:<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap<span class="selector-class">.jar</span>:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.050</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server version:        Apache Tomcat/<span class="number">8.0</span>.<span class="number">48</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server built:          Nov <span class="number">30</span> <span class="number">2017</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">50</span> UTC</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server number:         <span class="number">8.0</span>.<span class="number">48.0</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> OS Name:               Linux</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> OS Version:            <span class="number">4.9</span>.<span class="number">49</span>-moby</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Architecture:          amd64</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Java Home:             /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> JVM Version:           <span class="number">1.8</span>.<span class="number">0</span>_151-b12</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> JVM Vendor:            Oracle Corporation</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> CATALINA_BASE:         /usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> CATALINA_HOME:         /usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.util</span><span class="selector-class">.logging</span><span class="selector-class">.config</span><span class="selector-class">.file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.util</span><span class="selector-class">.logging</span><span class="selector-class">.manager</span>=org<span class="selector-class">.apache</span><span class="selector-class">.juli</span><span class="selector-class">.ClassLoaderLogManager</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djdk<span class="selector-class">.tls</span><span class="selector-class">.ephemeralDHKeySize</span>=<span class="number">2048</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.protocol</span><span class="selector-class">.handler</span><span class="selector-class">.pkgs</span>=org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.webresources</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dignore<span class="selector-class">.endorsed</span><span class="selector-class">.dirs</span>=</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dcatalina.base=/usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dcatalina.home=/usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.io</span><span class="selector-class">.tmpdir</span>=/usr/local/tomcat/temp</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.lifecycleEvent</span> Loaded APR based Apache Tomcat Native library <span class="number">1.2</span>.<span class="number">16</span> using APR version <span class="number">1.6</span>.<span class="number">3</span>.</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.lifecycleEvent</span> APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.058</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.initializeSSL</span> OpenSSL successfully initialized (OpenSSL <span class="number">1.0</span>.<span class="number">2</span>m  <span class="number">2</span> Nov <span class="number">2017</span>)</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.140</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.init</span> Initializing ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.147</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.init</span> Initializing ProtocolHandler [<span class="string">"ajp-apr-8009"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.148</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.Catalina</span><span class="selector-class">.load</span> Initialization processed <span class="keyword">in</span> <span class="number">387</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.165</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardService</span><span class="selector-class">.startInternal</span> Starting service Catalina</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.165</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardEngine</span><span class="selector-class">.startInternal</span> Starting Servlet Engine: Apache Tomcat/<span class="number">8.0</span>.<span class="number">48</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.201</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployWAR</span> Deploying web application archive /usr/local/tomcat/webapps/simple-web-<span class="number">1.0</span>.<span class="number">0</span>.war</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.450</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.jasper</span><span class="selector-class">.servlet</span><span class="selector-class">.TldScanner</span><span class="selector-class">.scanJars</span> At least one JAR was scanned <span class="keyword">for</span> TLDs yet contained no TLDs. Enable debug logging <span class="keyword">for</span> this logger <span class="keyword">for</span> <span class="selector-tag">a</span> complete list of JARs that were scanned but no TLDs were found <span class="keyword">in</span> them. Skipping unneeded JARs during scanning can improve startup <span class="selector-tag">time</span> and JSP compilation <span class="selector-tag">time</span>.</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.478</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployWAR</span> Deployment of web application archive /usr/local/tomcat/webapps/simple-web-<span class="number">1.0</span>.<span class="number">0</span><span class="selector-class">.war</span> has finished <span class="keyword">in</span> <span class="number">277</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.480</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/manager</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.511</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/manager has finished <span class="keyword">in</span> <span class="number">31</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.511</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/examples</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.671</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/examples has finished <span class="keyword">in</span> <span class="number">160</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.672</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/docs</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.683</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/docs has finished <span class="keyword">in</span> <span class="number">11</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.683</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/ROOT</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.709</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/ROOT has finished <span class="keyword">in</span> <span class="number">26</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.709</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/host-manager</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.726</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/host-manager has finished <span class="keyword">in</span> <span class="number">17</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.729</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.start</span> Starting ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.738</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.start</span> Starting ProtocolHandler [<span class="string">"ajp-apr-8009"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.741</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.Catalina</span><span class="selector-class">.start</span> Server startup <span class="keyword">in</span> <span class="number">592</span> ms</span><br></pre></td></tr></table></figure><p>　　浏览器访问<code>http://localhost:8090/simple-web-1.0.0/</code>，可以看到<code>hello world</code>出现。</p><ul><li><p>直接访问<code>http://localhost:8090/</code>，可以看到tomcat的页面，但是密码不确定。<br>可以直接登录到容器中查看<code>/usr/local/tomcat/conf/tomcat-users.xml</code>的配置</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it dockerwar /bin/bash</span><br><span class="line">bash-<span class="number">4.4</span><span class="comment"># ls</span></span><br><span class="line">LICENSE         RELEASE-NOTES   bin             <span class="keyword">include</span>         logs            temp            work</span><br><span class="line">NOTICE          RUNNING.txt     conf            <span class="class"><span class="keyword">lib</span>             <span class="title">native</span>-<span class="title">jni</span>-<span class="title">lib</span>  <span class="title">webapps</span></span></span><br><span class="line">$ docker exec -it dockerwar /bin/bash</span><br><span class="line">bash-<span class="number">4.4</span><span class="comment"># ls</span></span><br><span class="line">LICENSE         RELEASE-NOTES   bin             <span class="keyword">include</span>         logs            temp            work</span><br><span class="line">NOTICE          RUNNING.txt     conf            <span class="class"><span class="keyword">lib</span>             <span class="title">native</span>-<span class="title">jni</span>-<span class="title">lib</span>  <span class="title">webapps</span></span></span><br></pre></td></tr></table></figure></li><li><p>上述应用的二级路由是<code>simple-web-1.0.0</code>，也可以从容器中看出来:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="number">-4.4</span># cd webapps/</span><br><span class="line">bash<span class="number">-4.4</span># ls</span><br><span class="line">ROOT                  docs                  examples              host-manager          manager               simple-web<span class="number">-1.0</span><span class="number">.0</span>      simple-web<span class="number">-1.0</span><span class="number">.0</span>.war</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-上传至nexus-local仓库"><a href="#2-上传至nexus-local仓库" class="headerlink" title="2. 上传至nexus local仓库"></a>2. 上传至nexus local仓库</h3><h4 id="2-1-上传"><a href="#2-1-上传" class="headerlink" title="2.1 上传"></a>2.1 上传</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="string">localhost:</span><span class="number">50001</span>/simple-<span class="string">web:</span><span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="2-2-查看docker-hosted仓库"><a href="#2-2-查看docker-hosted仓库" class="headerlink" title="2.2 查看docker hosted仓库"></a>2.2 查看<a href="http://localhost:32768/#browse/browse:docker-local" target="_blank" rel="noopener">docker hosted</a>仓库</h4><p>　　下图，可看到上传的simple-web应用的docker镜像了：<br>　　<img src="/imgs/nexus-browse-docker-local.png" width="600" height="500"></p><h4 id="2-3-查看docker-group仓库"><a href="#2-3-查看docker-group仓库" class="headerlink" title="2.3 查看docker group仓库"></a>2.3 查看<a href="http://localhost:32768/#browse/browse:docker-group" target="_blank" rel="noopener">docker group</a>仓库</h4><p>　　下图，可看到之前proxy中的上传的tomcat:8.0-jre8-alpine镜像，以及我们自己构建的simple-web应用的docker镜像了：<br>　　<img src="/imgs/nexus-browse-docker-group.png" width="600" height="500"></p><h4 id="2-4-删除本地镜像，从docker-hosted仓库获取镜像"><a href="#2-4-删除本地镜像，从docker-hosted仓库获取镜像" class="headerlink" title="2.4 删除本地镜像，从docker hosted仓库获取镜像"></a>2.4 删除本地镜像，从docker hosted仓库获取镜像</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull localhos<span class="variable">t:50001</span>/simple-we<span class="variable">b:1</span>.<span class="number">0.0</span></span><br><span class="line"><span class="number">1.0</span>.<span class="number">0</span>: Pulling from simple-web</span><br><span class="line"><span class="number">2</span>fdfe1cd78c2: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">82630</span>fd6e5b<span class="variable">a:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">119</span>d364c885d: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">749</span>ddbaec87<span class="variable">a:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">801</span>c4e05625<span class="variable">b:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">08</span>b85d1fac84: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">668</span>b34e85733: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">859329</span>ae45ee: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">46</span>f4c89e382c: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:c99901dc39278d97cf33e9dbe0af9a95d3d6b081884a16c0f9c94649308f0b5c</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> localhos<span class="variable">t:50001</span>/simple-we<span class="variable">b:1</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">localhos<span class="variable">t:50001</span>/simple-web   <span class="number">1.0</span>.<span class="number">0</span>               <span class="number">326</span>e5af13176        <span class="number">6</span> hours ago         <span class="number">117</span>MB</span><br><span class="line">sonatype/nexus3              latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line">localhos<span class="variable">t:50000</span>/tomcat       <span class="number">8.0</span>-jre8-alpine     <span class="number">5</span>b01f7b2f446        <span class="number">3</span> weeks ago         <span class="number">117</span>MB</span><br></pre></td></tr></table></figure><h3 id="3-用shell脚本简化过程"><a href="#3-用shell脚本简化过程" class="headerlink" title="3. 用shell脚本简化过程"></a>3. 用shell脚本简化过程</h3><h4 id="3-1-编写shell脚本"><a href="#3-1-编写shell脚本" class="headerlink" title="3.1 编写shell脚本"></a>3.1 编写shell脚本</h4><p>　　将上述手动过程写在如下shell脚本中，其中包含了：生成war包、准备构建镜像材料、构建镜像、上传镜像、删除本地构建等内容：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_HOSTED_REPO=localhost:50001</span><br><span class="line"></span><br><span class="line">./gradlew clean build</span><br><span class="line"></span><br><span class="line"><span class="keyword">mkdir</span> docker</span><br><span class="line"></span><br><span class="line">cp build/libs/simple-web-1.0.0.war docker/</span><br><span class="line"></span><br><span class="line">cp Dockerfile docker/</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> docker</span><br><span class="line"></span><br><span class="line">docker login -<span class="keyword">u</span> admin -p admin123 <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span></span><br><span class="line"></span><br><span class="line">docker build -t <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0 .</span><br><span class="line"></span><br><span class="line">docker push <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0</span><br><span class="line"></span><br><span class="line">docker rmi <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0</span><br><span class="line"></span><br><span class="line"><span class="keyword">rm</span> -rf docker/</span><br><span class="line"></span><br><span class="line"><span class="keyword">rm</span> -rf build/</span><br></pre></td></tr></table></figure></p><h4 id="3-2-更改执行权限"><a href="#3-2-更改执行权限" class="headerlink" title="3.2 更改执行权限"></a>3.2 更改执行权限</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">777</span> <span class="keyword">go</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="3-3-执行脚本，进行测试"><a href="#3-3-执行脚本，进行测试" class="headerlink" title="3.3 执行脚本，进行测试"></a>3.3 执行脚本，进行测试</h4><p>　　执行脚本之前，可删除本地的程序构建产物、本地的应用程序docker镜像、远程的应用程序docker镜像。然后执行脚本之后，再次查看nexus hosted仓库是否有应用程序的docker镜像。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ./go.sh</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> <span class="number">0</span>s</span><br><span class="line"><span class="number">3</span> actionable <span class="string">tasks:</span> <span class="number">2</span> executed, <span class="number">1</span> up-to-date</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Login Succeeded</span><br><span class="line">Sending build context to Docker daemon  <span class="number">22.53</span>kB</span><br><span class="line">Step <span class="number">1</span><span class="regexp">/3 : FROM localhost:50000/</span><span class="string">tomcat:</span><span class="number">8.0</span>-jre8-alpine</span><br><span class="line"> ---&gt; <span class="number">5</span>b01f7b2f446</span><br><span class="line">Step <span class="number">2</span>/<span class="number">3</span> : MAINTAINER yuzhang &lt;<span class="number">1580074674</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; fdcb287ed111</span><br><span class="line">Step <span class="number">3</span><span class="regexp">/3 : ADD simple-web-1.0.0.war /</span>usr<span class="regexp">/local/</span>tomcat<span class="regexp">/webapps/</span></span><br><span class="line"> ---&gt; <span class="number">29</span>f5f308b416</span><br><span class="line">Successfully built <span class="number">29</span>f5f308b416</span><br><span class="line">Successfully tagged <span class="string">localhost:</span><span class="number">50001</span>/simple-<span class="string">web:</span><span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">The push refers to a repository [<span class="string">localhost:</span><span class="number">50001</span>/simple-web]</span><br><span class="line"><span class="number">8</span><span class="string">ccf53e87baa:</span> Pushed</span><br><span class="line"><span class="number">8</span><span class="string">d6f8df9c63b:</span> Pushed</span><br><span class="line"><span class="string">dab1340429ea:</span> Pushed</span><br><span class="line"><span class="string">dd97dc3a613e:</span> Pushed</span><br><span class="line"><span class="number">63680</span><span class="string">cd47754:</span> Pushed</span><br><span class="line"><span class="string">efe8908e7b83:</span> Pushed</span><br><span class="line"><span class="number">25</span><span class="string">baa3ba1903:</span> Pushed</span><br><span class="line"><span class="number">5</span><span class="string">b1e27e74327:</span> Pushed</span><br><span class="line"><span class="number">04</span><span class="string">a094fe844e:</span> Pushed</span><br><span class="line"><span class="number">1.0</span><span class="number">.0</span>: <span class="string">digest:</span> <span class="string">sha256:</span>a386f1897cade1c13919fb8236d3b9a5f5c9b6ba6122f526bd137a5e1395353e <span class="string">size:</span> <span class="number">2204</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章主要是利用nexus构建了docker相关的仓库（docker proxy、docker hosted、docker hosted仓库）。通过docker proxy仓库代理Docker Hub，从远程下载base image；基于base image构建自己的应用程序镜像；最后将应用程序镜像push到private的docker hosted仓库中。<br>　　根据构建产物构建镜像、上传镜像的过程，可以用一个shell脚本完成，详细可以参考Github代码。<br>　　Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://codeomitted.com/deploy-war-file-to-docker-image/" target="_blank" rel="noopener">Deploy war file to docker image</a></li><li><a href="http://www.sonatype.org/nexus/2017/02/16/using-nexus-3-as-your-repository-part-3-docker-images/" target="_blank" rel="noopener">Using Nexus 3 as Your Repository – Part 3: Docker Images</a></li><li><a href="https://help.sonatype.com/display/NXRM3/Proxy+Repository+for+Docker" target="_blank" rel="noopener">Proxy Repository for Docker</a></li><li><a href="http://jmkhael.io/building-and-publishing-a-docker-image/" target="_blank" rel="noopener">Building and publishing a Docker image</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面两篇文章&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nexus - Sonatype Nexus搭建maven私服&lt;/a&gt;、&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nexus - Gradle打包上传至Sonatype Nexus&lt;/a&gt;都是介绍maven相关的仓库，下载应用程序相关的依赖包，上传应用程序的构建产物。&lt;br&gt;本篇文章将介绍docker相关的仓库，下载docker镜像，上传自己构建的应用程序的docker镜像。&lt;br&gt;方便持续集成时候，能够直接从ci上获取应用程序镜像，进行部署。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Gradle打包上传至Sonatype Nexus</title>
    <link href="http://yoursite.com/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/"/>
    <id>http://yoursite.com/2018/01/08/Nexus-Gradle打包上传至SonatypeNexus/</id>
    <published>2018-01-08T17:48:36.000Z</published>
    <updated>2018-05-27T09:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">前一篇</a>介绍了用nexus搭建一个maven私服，并尝试创建了一个proxy仓库。本篇将主要创建一个hosted仓库，上传gradle生成的构建产物。</p><a id="more"></a><h2 id="二、搭建Nexus-hosted-仓库"><a href="#二、搭建Nexus-hosted-仓库" class="headerlink" title="二、搭建Nexus hosted 仓库"></a>二、搭建Nexus hosted 仓库</h2><h3 id="1-创建单独的blob"><a href="#1-创建单独的blob" class="headerlink" title="1. 创建单独的blob"></a>1. 创建单独的blob</h3><p>　　<img src="/imgs/nexus-create-local-blob.png" width="500" height="250"></p><p>　　完成创建之后，可以在宿主机上看到路径<code>nexus-data/blobs/mvn-local-blob</code>的存在。</p><h3 id="2-创建hosted仓库"><a href="#2-创建hosted仓库" class="headerlink" title="2. 创建hosted仓库"></a>2. 创建hosted仓库</h3><p>　　选择maven2(hosted)的仓库，进行创建：<br>　　<img src="/imgs/nexus-create-maven2-hosted.png" width="500" height="800"></p><p>　　注意选择：</p><ul><li>version policy：Mixed（此处笔者并不进行release和snapshot的区分，所以选择Mixed）</li><li>blob store：刚刚创建的mvn-local-blob</li><li>deployment policy：allow redeploy</li></ul><h2 id="三、配置gradle"><a href="#三、配置gradle" class="headerlink" title="三、配置gradle"></a>三、配置gradle</h2><p>　　在上一篇的基础上，build.gralde里面需要增加：</p><ol><li><p>定义group version，方便下面用到</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="title">'wanzi</span>'</span><br><span class="line"><span class="keyword">version</span> '<span class="number">1.0</span>.<span class="number">0</span>'</span><br></pre></td></tr></table></figure></li><li><p>maven插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></span><br></pre></td></tr></table></figure></li><li><p>uploadArchives的task</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(url: <span class="string">"<span class="subst">$&#123;nexusUrl&#125;</span>/mvn-local/"</span>) &#123;</span><br><span class="line">                authentication(userName: nexusUsername, password: nexusPassword)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pom.<span class="attr">version</span> = <span class="string">"<span class="subst">$&#123;project.version&#125;</span>"</span></span><br><span class="line">            pom.<span class="attr">artifactId</span> = <span class="string">"<span class="subst">$&#123;project.name&#125;</span>"</span></span><br><span class="line">            pom.<span class="attr">groupId</span> = <span class="string">"<span class="subst">$&#123;project.group&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>maven会以<code>groupId:artifactId:packaging:version</code>定位某一个输出物。上述指定了version、artifactId和groupId。packaging为War包。</li><li>注意上述repository配置的为<code>${nexusUrl}/mvn-local/</code>，拼起来就是上述创建的hosted仓库的URL。</li></ul><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><ol><li>执行命令<code>./gradlew uploadArchives</code>上传war包到nexus hosted repo。</li><li>查看nexus上<a href="http://localhost:32768/#browse/browse:mvn-local" target="_blank" rel="noopener">mvn local</a>的hosted仓库，可以看到simple-web-1.0.0.war<img src="/imgs/nexus-browse-simple-web.png" width="300" height="400"></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇利用gralde生成程序构建产物，并在nexus上创建一个hosted仓库，将构建产物打包上传到nexus。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.cnblogs.com/yjmyzz/p/auto-upload-artifact-to-nexus.html" target="_blank" rel="noopener">maven/gradle 打包后自动上传到nexus仓库</a></li><li><a href="https://github.com/sonatype/nexus-book-examples/blob/master/gradle/another-project/build.gradle" target="_blank" rel="noopener">nexus-book-examples</a></li><li><a href="http://timebridge.space/2016/05/21/gradle-advaced-dependency-management/" target="_blank" rel="noopener">Gradle系列七：依赖管理</a></li><li><a href="https://www.cnblogs.com/bigtall/archive/2011/03/23/1993253.html" target="_blank" rel="noopener">maven构建产物介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前一篇&lt;/a&gt;介绍了用nexus搭建一个maven私服，并尝试创建了一个proxy仓库。本篇将主要创建一个hosted仓库，上传gradle生成的构建产物。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Sonatype Nexus搭建maven私服</title>
    <link href="http://yoursite.com/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/"/>
    <id>http://yoursite.com/2018/01/07/Nexus-SonatypeNexus搭建maven私服/</id>
    <published>2018-01-07T16:02:13.000Z</published>
    <updated>2018-05-27T09:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="http://zhangyuyu.github.io/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">上一篇</a>里面介绍了Sonatype Nexus的基础知识，本篇文章将搭建一个maven私服，从里面获取应用程序需要的jar依赖。<br><a id="more"></a></p><h2 id="二、搭建Nexus"><a href="#二、搭建Nexus" class="headerlink" title="二、搭建Nexus"></a>二、搭建Nexus</h2><p>　　笔者电脑是是Mac pro。</p><h3 id="1-安装Docker-for-Mac"><a href="#1-安装Docker-for-Mac" class="headerlink" title="1. 安装Docker for Mac"></a>1. 安装Docker for Mac</h3><p>　　参考<a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">https://store.docker.com/editions/community/docker-ce-desktop-mac</a></p><h3 id="2-安装Kitematic"><a href="#2-安装Kitematic" class="headerlink" title="2. 安装Kitematic"></a>2. 安装Kitematic</h3><p>　　直接点击Docker for mac，选择Kitematic即可下载安装。<br><img src="/imgs/nexus-install-kitematic.png" width="200" height="400"></p><h3 id="3-创建nexus容器"><a href="#3-创建nexus容器" class="headerlink" title="3. 创建nexus容器"></a>3. 创建nexus容器</h3><p>　　在Kitematic上搜索nexus，选择nexus3，点击create，即可下载镜像，创建容器。</p><h4 id="3-1-docker-image"><a href="#3-1-docker-image" class="headerlink" title="3.1 docker image"></a>3.1 docker image</h4><p>　　宿主机上docker image的存放地址：<br>　　<code>$HOME/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux</code></p><h4 id="3-2-docker-container"><a href="#3-2-docker-container" class="headerlink" title="3.2 docker container"></a>3.2 docker container</h4><p>　　配置端口号如下：<br><img src="/imgs/nexus-container-configure.png" width="500" height="300"></p><h4 id="4-访问nexus"><a href="#4-访问nexus" class="headerlink" title="4. 访问nexus"></a>4. 访问nexus</h4><p>　　访问 <a href="http://localhost:32768/" target="_blank" rel="noopener">http://localhost:32768/</a> ，登录用户名<code>admin</code>，密码<code>admin123</code>。</p><h4 id="5-配置proxy仓库"><a href="#5-配置proxy仓库" class="headerlink" title="5. 配置proxy仓库"></a>5. 配置proxy仓库</h4><p>　　点击<code>Server Adminstration And configuration</code>，进入<a href="http://localhost:32768/#admin/repository/repositories" target="_blank" rel="noopener">配置页面</a>；选择repositories，并选择<a href="http://localhost:32768/#admin/repository/repositories:maven-central" target="_blank" rel="noopener">maven-central</a>。</p><p>默认配置如下：<br><img src="/imgs/nexus-repostories-maven-center.png" width="500" height="1000"></p><p>　　如果没有改代理仓库，可自己创建一个maven central的代理仓库，并配置如上图。</p><h2 id="三、搭建web应用"><a href="#三、搭建web应用" class="headerlink" title="三、搭建web应用"></a>三、搭建web应用</h2><p>目录结构如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── codetutr</span><br><span class="line">        │           └── HelloWorldServlet.java</span><br><span class="line">        └── webapp</span><br><span class="line">            └── WEB-INF</span><br><span class="line">                └── web.xml</span><br></pre></td></tr></table></figure></p><h3 id="1-gradle文件"><a href="#1-gradle文件" class="headerlink" title="1. gradle文件"></a>1. gradle文件</h3><p>build.gradle<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apply</span> plugin: <span class="string">'war'</span></span><br><span class="line">apply plugin: <span class="string">'idea'</span></span><br><span class="line">apply plugin: <span class="string">'org.akhikhl.gretty'</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">  <span class="section">repositories</span> &#123;</span><br><span class="line">    <span class="section">maven</span> &#123;</span><br><span class="line">      <span class="attribute">url</span> <span class="string">"<span class="variable">$&#123;nexusUrl&#125;</span>/maven-central/"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    <span class="attribute">classpath</span> <span class="string">'org.akhikhl.gretty:gretty:2.0.0'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  <span class="section">maven</span> &#123;</span><br><span class="line">    <span class="attribute">url</span> <span class="string">"<span class="variable">$&#123;nexusUrl&#125;</span>/maven-central/"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">   <span class="attribute">providedCompile</span> <span class="string">'javax.servlet:servlet-api:2.5'</span></span><br><span class="line">   runtime <span class="string">'javax.servlet:jstl:1.1.2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gretty &#123;</span><br><span class="line">  <span class="attribute">httpPort</span> = <span class="number">8090</span></span><br><span class="line">  contextPath = <span class="string">'/simple-web'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task wrapper(type : Wrapper) &#123;</span><br><span class="line">  <span class="attribute">gradleVersion</span> = <span class="string">'4.4.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：build.gralde文件中<code>${nexusUrl}</code>，后面跟上的是<code>maven-central/</code>，两者拼起来就是上述搭建nexus时候maven central的URL。</p><h3 id="2-gralde配置文件"><a href="#2-gralde配置文件" class="headerlink" title="2. gralde配置文件"></a>2. gralde配置文件</h3><p>gradle.properties<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nexusUrl</span>=http://localhost:<span class="number">32768</span>/repository/</span><br><span class="line"><span class="attr">nexusUsername</span>=admin</span><br><span class="line"><span class="attr">nexusPassword</span>=admin123</span><br></pre></td></tr></table></figure></p><p>将nexusUrl设置为上述搭建Nexus时候，maven central的URL的前缀。</p><h3 id="3-HelloWorldServlet文件"><a href="#3-HelloWorldServlet文件" class="headerlink" title="3. HelloWorldServlet文件"></a>3. HelloWorldServlet文件</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codetutr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getOutputStream().write(<span class="string">"Hello, World."</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-web-xml文件"><a href="#4-web-xml文件" class="headerlink" title="4. web.xml文件"></a>4. web.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codetutr.HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><p>　　.gradlew相关的文件是运行<code>gradle wrapper</code>创建的。</p><h3 id="1-从nexus上下载相应依赖jar文件"><a href="#1-从nexus上下载相应依赖jar文件" class="headerlink" title="1. 从nexus上下载相应依赖jar文件"></a>1. 从nexus上下载相应依赖jar文件</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./gradlew clean build</span><br><span class="line">Download <span class="symbol">http:</span>/<span class="regexp">/localhost:32768/repository</span><span class="regexp">/maven-central/org</span><span class="regexp">/akhikhl/gretty</span><span class="regexp">/gretty/</span><span class="number">1.4</span>.<span class="number">1</span>/gretty-<span class="number">1.4</span>.<span class="number">1</span>.pom</span><br><span class="line">...</span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> <span class="number">37</span>s</span><br><span class="line"><span class="number">3</span> actionable <span class="symbol">tasks:</span> <span class="number">3</span> executed</span><br></pre></td></tr></table></figure><h3 id="2-查看依赖jar文件"><a href="#2-查看依赖jar文件" class="headerlink" title="2. 查看依赖jar文件"></a>2. 查看依赖jar文件</h3><p>　　相关的依赖包的获取顺序为：<br>　　<code>remote maven central -&gt; nexus私服的nexus data -&gt; 本地宿主机的~/.gradle</code></p><h4 id="2-1-nexus缓存jar文件"><a href="#2-1-nexus缓存jar文件" class="headerlink" title="2.1 nexus缓存jar文件"></a>2.1 nexus缓存jar文件</h4><ul><li><p>在 <a href="http://localhost:32768/#browse/browse:maven-central" target="_blank" rel="noopener">http://localhost:32768/#browse/browse:maven-central</a> 可以看到：</p><img src="/imgs/nexus-jar-files.png" width="500" height="250"></li><li><p>关闭电脑的网络，手动点击右侧的path，可以下载jar文件</p><img src="/imgs/nexus-jar-path.png" width="300" height="500"></li><li><p>手动删除宿主机上nexus-data/blob/default/content的内容，再次下载时候，会报错502。</p></li></ul><h4 id="2-2-gradle缓存jar文件"><a href="#2-2-gradle缓存jar文件" class="headerlink" title="2.2 gradle缓存jar文件"></a>2.2 gradle缓存jar文件</h4><ul><li><p>查看本地.gradle缓存如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.gradle/caches</span><br><span class="line">$ ls -al</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x <span class="number"> 6 </span>yuzhang  staff  <span class="number"> 204 </span>Jan <span class="number"> 7 </span>17:25 .</span><br><span class="line">drwxr-xr-x <span class="number"> 8 </span>yuzhang  staff  <span class="number"> 272 </span>Jan <span class="number"> 7 </span>15:26 ..</span><br><span class="line">-rw-r--r--@<span class="number"> 1 </span>yuzhang  staff <span class="number"> 6148 </span>Jan <span class="number"> 7 </span>17:26 .DS_Store</span><br><span class="line">drwxr-xr-x <span class="number"> 6 </span>yuzhang  staff  <span class="number"> 204 </span>Jan <span class="number"> 7 </span>15:37 4.4.1</span><br><span class="line">drwxr-xr-x <span class="number"> 5 </span>yuzhang  staff  <span class="number"> 170 </span>Jan <span class="number"> 7 </span>17:25 modules-2</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>yuzhang  staff  <span class="number"> 102 </span>Jan <span class="number"> 7 </span>17:25 transforms-1</span><br></pre></td></tr></table></figure></li><li><p>断开网络，删除.gralde/cache里面的<code>modules-2</code>和<code>transforms-1</code>，再次运行<code>./gradlew clean build</code>，可以看到应用依然可以获取到jar文件，而且速度很快。</p></li></ul><h3 id="3-运行web应用"><a href="#3-运行web应用" class="headerlink" title="3. 运行web应用"></a>3. 运行web应用</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew appRun</span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO  Jetty <span class="number">9.2</span><span class="number">.22</span>.v20170606 started <span class="keyword">and</span> listening <span class="keyword">on</span> <span class="title">port</span> <span class="title">8090</span></span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO  simple-web runs <span class="keyword">at</span>:</span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO    <span class="keyword">http</span>://localhost:<span class="number">8090</span>/simple-web</span><br><span class="line"></span><br><span class="line">&gt; Task :appRun</span><br><span class="line">Press <span class="keyword">any</span> key <span class="built_in">to</span> <span class="built_in">stop</span> <span class="keyword">the</span> server.</span><br><span class="line">&lt;===========<span class="comment">--&gt; 87% EXECUTING [15s]</span></span><br><span class="line">&gt; :appRun</span><br><span class="line">&gt; IDLE</span><br></pre></td></tr></table></figure><h3 id="4-浏览器查看"><a href="#4-浏览器查看" class="headerlink" title="4. 浏览器查看"></a>4. 浏览器查看</h3><p>　　<code>http://localhost:8090/simple-web/</code> ,可以看到<code>Hello, World.</code>出现。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇将nexus作为maven私服，使本地的gradle web应用直接从nexus获取相关依赖，从而避免网络断开造成应用不可访问。<br>　　<a href="http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/" target="_blank" rel="noopener">下一篇</a>基于本篇工程的基础上，会用gradle生成程序构建产物，打包上传到nexus。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://codetutr.com/2013/03/23/simple-gradle-web-application/" target="_blank" rel="noopener">Simple Gradle Web Application</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;里面介绍了Sonatype Nexus的基础知识，本篇文章将搭建一个maven私服，从里面获取应用程序需要的jar依赖。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Sonatype Nexus入门</title>
    <link href="http://yoursite.com/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/01/06/Nexus-SonatypeNexus入门/</id>
    <published>2018-01-06T17:08:15.000Z</published>
    <updated>2018-05-27T09:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　最近在组建公司内部的Devops Community，按照一整套的项目故事线列出了Devops knowledge Library。其中涉及到基础知识、云平台、持续集成、产出物管理、开发流程和工具、容器编排、配置管理、监控管理、日志管理、HA等。<br>　　为了尽快的搭建内部人员的知识体系，按照上述流程，我们利用最常见的工具，构想了一个简单的流水线，每个人负责流水线的一部分，然后顺序串到一起，进行输出。<br>　　这里，我主要负责利用Nexus进行仓库的管理，本篇主要讲述nexus的一些基础，<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">下一篇</a>将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。</p><a id="more"></a><h2 id="二、Nexus"><a href="#二、Nexus" class="headerlink" title="二、Nexus"></a>二、Nexus</h2><p>　　Nexus是谷歌手机的一个牌子，我们要介绍的不是Nexus，而是Sonatype Nexus。<br>　　Sonatype Nexus是Sonatype公司的一个产品，叫Nexus，它是Maven的私服。<br>　　<img src="/imgs/nexus-maven仓库.png" width="500" height="200"></p><p>　　事实上有三种专门的Maven仓库管理软件可以帮助我们创建私服：</p><ul><li><a href="http://archiva.apache.org/index.cgi" target="_blank" rel="noopener">Apache Archiva</a></li><li><a href="https://link.jianshu.com/?t=http://www.jfrog.com/home/v_artifactory_opensource_overview/" target="_blank" rel="noopener"> Artifactory</a></li><li><a href="http://www.sonatype.org/nexus/" target="_blank" rel="noopener">Sonatype Nexus</a>。 </li></ul><p>　　其中Archiva是开源的，Artifactory和Nexus的核心也是开源的。详细的对比可参考<a href="https://binary-repositories-comparison.github.io/" target="_blank" rel="noopener">Binary Repository Manager Feature Matrix</a>。Nexus是目前最常用的一个。</p><h2 id="三、私服"><a href="#三、私服" class="headerlink" title="三、私服"></a>三、私服</h2><p>　　私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构建。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p><img src="/imgs/nexus-私服.png" width="800" height="350"><h2 id="四、Why-Nexus"><a href="#四、Why-Nexus" class="headerlink" title="四、Why Nexus?"></a>四、Why Nexus?</h2><ol><li><p>节省外网带宽<br>　　大量对于外部仓库的重复请求会消耗带宽，利用私服代理外部仓库，可以消除对外的重复构件下载，降低带宽的压力。</p></li><li><p>加速Maven构建<br>　　不停地连接请求外部仓库十分的耗时，Maven在执行构建的时候不停地检查远程仓库的数据。利用私服，Maven只检查局域网的数据，提高构建的速度。</p></li><li><p>部署第三方构件<br>　　当某个构件无法从任何一个外部远程仓库获得。建立私服之后，便可以将这些构件部署到私服，供内部的Maven项目使用。</p></li><li><p>提高稳定性，增强控制<br>　　Maven构建高度依赖于远程仓库，因此，当网络不稳定的时候，Maven构建也会变得不稳定，甚至无法构建。私服缓存了大量构建，即使暂时没有网络，Maven也可以正常的运行。</p></li><li><p>降低中央仓库的负荷<br>　　使用私服可以避免很多对中央仓库的重复下载，降低中央仓库的压力。</p></li></ol><h2 id="五、Docker搭建"><a href="#五、Docker搭建" class="headerlink" title="五、Docker搭建"></a>五、Docker搭建</h2><p>　　安装过程，网上有很多资料，这里不再赘述。笔者是MAC Pro，安装了Docker for Mac，因此很容易Kitematic进行容器的安装。<br><img src="/imgs/nexus-kitematic-container.png" width="800" height="500"></p><h3 id="1-安装目录"><a href="#1-安装目录" class="headerlink" title="1. 安装目录"></a>1. 安装目录</h3><p>下面是nexus的一些环境变量：<br><img src="/imgs/nexus-环境变量.png" width="800" height="800"></p><p>nexus-container中：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2$ whoami</span><br><span class="line">nexus</span><br><span class="line">sh-4.2$ pwd</span><br><span class="line">/opt/sonatype/nexus</span><br><span class="line">sh-4.2$ ls -l</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>root root<span class="number"> 39222 </span>Dec<span class="number"> 27 </span>16:00 LICENSE.txt</span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 395 </span>Dec<span class="number"> 27 </span>16:00 NOTICE.txt</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 bin</span><br><span class="line">drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 deploy</span><br><span class="line">drwxr-xr-x <span class="number"> 7 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 etc</span><br><span class="line">drwxr-xr-x <span class="number"> 4 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 lib</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 public</span><br><span class="line">drwxr-xr-x<span class="number"> 21 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 system</span><br></pre></td></tr></table></figure></p><ul><li>LICENSE.txt和NOTICE.txt，包含有关许可证和版权声明的法律细节；</li><li>bin，包含启动脚本以及启动相关的配置文件</li><li>etc，包含配置文件</li><li>lib，包含与Apache Karaf相关的二进制库</li><li>public，包含应用相关的公共资源</li><li>system，包含构成应用程序相关的所有组件和插件</li></ul><h3 id="2-数据目录"><a href="#2-数据目录" class="headerlink" title="2. 数据目录"></a>2. 数据目录</h3><p>nexus-container中：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">cd</span> ~</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">pwd</span></span><br><span class="line">/opt/sonatype/nexus</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">ls</span> ../</span><br><span class="line">nexus  sonatype-work  start-nexus-repository-manager.<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">cd</span> ../sonatype-work/nexus3/</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">ls</span></span><br><span class="line">backup  blobs  cache  <span class="keyword">db</span>  elasticsearch  etc  generated-bundles  health-check  instances  javaprefs  keystores  lock  <span class="keyword">log</span>  orient  port  tmp</span><br><span class="line"><span class="keyword">sh</span>-4.2$</span><br></pre></td></tr></table></figure></p><p>上述地址<code>/opt/sonatype/sonatype-work/nexus3</code>或者<code>/nexus-data</code>中，则是数据存放的地址了。</p><ul><li>blobs/，这是blob存储的默认地址，可在UI上的Server Adminstration And configuration进行配置。</li><li>cache/，包含当前缓存的Karaf bundles信息。</li><li>db/，包含OrientDB数据库，数据库存的是Nexus respository manager的元数据。</li><li>elasticsearch，包含当前配置的Elasticsearch状态</li><li>etc/，包含主要的运行时配置和自定义的Nexus respository manager配置。</li><li>health-check/，包含来自 Repository Health Check功能的缓存 报告</li><li>keystores/，包含用于鉴别Nexus respository manager的自动生成的密钥。</li><li>log/，nexus.log文件包含Nexus respository manager运行实例的信息；该目录也包含一些日志文件的归档副本；日志滚动（Log rotation）每天进行。</li><li>tmp/，用于临时存储。</li></ul><h2 id="六、功能介绍"><a href="#六、功能介绍" class="headerlink" title="六、功能介绍"></a>六、功能介绍</h2><h3 id="1-Browse-Server-Content"><a href="#1-Browse-Server-Content" class="headerlink" title="1. Browse Server Content"></a>1. Browse Server Content</h3><img src="/imgs/nexus-功能-browse-server-content.png" width="800" height="250"><h4 id="1-1-Search"><a href="#1-1-Search" class="headerlink" title="1.1 Search"></a>1.1 Search</h4><p>　　搜索功能，就是从私服上查找是否有哪些包:</p><ul><li>在Search这级是支持模糊搜索的</li><li>如果进入具体的目录，不支持模糊搜索</li></ul><h4 id="1-2-Browse"><a href="#1-2-Browse" class="headerlink" title="1.2 Browse"></a>1.2 Browse</h4><ul><li>Assets，能看到所有的资源，包含Jar，已经对Jar的一些描述信息。</li><li>Components，只能看到Jar</li></ul><h3 id="2-Server-Adminstration-And-configuration"><a href="#2-Server-Adminstration-And-configuration" class="headerlink" title="2. Server Adminstration And configuration"></a>2. Server Adminstration And configuration</h3><p>　　看到这选项是要进行登录的，在右上角点击“Sign In”的登录按钮，输入<code>admin/admin123</code>,登录成功之后，即可看到此功能，如图所示：<br><img src="/imgs/nexus-功能-server-adminstration-configuration.png" width="800" height="300"></p><h4 id="2-1-Repository"><a href="#2-1-Repository" class="headerlink" title="2.1 Repository"></a>2.1 Repository</h4><ul><li>Blob Stores, 文件存储的地方，创建一个目录的话，对应文件系统的一个目录</li><li>Repositories，仓库</li></ul><h5 id="2-1-1-仓库类型"><a href="#2-1-1-仓库类型" class="headerlink" title="2.1.1 仓库类型"></a>2.1.1 仓库类型</h5><ul><li>hosted<br>　　宿主仓库，用户可以把自己的一些构件，deploy到hosted中，也可以手工上传构件到hosted里。比如说oracle的驱动程序，ojdbc6.jar，在central repository是获取不到的，就需要手工上传到hosted里 </li><li>proxy<br>　　远程仓库的代理。比如说在nexus中配置了一个central repository的proxy，当用户向这个proxy请求一个artifact，这个proxy就会先在本地查找，如果找不到的话，就会从远程仓库下载，然后返回给用户，相当于起到一个中转的作用 </li><li>group<br>　　仓库组，在maven里没有这个概念，是nexus特有的。目的是将上述多个仓库聚合，对用户暴露统一的地址，这样用户就不需要在pom中配置多个地址，只要统一配置group的地址就可以了 </li><li>virtual<br>　　虚拟类型仓库，此类型主要是为了兼容maven的版本，maven版本经过大幅度提升，虚拟类型仓库主要是为了兼容maven1</li></ul><h5 id="2-1-2-仓库格式"><a href="#2-1-2-仓库格式" class="headerlink" title="2.1.2 仓库格式"></a>2.1.2 仓库格式</h5><p><a href="https://help.sonatype.com/display/NXRM3/Supported+Formats" target="_blank" rel="noopener">最新Nexus支持的仓库格式</a>如下：</p><table><thead><tr><th>Format</th><th>2.x</th><th>3.x</th></tr></thead><tbody><tr><td>Bower</td><td>❌</td><td>✅ 3.0+</td></tr><tr><td>Docker</td><td>❌</td><td>✅ 3.0+</td></tr><tr><td>git-lfs</td><td>❌</td><td>✅ 3.3+ (只支持hosted)</td></tr><tr><td>Maven 1</td><td>✅</td><td>❌</td></tr><tr><td>Maven 2</td><td>✅</td><td>✅ 3.1+</td></tr><tr><td>npm</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>NuGet</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>OBR</td><td>✅</td><td>❌</td></tr><tr><td>P2</td><td>✅</td><td>❌</td></tr><tr><td>PyPI</td><td>❌</td><td>✅ 3.0.2+</td></tr><tr><td>RubyGems</td><td>✅</td><td>✅ 3.0.2+</td></tr><tr><td>Site/Raw</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>Yum</td><td>✅</td><td>❌ (在3.5+ 支持Proxy)</td></tr></tbody></table><h5 id="2-1-3-仓库策略"><a href="#2-1-3-仓库策略" class="headerlink" title="2.1.3 仓库策略"></a>2.1.3 仓库策略</h5><ul><li>releases，发布版，稳定版的jar</li><li>snapshots，快照版，一般是处于开发中的jar</li><li>mixed，混合的</li></ul><h5 id="2-1-4-预定义本地仓库"><a href="#2-1-4-预定义本地仓库" class="headerlink" title="2.1.4 预定义本地仓库"></a>2.1.4 预定义本地仓库</h5><img src="/imgs/nexus-功能-repositories.png" width="800" height="300"><h4 id="2-2-Security"><a href="#2-2-Security" class="headerlink" title="2.2 Security"></a>2.2 Security</h4><p>主要是用户、角色、权限的配置</p><h4 id="2-3-Support"><a href="#2-3-Support" class="headerlink" title="2.3 Support"></a>2.3 Support</h4><p>包含日志及数据分析</p><h4 id="2-4-System"><a href="#2-4-System" class="headerlink" title="2.4 System"></a>2.4 System</h4><p>主要是邮件服务器，调度的设置地方</p><h2 id="七、实现原理"><a href="#七、实现原理" class="headerlink" title="七、实现原理"></a>七、实现原理</h2><p>　　Nexus Repository是以Java和JavaScript为主，实现的一个包含前端与后台的Web服务。 后台方面，它采用Jetty作为应用服务器、Karaf作为OSGi容器、OrientDB作为数据库。 前端方面，它使用Swagger UI作为框架，是一个单页面Web App。</p><p>　　另外，它也通过Resteasy支持REST API，可以通过网络进行访问控制。并且，自行实现了一个插件系统，用插件的方式支持了更多复杂的功能。比如，Maven、PyPI、Docker这些支持，都是由插件实现的。 如果希望支持其它方式的代理、缓存、发布，比如APT，也可以通过插件定制。</p><h2 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h2><p>　　本篇主要讲述了Nexus的概念及好处，介绍了nexus涉及到的安装目录以及数据目录，简单的列举了一下Nexus repository manager UI上的功能。<br>　　<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">下一篇</a> 将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.csdn.net/gaoying_blogs/article/details/48917847" target="_blank" rel="noopener">【项目管理】Sonatype Nexus,Maven私服</a></li><li><a href="http://juvenshun.iteye.com/blog/285059" target="_blank" rel="noopener">使用仓库管理器——Sonatype Nexus的九大理由</a></li><li><a href="http://juvenshun.iteye.com/blog/349534" target="_blank" rel="noopener">Nexus入门指南（图文）</a></li><li><a href="http://www.tinygroup.org/docs/d0e8e7273742486ab59f161785e07a66" target="_blank" rel="noopener">Tiny Nexus3.0.0+Maven的使用</a></li><li><a href="https://books.sonatype.com/nexus-book/3.5/reference/install.html#data-directory" target="_blank" rel="noopener">Reference nexus-book</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　最近在组建公司内部的Devops Community，按照一整套的项目故事线列出了Devops knowledge Library。其中涉及到基础知识、云平台、持续集成、产出物管理、开发流程和工具、容器编排、配置管理、监控管理、日志管理、HA等。&lt;br&gt;　　为了尽快的搭建内部人员的知识体系，按照上述流程，我们利用最常见的工具，构想了一个简单的流水线，每个人负责流水线的一部分，然后顺序串到一起，进行输出。&lt;br&gt;　　这里，我主要负责利用Nexus进行仓库的管理，本篇主要讲述nexus的一些基础，&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下一篇&lt;/a&gt;将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Mongo-记一次安装启动异常</title>
    <link href="http://yoursite.com/2017/12/27/Mongo-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2017/12/27/Mongo-记一次安装启动错误/</id>
    <published>2017-12-27T10:35:21.000Z</published>
    <updated>2017-12-27T09:47:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>　　笔者最近换了电脑，从MacBook Pro 13”换成了MacBook Pro 15”，相关的工具软件全部得重新装。<br>再重新装Mongo的时候遇到了一些问题，特此记录。</p><h2 id="二、安装异常"><a href="#二、安装异常" class="headerlink" title="二、安装异常"></a>二、安装异常</h2><h3 id="1-错误描述"><a href="#1-错误描述" class="headerlink" title="1. 错误描述"></a>1. 错误描述</h3><a id="more"></a><p>　　用<code>brew install mongodb</code>安装了最新的mongodb(3.6)之后，启动本地的java spring boot应用，报错如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">com.mongodb.MongoCommandException</span>: Command failed with error 9: 'The 'cursor' option is required, except for aggregate with the explain argument' on server localhost:27017. The full response is &#123; "ok" : 0.0, "errmsg" : "The 'cursor' option is required, except for aggregate with the explain argument", "code" : 9, "codeName" : "FailedToParse" &#125;</span><br><span class="line"></span><br><span class="line">        at com.mongodb.CommandResult.getException(CommandResult.java:80)</span><br><span class="line"></span><br><span class="line">        at com.mongodb.CommandResult.throwOnError(CommandResult.java:94)</span><br><span class="line"></span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.handleCommandError(MongoTemplate.java:2097)</span><br><span class="line"></span><br><span class="line">        ... 119 common frames omitted</span><br></pre></td></tr></table></figure><h3 id="2-错误原因"><a href="#2-错误原因" class="headerlink" title="2. 错误原因"></a>2. 错误原因</h3><p>　　MongoDB 3.6的Document，对于aggregation cursor的描述如下:</p><blockquote><pre><code>Specify a document that contains options that control the creation of the cursor object.</code></pre></blockquote><pre><code>Changed in version 3.6: MongoDB 3.6 removes the use of aggregate command without the cursoroption unless the command includes the explain option. Unless you include the explain option,you must specify the cursor option.</code></pre><blockquote></blockquote><pre><code>To indicate a cursor with the default batch size, specify cursor: {}.</code></pre><blockquote></blockquote><pre><code>To indicate a cursor with a non-default batch size, use cursor: { batchSize: &lt;num&gt; }.</code></pre><p>　　MongoDB在3.6里面改变了aggregation指令的工作方式，现在aggregation需要cursor了。</p><h3 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h3><p>　　对本地的mongodb降级。</p><h4 id="1）先用brew-search查看支持的mongo版本"><a href="#1）先用brew-search查看支持的mongo版本" class="headerlink" title="1）先用brew search查看支持的mongo版本"></a>1）先用brew search查看支持的mongo版本</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ brew search mongo</span><br><span class="line">=<span class="ruby">=&gt; Searching local taps...</span></span><br><span class="line"><span class="ruby">mongodb@3.<span class="number">4</span> ✔                          mongo-cxx-driver                       mongodb                                mongodb@3.<span class="number">2</span>                            percona-server-mongodb</span></span><br><span class="line"><span class="ruby">mongo-c-driver                         mongo-orchestration                    mongodb@3.<span class="number">0</span>                            mongoose</span></span><br><span class="line"><span class="ruby">==&gt; Searching taps on GitHub...</span></span><br><span class="line"><span class="ruby">caskroom/cask/mongo-management-studio  homebrew/php/php53-mongo               homebrew/php/php54-mongo               homebrew/php/php55-mongo               homebrew/php/php56-mongo</span></span><br><span class="line"><span class="ruby">==&gt; Searching blacklisted, migrated <span class="keyword">and</span> deleted formulae...</span></span><br></pre></td></tr></table></figure><h4 id="2）再brew安装mongodb-3-4"><a href="#2）再brew安装mongodb-3-4" class="headerlink" title="2）再brew安装mongodb 3.4"></a>2）再brew安装mongodb 3.4</h4><p><code>brew install mongodb@3.4</code></p><h2 id="三、启动异常"><a href="#三、启动异常" class="headerlink" title="三、启动异常"></a>三、启动异常</h2><h3 id="1-错误描述-1"><a href="#1-错误描述-1" class="headerlink" title="1. 错误描述"></a>1. 错误描述</h3><p>　　安装完成mongodb3.4之后，mongo服务启动异常。</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v3.<span class="number">4.10</span></span><br><span class="line">connecting <span class="keyword">to</span>: mongodb://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">27</span>T11:<span class="number">13</span>:<span class="number">37.713</span>+<span class="number">0800</span> W NETWORK  [thread1] Failed <span class="keyword">to</span> connect <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>, <span class="keyword">in</span>(checking socket <span class="keyword">for</span> <span class="literal">error</span> <span class="keyword">after</span> poll), reason: Connection refused</span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">27</span>T11:<span class="number">13</span>:<span class="number">37.715</span>+<span class="number">0800</span> E QUERY    [thread1] <span class="literal">Error</span>: couldn<span class="symbol">'t</span> connect <span class="keyword">to</span> server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>, connection attempt failed :</span><br><span class="line">connect@src/mongo/shell/mongo.js:<span class="number">237</span>:<span class="number">13</span></span><br><span class="line">@(connect):<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">exception: connect failed</span><br></pre></td></tr></table></figure><h3 id="2-错误原因-1"><a href="#2-错误原因-1" class="headerlink" title="2. 错误原因"></a>2. 错误原因</h3><p>　　mongodb的服务没有启动。</p><h3 id="3-解决办法-1"><a href="#3-解决办法-1" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h3><h4 id="探索过程："><a href="#探索过程：" class="headerlink" title="探索过程："></a>探索过程：</h4><h5 id="1）用brew-services启动mongo不work"><a href="#1）用brew-services启动mongo不work" class="headerlink" title="1）用brew services启动mongo不work"></a>1）用brew services启动mongo不work</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start mongodb@3.4</span><br><span class="line">==&gt; Successfully started `mongodb@3.4` (label: homebrew.mxcl.mongodb@3.4)</span><br><span class="line">$ brew services list</span><br><span class="line">Name        Status <span class="built_in"> User </span>   Plist</span><br><span class="line">mongodb@3.4 started yuzhang /Users/yuzhang/Library/LaunchAgents/homebrew.mxcl.mongodb@3.4.plist</span><br></pre></td></tr></table></figure><p>　　上述操作之后，似乎mongo已经启动了，但是问题依旧复现，可能是brew services不再有人维护的原因（<a href="https://github.com/Homebrew/legacy-homebrew/issues/32006" target="_blank" rel="noopener">brew services is unsupported and will be removed soon</a>）。</p><h5 id="2）用mongod启动mongo报错"><a href="#2）用mongod启动mongo报错" class="headerlink" title="2）用mongod启动mongo报错"></a>2）用mongod启动mongo报错</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mongod</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.980<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8655 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to flush diaglog...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] now exiting</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure><p>　　上述错误信息里，明确指出<code>/data/db not found</code>，因此是在启动的时候没有找到db的地址。为了确认是这个问题，尝试使用如下指令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongo -nodb</span></span><br></pre></td></tr></table></figure><p>　　然后，发现可以直接进入mongo了。</p><h5 id="3）创建-data-db"><a href="#3）创建-data-db" class="headerlink" title="3）创建/data/db"></a>3）创建/data/db</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> -<span class="selector-tag">p</span> /data/db</span><br></pre></td></tr></table></figure><p>　　再次启动mongodb:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.679<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8510 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 20 Attempted to create a lock file on a read-only directory: /data/db, terminating</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to flush diaglog...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I CONTROL  [initandlisten] now exiting</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure><p>　　可以看出是对<code>/data/db</code>没有权限。</p><h5 id="4）用sudo执行mongod"><a href="#4）用sudo执行mongod" class="headerlink" title="4）用sudo执行mongod"></a>4）用sudo执行mongod</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mongod</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8521 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.170<span class="string">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'wiredTiger' storage engine, so setting the active storage engine to 'wiredTiger'.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.170<span class="string">+0800</span> I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=7680M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten]</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten]</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.822<span class="string">+0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.823<span class="string">+0800</span> I NETWORK  [thread1] waiting for connections on port 27017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52959 #1 (1 connection now open)</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52960 #2 (2 connections now open)</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52961 #3 (3 connections now open)</span><br></pre></td></tr></table></figure><h4 id="解决方法小结"><a href="#解决方法小结" class="headerlink" title="解决方法小结"></a>解决方法小结</h4><ol><li>创建<code>/data/db</code>，因为mongodb默认的db地址是<code>/data/db</code></li><li>用sudo执行mongod</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/db</span></span><br><span class="line"><span class="title">sudo</span> mongod</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol><li>问题1是新版本3.6的mongodb做了一些改动造成的不兼容</li><li>问题2是brew services不再维护造成的启动异常</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/29630399/mongo-connection-refused-osx" target="_blank" rel="noopener">Stackoverflow - Mongo connection refused osx</a></li><li><a href="https://stackoverflow.com/questions/23439343/cannot-connect-to-mongodb-errno61" target="_blank" rel="noopener">Stackoverflow - Cannot connect to MongoDB errno:61</a></li><li><a href="http://hcysun.me/2015/11/21/Mac下使用brew安装mongodb/" target="_blank" rel="noopener">Mac下使用brew安装mongodb</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;　　笔者最近换了电脑，从MacBook Pro 13”换成了MacBook Pro 15”，相关的工具软件全部得重新装。&lt;br&gt;再重新装Mongo的时候遇到了一些问题，特此记录。&lt;/p&gt;
&lt;h2 id=&quot;二、安装异常&quot;&gt;&lt;a href=&quot;#二、安装异常&quot; class=&quot;headerlink&quot; title=&quot;二、安装异常&quot;&gt;&lt;/a&gt;二、安装异常&lt;/h2&gt;&lt;h3 id=&quot;1-错误描述&quot;&gt;&lt;a href=&quot;#1-错误描述&quot; class=&quot;headerlink&quot; title=&quot;1. 错误描述&quot;&gt;&lt;/a&gt;1. 错误描述&lt;/h3&gt;
    
    </summary>
    
      <category term="Mongo" scheme="http://yoursite.com/categories/Mongo/"/>
    
    
      <category term="Mongo" scheme="http://yoursite.com/tags/Mongo/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL - 索引概述</title>
    <link href="http://yoursite.com/2017/12/26/MYSQL-%E7%B4%A2%E5%BC%95%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2017/12/26/MYSQL-索引概述/</id>
    <published>2017-12-26T14:23:35.000Z</published>
    <updated>2018-01-26T10:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　每次项目上遇到MYSQL性能优化的点，涉及到索引的时候，我都会或多或少、零零散散地查一些相关的资料，解决当时的难题。<br>　　这些知识点，既不系统、也不能完全确保正确无误，于是把以前从书里面《数据库系统实现》、《收获，不止SQL优化》看到的有关于SQL索引的知识点，进行整理如下。<br>　　这篇文章不会对具体优化的tips进行介绍，主要是从概念上介绍索引，以及其结构与原理，至于使用技巧则会另外找时间写一篇文章记录。</p><h2 id="二、什么是索引"><a href="#二、什么是索引" class="headerlink" title="二、什么是索引"></a>二、什么是索引</h2><p>　　索引是为了加速对表中数据行的检索而创建的一种分散的存储结构。数据库索引好比是一本书前面的目录，能加快数据库的查询速度。</p><p>索引是这样的一种数据结构：<br>它以一个或多个字段的值为输入，并能“快速地”找出具有该值得记录。<br><img src="/imgs/mysql-index-definition.jpg" width="400" height="250"></p><p>　　我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。最基本的查询算法当然是顺序查找（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如二分查找（binary search）、二叉树查找（binary tree search）等。<br>　　如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构（例如，理论上不可能同时将两列都按顺序进行组织），所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引的本质。</p><h2 id="三、索引的优缺点"><a href="#三、索引的优缺点" class="headerlink" title="三、索引的优缺点"></a>三、索引的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ul><li>通过创建唯一索引，能够在索引和信息之间形成一对一的映射式的对应关系，增加数据的唯一性特点。</li><li>能提高数据的搜索及检索速度，符合数据库建立的初衷。</li><li>能够加快表与表之间的连接速度，提高数据的参考完整性。</li><li>在使用分组及排序子句进行时，能有效的减少检索过程中所需的分组及排序时间，提高检索效率。</li><li>在信息查询过程中可以使用优化隐藏器，提高整个信息检索系统的性能。</li></ul><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h3><ul><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度。</li></ul><h2 id="四、索引的分类"><a href="#四、索引的分类" class="headerlink" title="四、索引的分类"></a>四、索引的分类</h2><p>　　MYSQL支持多种搜索引擎，每种引擎支持的索引类型不一样，这里只是从大而全的方面进行分类，不涉及到具体的搜索引擎。</p><h3 id="1-从数据结构上"><a href="#1-从数据结构上" class="headerlink" title="1. 从数据结构上"></a>1. 从数据结构上</h3><ul><li>B+Tree</li><li>HASH索引</li><li>R-Tree索引（空间索引）</li><li>FULLTEXT索引</li></ul><h3 id="2-从物理存储上"><a href="#2-从物理存储上" class="headerlink" title="2. 从物理存储上"></a>2. 从物理存储上</h3><ul><li>聚集索引（主索引）</li><li>非聚集索引（辅助索引）<br>数据库表行中数据的物理顺序与键值的逻辑（索引）顺序相同，则为聚集索引；反之，则为非聚集索引。</li></ul><h3 id="3-从逻辑角度上"><a href="#3-从逻辑角度上" class="headerlink" title="3. 从逻辑角度上"></a>3. 从逻辑角度上</h3><ul><li>普通索引（单列索引）</li><li>复合索引（多列索引）</li><li>主键索引</li><li>唯一索引</li></ul><h3 id="4-从保存方式上"><a href="#4-从保存方式上" class="headerlink" title="4. 从保存方式上"></a>4. 从保存方式上</h3><ul><li>顺序索引</li><li>散列索引<br>顺序索引，是基于值的顺序排列；散列索引，是基于将值平均分布到若干散列桶中，一个值所属的散列桶是由一个散列函数决定的。</li></ul><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><ul><li>稀疏索引</li><li>稠密索引<br>稠密索引中文件中的每个搜索码值都对应一个索引值；稀疏索引中，只为索引码的某些值建立索引项。二者皆为聚集索引。</li></ul><p>　　非聚集索引（辅助索引）总是稠密索引。谈论一个稀疏索引的辅助索引是无意义的，因为辅助索引不影响记录的存储位置，我们也就不能根据它来预测键值不在索引中显示指明的任何记录的位置。</p><h2 id="五、索引的结构及原理"><a href="#五、索引的结构及原理" class="headerlink" title="五、索引的结构及原理"></a>五、索引的结构及原理</h2><p>下文并没有按照上述的分类进行介绍，而是按照一定的顺序，通过多级索引引出常用的B+树索引，通过辅助索引中的间接引出散列索引。</p><h3 id="1-顺序文件"><a href="#1-顺序文件" class="headerlink" title="1. 顺序文件"></a>1. 顺序文件</h3><p>　　顺序文件是一种简单的文件组织，其产生方式是将数据文件按照某个排序键排序，并在该文件上建立索引。</p><h3 id="2-稠密索引"><a href="#2-稠密索引" class="headerlink" title="2. 稠密索引"></a>2. 稠密索引</h3><p>　　稠密文件为数据文件的每个记录设一个键-指针对。<br>　　<img src="/imgs/mysql-index-dense.png" width="400" height="300"></p><h3 id="3-稀疏索引"><a href="#3-稀疏索引" class="headerlink" title="3. 稀疏索引"></a>3. 稀疏索引</h3><p>　　稀疏索引职位数据文件的每个存储块设一个键-指针对，它比稠密索引节省了更多的存储空间，但查找给定的记录需要更多的时间。<br>只有当数据文件是按照某个查找键排序时，在该查找键上建立的稀疏索引才能被使用，而稠密索引则可应用在任何的查找键。<br>　　<img src="/imgs/mysql-index-sparse.png" width="400" height="300"></p><h3 id="4-多级索引"><a href="#4-多级索引" class="headerlink" title="4. 多级索引"></a>4. 多级索引</h3><p>　　索引文件可能占据多个存储块，即便我们能定位索引存储块，并且能够使用二分法找到所需索引项，我们仍可能需要执行多次I/O操作才能获取所需记录。<br>通过在索引上再建索引，我们能够使第一级索引的使用更有效。二级或者更高级的索引必须是稀疏的，因为一个索引上的稠密索引将需要和其前一级索引同样多的键-指针对，即同样的存储空间。<br>然而，这种做法有它的局限，与其建立多级索引，我们宁愿考虑下文中的<strong>B-树</strong>。</p><p>　　<img src="/imgs/mysql-index-multi-level.png" width="600" height="300"></p><h3 id="5-非聚集索引（辅助索引）"><a href="#5-非聚集索引（辅助索引）" class="headerlink" title="5. 非聚集索引（辅助索引）"></a>5. 非聚集索引（辅助索引）</h3><p>　　非聚集索引并不决定数据文件中记录的存放位置。<br><img src="/imgs/mysql-index-non-cluster.png" width="400" height="300"></p><h3 id="6-非聚集索引（辅助索引）中的间接"><a href="#6-非聚集索引（辅助索引）中的间接" class="headerlink" title="6. 非聚集索引（辅助索引）中的间接"></a>6. 非聚集索引（辅助索引）中的间接</h3><p>　　上图所示结构存在空间浪费，假如某个索引值键在数据文件中出现n次，那么这个键值在索引文件中就要写n次，好的做法是只为指向该键值的所有指针存储一次键值。</p><p>　　避免键值重复的一种简便方法是使用一个称为桶（Bucket）的间接层。</p><img src="/imgs/mysql-index-non-cluster-bucket.png" width="600" height="300"><p>　　此外，该间接层还有另外一个好处，我们可以在不访问数据文件的前提下，利用桶的指针帮助回答一些查询。比如，查询多个条件时，若每个条件都有一个可用的辅助索引，我们可以再主存中将指针集合求交来找到满足所有条件的指针，然后只需要访问检索交集指针所指向为记录，节省了I/O开销。</p><p>　　为了构造间接层，我们可以通过构造一个散列函数，也即是下文的<strong>散列索引</strong>。</p><h2 id="六、B树索引"><a href="#六、B树索引" class="headerlink" title="六、B树索引"></a>六、B树索引</h2><p>　　在讲述B树之前，我们思考下几个问题：</p><ul><li>数据库索引为什么使用树存储结构呢？<br>　　本文开头大致说明了索引的本质，由此我们知道原因是因为树的查询效率较高。</li><li>我们为什么不直接使用二叉树查询呢？<br>　　上文提到二叉树数据本身的组织结构不可能完全满足各种数据，其次是因为二叉树索引树的高度较大，最坏情况下读取磁盘IO次数较多。</li></ul><p>那么为了减少磁盘IO，我们可以把原本“瘦高”的树结构变得“矮胖”，这就是B树的特征之一。</p><h3 id="1-B-树"><a href="#1-B-树" class="headerlink" title="1. B-树"></a>1. B-树</h3><p>B-树，即B树，不能读成“B减树”。<br><img src="/imgs/mysql-index-B-Tree.jpg" width="400" height="250"></p><h3 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2. B+树"></a>2. B+树</h3><img src="/imgs/mysql-index-B+Tree.jpg" width="400" height="250"><h2 id="七、散列索引"><a href="#七、散列索引" class="headerlink" title="七、散列索引"></a>七、散列索引</h2><h2 id="八、索引的使用技巧"><a href="#八、索引的使用技巧" class="headerlink" title="八、索引的使用技巧"></a>八、索引的使用技巧</h2><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.csdn.net/wuxing26jiayou/article/details/76596174" target="_blank" rel="noopener">MYSQL索引分类</a></li><li><a href="http://xiebh.iteye.com/blog/216932" target="_blank" rel="noopener">讲解MySQL索引的概念及数据库索引的应用</a></li><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="http://blog.jobbole.com/100349/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">如果有人问你数据库的原理，叫他看这篇文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　每次项目上遇到MYSQL性能优化的点，涉及到索引的时候，我都会或多或少、零零散散地查一些相关的资料，解决当时的难题。&lt;b
      
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker Workshop（九）Docker日志、监控、Dashboard</title>
    <link href="http://yoursite.com/2017/12/04/Docker-Workshop-9-Docker%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7Dashboard/"/>
    <id>http://yoursite.com/2017/12/04/Docker-Workshop-9-Docker日志监控Dashboard/</id>
    <published>2017-12-04T13:12:36.000Z</published>
    <updated>2018-05-27T09:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="https://www.bagevent.com/event/828605" target="_blank" rel="noopener">《Docker in Production》 workshop</a>于2017年9月23在ThoughtWorks武汉举办，之后，有懒癌的笔者就“忘记“去接着更新这一系列了。<br>直到上次上线（OTR Diaochan Release）出现了一些问题，在寻找问题过程中，docker的日志、监控、Dashboard这一主题发挥了很重要的作用，才想起来该好好整理下这一篇文章。</p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　该系列《Docker in Prodcution》内容包含如下部分：</p><ul><li><a href="http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">容器简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Docker简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Docker的基本操作</a></li><li><a href="http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">Docker数据存储</a></li><li><a href="http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">Docker网络</a></li><li><a href="http://zhangyuyu.github.io/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">Docker安全</a></li><li>多主机部署</li><li>服务发现</li><li><strong>日志、监控、Dashboard</strong></li></ul><h2 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h2><a id="more"></a><h3 id="1-传统日志处理"><a href="#1-传统日志处理" class="headerlink" title="1. 传统日志处理"></a>1. 传统日志处理</h3><p>传统的日志处理，是将日志写到本机磁盘上，通常仅用于排查线上问题，很少用于数据分析。<br>等需要时，再登录到机器上，用grep、awk等工具分析。那么，这种方式有什么缺点呢？</p><ul><li><p>1.它的效率非常低，因为每一次要排查问题的时候都要登到机器上去，当有几十台或者是上百台机器的时候，每一台机器去登陆这是一个没办法接受的事情，可能一台机器浪费两分钟，整个几小时就过去了。</p></li><li><p>2.如果要进行一些比较复杂的分析，像grep、awk两个简单的命令不能够满足需求时，就需要运行一些比较复杂的程序进行分析。</p></li><li><p>3.日志本身它的价值不光在于排查一些系统问题上面，可能在一些数据的分析上，可能利用日志来做一些用户的决策，这也是它的价值，如果不能把它利用起来，价值就不能充分的发挥出来。</p></li></ul><h3 id="2-docker日志处理"><a href="#2-docker日志处理" class="headerlink" title="2. docker日志处理"></a>2. docker日志处理</h3><blockquote class="blockquote-center"><p>Docker daemon与Docker container的联系：<br>　　一个docker的container就是一个特殊的进程，它是由docker daemon创建并启动。<br>因此container是docker daemon的子进程，由docker daemon守护和管理。</p></blockquote><p>与Docker相关的日志主要有两部分：</p><ul><li><p>Docker Daemon日志，即Docker自身运行产生的日志。</p></li><li><p>Docker Container日志，即Docker容器应用产生的日志。容器日志的两种输出形式:</p><ul><li>stdout、stderr 标准输出</li><li>日志文件记录</li></ul></li></ul><img src="/imgs/docker-log-driver.png" width="400" height="250"><p>　　标准输出日志，其原理在于，当在启动进程的时候，进程之间有一个父子关系，父进程可以拿到子进程的标准输出。拿到子进程标准输出的后，父进程可以对标准输出做所有希望的处理。</p><p>　　日志文件记录，在Docker 1.6以前，Docker仅仅是从容器中采集stdout和stderr，然后用JSON进行简单的封装并存储到磁盘。Docker 1.6以后，引入了日志驱动(Log Drivers) 。<br>LogDriver就是Docker用来处理容器标准输出的一个模块，Docker支持很多种不同的处理方式，如下表所示：</p><table><thead><tr><th style="text-align:center">Driver</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">none</td><td style="text-align:center">丢弃容器输出，docker logs命令也看不到任何内容</td></tr><tr><td style="text-align:center">json-file</td><td style="text-align:center">默认驱动，使用json文件保存日志</td></tr><tr><td style="text-align:center">syslog</td><td style="text-align:center">将日志写入syslog里，syslog必须在机器上启动</td></tr><tr><td style="text-align:center">journald</td><td style="text-align:center">将日志发送到journald（systemd）,journald必须在机器上启动</td></tr><tr><td style="text-align:center">gelf</td><td style="text-align:center">将日志发送到GELF端点，如Graylog或Logstash</td></tr><tr><td style="text-align:center">fluentd</td><td style="text-align:center">将日志发送给fluentd，fluentd必须在机器上启动</td></tr><tr><td style="text-align:center">awslogs</td><td style="text-align:center">将日志发送给Amazon Cloudwatch</td></tr><tr><td style="text-align:center">splunk</td><td style="text-align:center">将日志发送到splunk</td></tr><tr><td style="text-align:center">etwlogs</td><td style="text-align:center">将日志发送给Event Tracing for Windows。仅在windows平台可用</td></tr><tr><td style="text-align:center">gcplogs</td><td style="text-align:center">将日志发送给Google日志系统</td></tr><tr><td style="text-align:center">nats</td><td style="text-align:center">将日志发送给NATS服务</td></tr></tbody></table><p><a href="https://docs.docker.com/engine/reference/commandline/logs/#parent-command" target="_blank" rel="noopener">目前</a>，只有json-file和journald可以通过<code>docker logs</code>和<code>docker-compose logs</code>显示日志，其他方式有其他日志查看方式。</p><h3 id="3-集中式日志聚合"><a href="#3-集中式日志聚合" class="headerlink" title="3. 集中式日志聚合"></a>3. 集中式日志聚合</h3><p>　　当系统中的节点增加到多个节点，管理和访问日志会变得复杂。如果没有合适的工具，要从上百个节点上的上百个日志文件中搜索出错误日志会变得很困难。常见解决思路是建立集中式日志收集系统(Centralized Logging)，将所有节点上的日志统一收集，管理，访问。</p><p>集中式日志聚合有两种思路：</p><ul><li>在所有的容器里运行一个辅助进程，该进程充当agent并将日志发到我们的聚合service里。</li><li>在主机上或者是在一个单独的容器里，收集日志并转发到聚合service里。</li></ul><p>第一种方式经常用到，但是它可能会让镜像变大，并且必要地增加了运行的进程数量：</p><ul><li>1.因为每个容器都有一个日志的进程，意味着你的机器上面有100个容器，就需要启动一百个日志设备的程序，资源的浪费非常厉害。</li><li>2.在做镜像的时候，需要把容器里面日志采集程序做到镜像里面去，对你的镜像其实是有入侵的，为了日志采集，不得不把自己的日志程序再做个新镜像，然后把东西放进去，所以对你的镜像过程是有入侵性的。</li><li>3.当一个容器里面好多个进程的时候，对于容器的资源管理，会干扰你对容器的资源使用的判断，包括对于在做资源分配和监控的时候，都会有一些这样的干扰。</li></ul><p>目前最流行的日志聚合解决方案是ELK（Logstash、Elasticsearch、Kibana）：<br><img src="/imgs/docker-log-elk.png" width="800" height="400"></p><ul><li>Shipper - logstash forward是一个Shipper，用来放到各个主机中收集指定位置的日志，将收集到日志发送到 Logstash。</li><li>Logstash - Logstash用来收集、过滤、转发日志。</li><li>Elasticsearch - Elasticsearch是一个基于Lucene的、支持全文索引的分布式存储和索引引擎，主要负责将日志索引并存储起来，方便业务方检索查询。</li><li>Kibana 是一个可视化工具，主要负责查询数据并以可视化的方式展现给业务方，比如各类饼图、直方图、区域图等。</li></ul><h3 id="4-Out-of-scope"><a href="#4-Out-of-scope" class="headerlink" title="4. Out of scope"></a>4. Out of scope</h3><p>　　那么，我们怎么样去收集日志、存储日志，用什么样的系统，日志的源头和写日志我们又该怎么来做，有这样几个建议：</p><ol><li>选择合适的日志框架，不要直接print</li><li>为每一条日志选择正确的level，该debug的不要用info；</li><li>附加更多的上下文信息；</li><li>使用json、csv等日志格式，方便工具解析；</li><li>尽量不要使用多行日志(Java Exception Stack)。</li></ol><h2 id="四、监控"><a href="#四、监控" class="headerlink" title="四、监控"></a>四、监控</h2><h3 id="1-为什么进行日志监控？"><a href="#1-为什么进行日志监控？" class="headerlink" title="1. 为什么进行日志监控？"></a>1. 为什么进行日志监控？</h3><ul><li>提前地，可以在用户致电报错之前，了解问题。</li><li>问题上，可以获得相关信息，并进行分析解决。</li><li>潜在地，可以在潜在问题造成影响之前，发现可疑活动。</li><li>技术上，可以建立一个周期性的性能基线，获取各项指标。</li><li>业务上，可以利用日志文件的数据进行战略和战术决策。</li></ul><h3 id="2-监控对象与指标"><a href="#2-监控对象与指标" class="headerlink" title="2. 监控对象与指标"></a>2. 监控对象与指标</h3><ul><li><p>硬件监控</p><ul><li>CPU温度</li><li>物理磁盘</li><li>虚拟磁盘</li><li>主板温度</li><li>磁盘阵列</li></ul></li><li><p>系统监控</p><ul><li>CPU</li><li>磁盘（吞吐量、读写次数）</li><li>内存（使用量、剩余量）</li><li>网络</li><li>进程</li></ul></li><li><p>应用监控</p><ul><li>应用程序</li><li>数据库</li></ul></li><li><p>网络监控</p><ul><li>响应时间</li><li>可用率</li></ul></li><li><p>流量分析</p><ul><li>访客分析</li><li>来源分析</li><li>页面分析</li></ul></li><li><p><strong>日志监控</strong></p><ul><li>访问日志</li><li>错误日志</li><li>运行日志</li><li>网络日志</li></ul></li><li><p>安全监控</p><ul><li>SQL注入</li><li>跨站脚本</li><li>代码执行漏洞</li><li>扫码探测</li></ul></li><li><p>API监控</p><ul><li>可用性</li><li>正确性</li><li>响应性</li></ul></li><li><p>性能监控</p><ul><li>DNS响应时间</li><li>HTTP建立连接时间</li><li>页面性能指数</li><li>响应时间</li><li>可用率</li></ul></li><li><p>业务监控</p><ul><li>每分钟产生多少订单</li><li>每分钟注册多少用户</li><li>每天有多少活跃用户</li><li>每天有多少推广活动</li><li>推广活动引入多少用户</li><li>推广活动引入多少流量</li></ul></li></ul><h3 id="3-监控流程"><a href="#3-监控流程" class="headerlink" title="3. 监控流程"></a>3. 监控流程</h3><ul><li>数据采集</li><li>数据存储</li><li>数据分析</li><li>数据展示</li><li>监控报警</li><li>报警处理</li></ul><h2 id="五、Dashboard"><a href="#五、Dashboard" class="headerlink" title="五、Dashboard"></a>五、Dashboard</h2><h3 id="1-为什么要仪表盘？"><a href="#1-为什么要仪表盘？" class="headerlink" title="1. 为什么要仪表盘？"></a>1. 为什么要仪表盘？</h3><ul><li>数据可视化（度量信息，关键业务指标）</li><li>交互式界面（从多个数据源获取数据，并定制化交互式界面）</li><li>提升用户体验（清晰地传达关键信息给用户，信息能够快速被理解）</li></ul><h3 id="2-可视化哪些信息？"><a href="#2-可视化哪些信息？" class="headerlink" title="2. 可视化哪些信息？"></a>2. 可视化哪些信息？</h3><ul><li>应用的健康状况</li><li>错误统计和走势</li><li>资源利用率和走势</li><li>全部生产力</li><li>部署次数，版本，响应时间, 等等.</li><li>业务指标</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　关于日志、监控、可视化，虽然有很多工具可以帮我们实现，比如监控上的Prometheus、AppDynamic，比如ELK的一整套解决方案，但是了解背后的本质与为什么是尤为重要的。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://yq.aliyun.com/articles/72700" target="_blank" rel="noopener">Docker日志收集最佳实践</a></li><li><a href="http://dockone.io/article/2644" target="_blank" rel="noopener">Docker日志的5个最佳实践</a></li><li><a href="http://dockone.io/article/2252" target="_blank" rel="noopener">使用ELK处理Docker日志(一)</a></li><li><a href="http://blog.cloud66.com/9-crtitical-decisions-needed-to-run-docker-in-production/" target="_blank" rel="noopener">9 Critical Decisions for Running Docker in Production</a></li><li><a href="http://blog.scalyr.com/2017/08/five-reasons-need-log-monitoring/" target="_blank" rel="noopener">Five Reasons You Need Log Monitoring</a></li><li><a href="https://www.jianshu.com/p/a4e55b10f5f4" target="_blank" rel="noopener">一篇文章全面了解监控知识体系</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;https://www.bagevent.com/event/828605&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Docker in Production》 workshop&lt;/a&gt;于2017年9月23在ThoughtWorks武汉举办，之后，有懒癌的笔者就“忘记“去接着更新这一系列了。&lt;br&gt;直到上次上线（OTR Diaochan Release）出现了一些问题，在寻找问题过程中，docker的日志、监控、Dashboard这一主题发挥了很重要的作用，才想起来该好好整理下这一篇文章。&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　该系列《Docker in Prodcution》内容包含如下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;容器简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker的基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker数据存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;多主机部署&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志、监控、Dashboard&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、日志&quot;&gt;&lt;a href=&quot;#三、日志&quot; class=&quot;headerlink&quot; title=&quot;三、日志&quot;&gt;&lt;/a&gt;三、日志&lt;/h2&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>餐巾纸的背面（三）拓展创意</title>
    <link href="http://yoursite.com/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%B8%89%EF%BC%89%E6%8B%93%E5%B1%95%E5%88%9B%E6%84%8F/"/>
    <id>http://yoursite.com/2017/12/02/餐巾纸的背面（三）拓展创意/</id>
    <published>2017-12-02T14:26:07.000Z</published>
    <updated>2017-12-27T07:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面一<a href="http://zhangyuyu.github.io/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%91%E7%8E%B0%E5%88%9B%E6%84%8F/" target="_blank" rel="noopener">餐巾纸的背面（二）发现创意</a>对视觉化思考的四个步骤进行了详解，介绍了SQVID和六六法则。<br>　　原书《餐巾纸的背面》第三部分【拓展创意】是结合MBA的案例，对视觉化思考的六种方式进行实操演练，本文就不再赘述，有兴趣的读者可以自己参考。<br>　　在本文中，主要是看书过后的一些思考与对手绘视觉化的拓展，可能与《餐巾纸的背面》一书没太多强关联了，偏重点在于手绘导图的方式方法。</p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　当我们将脑海中想象出来的内容进行视觉化时候，有两种选择：软件绘制和手绘导图，机视觉笔记的两种载体。<br>　　软件绘制，可以借助很多工具进行精确、精美的绘制，如Microsoft办公软件系列，Google办公软件系列、WPS、Xmind等等；手绘导图，凭借自己的一双手、随时随地就可以开始作画。<br>　　虽然《餐巾纸的背面》一书中多次提到，我们有三个天生的视觉性工具————肉眼、内心的眼睛、手眼合作，拿起笔开始画图并不难。但是笔者还是会各种纠结到底如何画才好，有没有一些常见版式参考，或者小的tips。<br>　　带着这个问题，发现【视觉笔记】、【涂鸦笔记】这样的字眼频繁出现，而且与【视觉化思考】的实践联系颇多，故而，以此整理总结。</p><h2 id="三、视觉笔记的要素"><a href="#三、视觉笔记的要素" class="headerlink" title="三、视觉笔记的要素"></a>三、视觉笔记的要素</h2><a id="more"></a><p>　　我们常见的前端网页，主要由html + css + javascript组成，用一扇门比喻三者间的关系，html是门的门板，css是门上的油漆或花纹，javascript是门的开关。换言之，其中几个要素则是结构与内容、样式、效果。<br>　　那么，同理可得：<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">一幅视觉笔记 </span>=<span class="string"> 结构 + 内容 + 样式 + 效果 。</span></span><br></pre></td></tr></table></figure></p><ul><li>在结构上，涉及的是版式。</li><li>在内容上，主要是由图和文字构成，那么涉及到的就是图形元素、文字等。</li><li>在样式上，涉及的是配色。</li><li>在效果上，涉及的是组合之后表达的信息。</li></ul><p>因此，视觉笔记的几大要素：结构版式、图形元素、文字、配色。</p><h2 id="四、结构版式"><a href="#四、结构版式" class="headerlink" title="四、结构版式"></a>四、结构版式</h2><p>视觉笔记的结构版式有如下7种：</p><ul><li>线型</li><li>放射型</li><li>垂直型</li><li>路径型</li><li>模块型</li><li>摩天大楼型</li><li>爆米花型</li></ul><img src="/imgs/餐巾纸的背面-扩展创意-视觉笔记排版.jpg" width="800" height="450"><p align="center"> （图片来自<a href="http://www.jianshu.com/p/668c90a7e5a7" target="_blank" rel="noopener">视觉笔记与手帐</a>）</p><h3 id="1-线型"><a href="#1-线型" class="headerlink" title="1. 线型"></a>1. 线型</h3><p>从上到下，从左到右<br>优点：人们比较习惯的模式、可以记录多页、便于阅读<br>缺点：信息流向上死板，布局有制约。</p><p>【示例：线型】<br><img src="/imgs/餐巾纸的背面-扩展创意-线型.jpg" width="500" height="200"></p><h3 id="2-放射型"><a href="#2-放射型" class="headerlink" title="2. 放射型"></a>2. 放射型</h3><p>由一个主题发散出去，分为对称型和不对称型<br>优点：添加内容灵活<br>缺点：对于某些读者，由于排列非线形，阅读会比较困难。</p><p>【示例：放射型】<br><img src="/imgs/餐巾纸的背面-扩展创意-放射型.jpg" width="800" height="450"></p><h3 id="3-垂直型"><a href="#3-垂直型" class="headerlink" title="3. 垂直型"></a>3. 垂直型</h3><p>从顶部至底部（只有一页）<br>优点：便于阅读<br>缺点：制约布局，长度受纸的制约</p><p>【示例：垂直型】<br><img src="/imgs/餐巾纸的背面-扩展创意-垂直型.jpg" width="500" height="600"></p><h3 id="4-路径型"><a href="#4-路径型" class="headerlink" title="4. 路径型"></a>4. 路径型</h3><p>路径可以是Z、C、W等任何想到的形状。<br>适用于：时间上的先后、故事的发展、逻辑上的因果<br>缺点：需要规划，如果需要记录的内容超出预期，会空间不够。</p><p>【示例：路径型】<br><img src="/imgs/餐巾纸的背面-扩展创意-路径型.jpg" width="800" height="450"></p><h3 id="5-模块型"><a href="#5-模块型" class="headerlink" title="5. 模块型"></a>5. 模块型</h3><p>将页面分为不同区域，分别放置不同信息。<br>优点：可以在有限空间内记录很多展示信息。<br>缺点：限制了信息数量，需要预先规划。</p><p>【示例：模块型】<br><img src="/imgs/餐巾纸的背面-扩展创意-模块型.jpg" width="800" height="450"></p><h3 id="6-摩天大楼型"><a href="#6-摩天大楼型" class="headerlink" title="6. 摩天大楼型"></a>6. 摩天大楼型</h3><p>特殊的模块型。<br>适用于：圆桌讨论，多人在不同时间发言。<br>缺点：同模块型。</p><p>【示例：摩天大楼型】<br><img src="/imgs/餐巾纸的背面-扩展创意-摩天大楼型.jpg" width="800" height="450"></p><h3 id="7-爆米花型"><a href="#7-爆米花型" class="headerlink" title="7. 爆米花型"></a>7. 爆米花型</h3><p>将标题和信息放在页面任意位置的版式。<br>优点：极其灵活。使人专注于获取信息，而不在意位置<br>缺点：信息摆放无序，难于理解。</p><p>【示例：爆米花型】<br><img src="/imgs/餐巾纸的背面-扩展创意-爆米花型.jpg" width="800" height="450"></p><h3 id="五、图形元素"><a href="#五、图形元素" class="headerlink" title="五、图形元素"></a>五、图形元素</h3><p>常用的5种视觉元素：人物、小图标、箭头、对话框、图框。</p><h4 id="1-人物"><a href="#1-人物" class="headerlink" title="1. 人物"></a>1. 人物</h4><p>人物的画法大致可以分为如下几种：</p><ul><li>火柴人</li><li>进阶火柴人</li><li>星形人</li><li>格雷法</li><li>others(自定义形式)</li></ul><img src="/imgs/餐巾纸的背面-扩展创意-人物的画法.jpg" width="800" height="450"><h5 id="火柴人"><a href="#火柴人" class="headerlink" title="火柴人"></a>火柴人</h5><img src="/imgs/餐巾纸的背面-扩展创意-火柴人.jpg" width="600" height="150"><h5 id="进阶火柴人"><a href="#进阶火柴人" class="headerlink" title="进阶火柴人"></a>进阶火柴人</h5><img src="/imgs/餐巾纸的背面-扩展创意-进阶火柴人.jpg" width="600" height="150"><p>【示例】<br><img src="/imgs/餐巾纸的背面-扩展创意-进阶火柴人示例.jpg" width="600" height="150"></p><h5 id="星形人"><a href="#星形人" class="headerlink" title="星形人"></a>星形人</h5><img src="/imgs/餐巾纸的背面-扩展创意-星形人.jpg" width="600" height="150"><h5 id="格雷法"><a href="#格雷法" class="headerlink" title="格雷法"></a>格雷法</h5><img src="/imgs/餐巾纸的背面-扩展创意-格雷法.jpg" width="600" height="150"><p>【示例】<br><img src="/imgs/餐巾纸的背面-扩展创意-格雷法示例.jpg" width="400" height="150"></p><h5 id="others"><a href="#others" class="headerlink" title="others"></a>others</h5><img src="/imgs/餐巾纸的背面-扩展创意-others.jpg" width="600" height="150"><h4 id="2-箭头"><a href="#2-箭头" class="headerlink" title="2. 箭头"></a>2. 箭头</h4><img src="/imgs/餐巾纸的背面-扩展创意-箭头.jpg" width="600" height="150"><h4 id="3-对话框"><a href="#3-对话框" class="headerlink" title="3. 对话框"></a>3. 对话框</h4><img src="/imgs/餐巾纸的背面-扩展创意-对话框.jpg" width="600" height="150"><h4 id="4-图框"><a href="#4-图框" class="headerlink" title="4. 图框"></a>4. 图框</h4><img src="/imgs/餐巾纸的背面-扩展创意-图框.jpg" width="600" height="150"><h4 id="5-小图标"><a href="#5-小图标" class="headerlink" title="5. 小图标"></a>5. 小图标</h4><p>小图标有很多种，这个很容易在网上就可以搜索到，文章末尾reference里面提供了几个icon的链接。<br>限于篇幅，下面只列举一些比较好画的。</p><p>【示例：项目符号】<br><img src="/imgs/餐巾纸的背面-扩展创意-项目符号.jpg" width="600" height="150"></p><p>【示例：建筑】<br><img src="/imgs/餐巾纸的背面-扩展创意-建筑.jpg" width="600" height="150"></p><p>【示例：树木】<br><img src="/imgs/餐巾纸的背面-扩展创意-树木.jpg" width="600" height="150"></p><h3 id="六、字体"><a href="#六、字体" class="headerlink" title="六、字体"></a>六、字体</h3><p>主要是风格、大小、间距、粗细、大小写、组合对比，要点在于让人一眼望去，层次分明。</p><p>【示例：字体的风格】<br>字体有很多种风格，不同的在线资源分类方法也都不一样，下面只是随便截图了一段：<br><img src="/imgs/餐巾纸的背面-扩展创意-字体风格.jpg" width="600" height="150"></p><h3 id="七、配色"><a href="#七、配色" class="headerlink" title="七、配色"></a>七、配色</h3><ol><li><p>正文字体最好不要超过三种颜色，颜色太多显得杂乱，不要选择饱和度太高的颜色，就是鲜艳的颜色，太亮眼了，尽量用温和一些的深色系，如深灰或者黑色。</p></li><li><p>用一种颜色作为主色调，可以用在标题、重点内容、二维码、头像、顶部和底部的引导等。</p></li><li><p>金句或者突出的地方用黑色加粗，或者深色系的颜色即可。</p></li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://goo.gl/r3UQr" target="_blank" rel="noopener">The Sketchnote Handbook</a></li><li><a href="http://sunnibrown.com/doodlerevolution/" target="_blank" rel="noopener">Doodle Revolution</a></li><li><a href="http://sketchnotearmy.com/sketchnoters/" target="_blank" rel="noopener">视觉笔记博客集锦</a></li><li><a href="https://thenounproject.com/" target="_blank" rel="noopener">Icons for everything</a></li><li><a href="http://iconfont.cn/" target="_blank" rel="noopener">Iconfont</a></li><li><a href="https://www.autodraw.com/" target="_blank" rel="noopener">Autodraw</a></li><li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">Flaticon</a></li><li><a href="https://mp.weixin.qq.com/s/XqjA5Wwn7ql6rKOlyuLn-w" target="_blank" rel="noopener">从绘画小白到手绘达人</a></li><li><a href="http://www.jianshu.com/p/bf2d287b4a4a?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">干货｜任何人都能做出好看的视觉笔记</a></li><li><a href="http://www.jianshu.com/p/2dc6fea6a20f?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">视觉笔记让你的学习更高效</a></li><li><a href="http://www.jianshu.com/p/4596e168ec06" target="_blank" rel="noopener">视觉化你的行动力</a></li><li><a href="http://www.jianshu.com/p/f70f8518bb03" target="_blank" rel="noopener">视觉笔记 | 几个国外视觉笔记博客介绍</a></li><li><a href="http://www.jianshu.com/p/5b3658235333" target="_blank" rel="noopener">路乔手绘笔记系列</a></li><li><a href="http://www.jianshu.com/u/1d467fec18db" target="_blank" rel="noopener">铃铛子简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面一&lt;a href=&quot;http://zhangyuyu.github.io/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%91%E7%8E%B0%E5%88%9B%E6%84%8F/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;餐巾纸的背面（二）发现创意&lt;/a&gt;对视觉化思考的四个步骤进行了详解，介绍了SQVID和六六法则。&lt;br&gt;　　原书《餐巾纸的背面》第三部分【拓展创意】是结合MBA的案例，对视觉化思考的六种方式进行实操演练，本文就不再赘述，有兴趣的读者可以自己参考。&lt;br&gt;　　在本文中，主要是看书过后的一些思考与对手绘视觉化的拓展，可能与《餐巾纸的背面》一书没太多强关联了，偏重点在于手绘导图的方式方法。&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　当我们将脑海中想象出来的内容进行视觉化时候，有两种选择：软件绘制和手绘导图，机视觉笔记的两种载体。&lt;br&gt;　　软件绘制，可以借助很多工具进行精确、精美的绘制，如Microsoft办公软件系列，Google办公软件系列、WPS、Xmind等等；手绘导图，凭借自己的一双手、随时随地就可以开始作画。&lt;br&gt;　　虽然《餐巾纸的背面》一书中多次提到，我们有三个天生的视觉性工具————肉眼、内心的眼睛、手眼合作，拿起笔开始画图并不难。但是笔者还是会各种纠结到底如何画才好，有没有一些常见版式参考，或者小的tips。&lt;br&gt;　　带着这个问题，发现【视觉笔记】、【涂鸦笔记】这样的字眼频繁出现，而且与【视觉化思考】的实践联系颇多，故而，以此整理总结。&lt;/p&gt;
&lt;h2 id=&quot;三、视觉笔记的要素&quot;&gt;&lt;a href=&quot;#三、视觉笔记的要素&quot; class=&quot;headerlink&quot; title=&quot;三、视觉笔记的要素&quot;&gt;&lt;/a&gt;三、视觉笔记的要素&lt;/h2&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="餐巾纸的背面" scheme="http://yoursite.com/tags/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>餐巾纸的背面（二）发现创意</title>
    <link href="http://yoursite.com/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%91%E7%8E%B0%E5%88%9B%E6%84%8F/"/>
    <id>http://yoursite.com/2017/12/02/餐巾纸的背面（二）发现创意/</id>
    <published>2017-12-02T13:52:04.000Z</published>
    <updated>2017-12-27T07:15:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　看的更真切、目光更敏锐、想象更丰富————这才是视觉化思考的最佳工具和准则。<br>　　前面一篇 <a href="http://zhangyuyu.github.io/2017/11/30/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%E8%A7%86%E8%A7%89%E5%8C%96%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">餐巾纸的背面（一）视觉化思考</a> 从整体上介绍了视觉化思考的几个重要部分：四个步骤、三个工具、六种方法。本篇将借助这三个工具、6种方法进行四个步骤的详解。<br><img src="/imgs/餐巾纸的背面-发现创意-大纲.jpg" width="600" height="400"></p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　互联网时代，信息泛滥，知识变得无处不在。鼠标轻轻一点，我们就坐拥一座巨型图书馆。然后我们并没有因此离真相更近，离真正的掌握更近。我们花费了大量的时间去获取信息，去浏览不同的网页，了解不同的案例。<br>　　看书、练习、总结，在这个信息爆炸、碎片化的时代，也许是一种不错的学习方式。只有不停的练习、验证，才能逐步掌握“真正的知识”，而不是仅仅获取这些“网络上的信息”。</p><h2 id="三、看"><a href="#三、看" class="headerlink" title="三、看"></a>三、看</h2><a id="more"></a><p>　　我们睁开眼的每一秒，都有大量的视觉信号像光量子一样经视网膜转换成电子脉冲，然后通过视觉神经进入大脑的不同区域，这一过程中信号被分析、过滤、比较、分门别类、重组————这样才能成为我们大脑中形成的图像。<br>　　上述过程是无意识的，而我们谈起视觉化思考的时候，指的是有意识地使用上述内在观看系统。谈视觉化思考，首先得说说“主动地看”。</p><h3 id="1-我们如何看"><a href="#1-我们如何看" class="headerlink" title="1. 我们如何看"></a>1. 我们如何看</h3><p>　　四项关键任务：定向、定位、识别、聚焦。我们的视觉系统在无意识情况下，就是通过完成这四项关键任务来为我们服务的。<br><img src="/imgs/餐巾纸的背面-发现创意-四项关键任务.jpg" width="600" height="150"></p><h3 id="2-如何看得更真切"><a href="#2-如何看得更真切" class="headerlink" title="2. 如何看得更真切"></a>2. 如何看得更真切</h3><p>　　为了培养好的观看技巧，并且为视觉化打下好的基础，当我们看到新鲜事物时，需要遵从四个基本规则：</p><p>1). 收集我们能够看到的东西————越多越好（至少在开始是这样）</p><p>　　<img src="/imgs/餐巾纸的背面-发现创意-看1.jpg" width="400" height="150"></p><ul><li>如果信息过量，则可以结合上述的四项关键任务进行<code>“主动地看”</code>；</li><li>如果信息不足，则可以使用<strong>“六要素”</strong>来划定问题框架。</li></ul><p>2). 需要有一个地方逐个摆放我们的东西，这样我们可以将它们整个纳入视野</p><p>　　<img src="/imgs/餐巾纸的背面-发现创意-看2.jpg" width="400" height="150"></p><p>　　收集到所有需要的东西之后，我们可以把它们放在显眼的地方，这是有效阅读大量信息的最好方式，我们可以迅速浏览它们。<br>　　不一定必须是真实的物理空间，还可以通过电子表单，使能够一次性看到所有的数据，并进行比较。</p><p>3). 确定一个基本的坐标系以提供清晰的定向和位置</p><p>　　<img src="/imgs/餐巾纸的背面-发现创意-看3.jpg" width="400" height="150"></p><p>　　<strong>“六要素”</strong>就是很好的坐标系基本元素，几乎我们所有可能看到的描述性图画都会用六要素来绘制坐标。</p><p>【示例：股票走势&amp;比赛时间】<br><img src="/imgs/餐巾纸的背面-发现创意-示例图.jpg" width="400" height="100"></p><p>4). 学会减少我们眼睛看到的东西————我们需要练习视觉分类</p><img src="/imgs/餐巾纸的背面-发现创意-看4.jpg" width="400" height="150"><p>　　总有太多视觉信息我们处理不过来，所有需要我们d额视觉系统对那些信息进行筛选。<br>常见的前认知视觉属性：“临近度”、“颜色”、“尺寸”、“方位”、“方向”、“形状”及“明暗”， 我们可以借助于它们对视觉信号进行分类。</p><h2 id="四、观察"><a href="#四、观察" class="headerlink" title="四、观察"></a>四、观察</h2><h3 id="1-看-VS-观察"><a href="#1-看-VS-观察" class="headerlink" title="1. 看 VS 观察"></a>1. 看 VS 观察</h3><ul><li>如果说“看”着眼于收集呈现在我们面前的原始视觉信息，那么观察就是要选出那些重要的视觉信息。</li><li>“看”是一个相对开放的过程，“观察”则是一个逐渐聚焦的过程。</li><li>“看”是在收集信息，“观察”则是在选择信息并最终确定要研究的部分到底在哪里。</li></ul><h3 id="2-六要素观察"><a href="#2-六要素观察" class="headerlink" title="2. 六要素观察"></a>2. 六要素观察</h3><ul><li>目标————注意了是谁，是什么</li><li>数量————有多少</li><li>在空间中的位置————在哪里</li><li>在时间推移中的位置————什么时候</li><li>种种影响、原因与结果————怎么样</li><li>所有因素汇集到一起，明白“曲折原因”————为什么</li></ul><p>【示例：巧克力公司培训】<br><img src="/imgs/餐巾纸的背面-发现创意-观察.jpg" width="1000" height="800"></p><h2 id="五、想象"><a href="#五、想象" class="headerlink" title="五、想象"></a>五、想象</h2><h3 id="1-看、观察-→-想象"><a href="#1-看、观察-→-想象" class="headerlink" title="1. 看、观察 → 想象"></a>1. 看、观察 → 想象</h3><ul><li>通过“主动地看”，我们的双眼可以收集与所面临问题有关的一系列视觉信息；</li><li>通过“仔细观察”，我们会把这些信息进行分类，分为六种不同的视觉类型；</li><li>那么通过“想象”，我们会产生许多奇妙的创意，也会提出许多奇妙的解决办法。</li></ul><h3 id="2-SQVID"><a href="#2-SQVID" class="headerlink" title="2. SQVID"></a>2. SQVID</h3><h4 id="1）什么是SQVID"><a href="#1）什么是SQVID" class="headerlink" title="1）什么是SQVID"></a>1）什么是SQVID</h4><p>　　SQVID 基本上就是由名字中的五个元素所组成：简单（Simple）、定性（Quality）、愿景（Vision）、个别（Individual）和变化 （Delta）。<br><img src="/imgs/餐巾纸的背面-发现创意-SQVID.jpg" width="600" height="300"></p><p>上图中涉及到的五个问题：</p><ul><li>问题一： “简单”还是“精细”</li><li>问题二： “定性”还是“定量”</li><li>问题三： 突出“愿景”，还是突出“执行”</li><li>问题四： 突出“个别“，还是突出”比较“</li><li>问题五： 注重”现状“，还是将来的”变化“</li></ul><h4 id="2）SQVID的好处"><a href="#2）SQVID的好处" class="headerlink" title="2）SQVID的好处"></a>2）SQVID的好处</h4><p>SQVID能帮助我们同时完成两项和“想象”有关的关键任务：</p><ul><li>可以让我们“内心的眼睛”的每个角落都活跃起来，以便完整的捕捉脑海中出现的形象。</li><li>帮助我们从潜在听众的角度好好审视那些图和形象。</li></ul><h4 id="3）深入SQVID"><a href="#3）深入SQVID" class="headerlink" title="3）深入SQVID"></a>3）深入SQVID</h4><h5 id="SQVID两种方式："><a href="#SQVID两种方式：" class="headerlink" title="SQVID两种方式："></a>SQVID两种方式：</h5><p>【方式一】：以创意为中心<br>　　在脑海中，把SQVID的五个问题轮番问一遍，酝酿好每个问题的答案，准备好把这些答案形象化表达出来的额方式。通过这种方法，我们至少可以帮助自己提出10个不同的观点。</p><p>【方式二】：以听众为中心<br>　　根据观众的关心程度，调整自己准备“展示”的重点，就像调节音频均衡器一样，要把滑钮拧向自己希望调整的那一端。通过这种方法，我们就可以确定，到底哪一种类型的图最适合展示给听众。</p><h4 id="冷暖波段"><a href="#冷暖波段" class="headerlink" title="冷暖波段"></a>冷暖波段</h4><p>　　通过上图，我们可以看到SQVID图中：</p><ul><li>上半部分的词汇：“简单”、“定性”、“愿景”、“个别”、“变化”，这些词汇一针见血、具有概括性、与众不同并且抽象，带有很强的感情色彩，因此上半部分是“偏暖波段”；</li><li>下半部分的词汇：“精细”、“定量”、“执行”、“比较”、“现状”，这些词汇在商务活动中强调得更多，也更传统，因为它们以数据为基础，强调分析、细节、实事求是以及可测量性，强调理性，摆脱了情绪的干扰，因此下半部分称为“偏冷波段”。</li></ul><blockquote><p>注意：视觉化思考的目的是把复杂问题清楚地呈现出来，而不是把它简单化。</p></blockquote><h2 id="六、展示"><a href="#六、展示" class="headerlink" title="六、展示"></a>六、展示</h2><h3 id="1-展示"><a href="#1-展示" class="headerlink" title="1. 展示"></a>1. 展示</h3><p>　　展示就是我们与他人分享图画的过程，一方面是想把其中的信息传达给他们，另一方面则是想说服他们。与此同时，我们还会非常留心，看看他们观察的东西是否与自己设想的分毫不差。</p><h3 id="2-三个步骤"><a href="#2-三个步骤" class="headerlink" title="2. 三个步骤"></a>2. 三个步骤</h3><p>　　为了很好的向”别人“展示自己的想法，我们需要完成三步：</p><ul><li>选择合适的框架</li><li>依照选定的框架画图</li><li>介绍和解释所化的图</li></ul><h3 id="3-六六法则"><a href="#3-六六法则" class="headerlink" title="3. 六六法则"></a>3. 六六法则</h3><p>　　上述第一个步骤选择合适的框架中，我们需要两种工具来帮我们选出好的框架：<strong>SQVID</strong>和<strong>六六法则</strong>。 </p><h4 id="1-六六法则"><a href="#1-六六法则" class="headerlink" title="1). 六六法则"></a>1). 六六法则</h4><p>　　<img src="/imgs/餐巾纸的背面-发现创意-六六法则.jpg" width="600" height="450"></p><p>　　上图是我们观察世界的六种方式，以及”展示“它们的方式：</p><table><thead><tr><th style="text-align:center">观察</th><th style="text-align:center">问题</th><th style="text-align:center">展示</th></tr></thead><tbody><tr><td style="text-align:center">谁/什么</td><td style="text-align:center">定性的刻画</td><td style="text-align:center">画像</td></tr><tr><td style="text-align:center">有多少</td><td style="text-align:center">定量的表述</td><td style="text-align:center">图表</td></tr><tr><td style="text-align:center">在哪里</td><td style="text-align:center">空间中的位置</td><td style="text-align:center">布局图</td></tr><tr><td style="text-align:center">在什么时候</td><td style="text-align:center">时间中的位置</td><td style="text-align:center">时间轴</td></tr><tr><td style="text-align:center">怎么样</td><td style="text-align:center">原因 + 效果</td><td style="text-align:center">流程图</td></tr><tr><td style="text-align:center">为什么</td><td style="text-align:center">演绎 + 推测</td><td style="text-align:center">多重变量图</td></tr></tbody></table><h4 id="2-选择框架的四个标准"><a href="#2-选择框架的四个标准" class="headerlink" title="2). 选择框架的四个标准"></a>2). 选择框架的四个标准</h4><ul><li>用框架来展示什么？</li><li>每一种展示的框架都有它潜在的坐标系；</li><li>这些展示的框架中，那些对象之间的关系到底是什么？</li><li>展示框架的起点是什么？例如问题的中心、问题的由来或者我们的最终目标等。</li></ul><h4 id="3-六六法则结合SQVID"><a href="#3-六六法则结合SQVID" class="headerlink" title="3). 六六法则结合SQVID"></a>3). 六六法则结合SQVID</h4><p>　　<img src="/imgs/餐巾纸的背面-发现创意-六六法则&SQVID.jpg" width="600" height="300"><br>　　上图将SQVID和六六法则画在了同一个表格中，根据SQVID选择展示方式，根据六六法则选择框架。这样的表格能把解决问题的各种类型的主要图示都列的非常清楚，也就是我们所说的<code>视觉化思考宝典</code>。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>　　本篇对四个步骤进行了详细拆解，介绍了视觉化的基础，了解了SQVID工具和六六法则，学会了如何才能看的更准、理解更深、想得更远。<br>　　在下一篇<a href="http://zhangyuyu.github.io/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%B8%89%EF%BC%89%E6%8B%93%E5%B1%95%E5%88%9B%E6%84%8F/" target="_blank" rel="noopener">餐巾纸的背面（三）拓展创意</a>中，将介绍自己认为常见的，几个可视化图形框架。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.ylib.com/hotsale/napkin2/" target="_blank" rel="noopener">展开餐巾纸</a></li><li><a href="http://blog.163.com/wobutianl@126/blog/static/1335848201421511629602/" target="_blank" rel="noopener">好奇看世界博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　看的更真切、目光更敏锐、想象更丰富————这才是视觉化思考的最佳工具和准则。&lt;br&gt;　　前面一篇 &lt;a href=&quot;http://zhangyuyu.github.io/2017/11/30/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%E8%A7%86%E8%A7%89%E5%8C%96%E6%80%9D%E8%80%83/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;餐巾纸的背面（一）视觉化思考&lt;/a&gt; 从整体上介绍了视觉化思考的几个重要部分：四个步骤、三个工具、六种方法。本篇将借助这三个工具、6种方法进行四个步骤的详解。&lt;br&gt;&lt;img src=&quot;/imgs/餐巾纸的背面-发现创意-大纲.jpg&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　互联网时代，信息泛滥，知识变得无处不在。鼠标轻轻一点，我们就坐拥一座巨型图书馆。然后我们并没有因此离真相更近，离真正的掌握更近。我们花费了大量的时间去获取信息，去浏览不同的网页，了解不同的案例。&lt;br&gt;　　看书、练习、总结，在这个信息爆炸、碎片化的时代，也许是一种不错的学习方式。只有不停的练习、验证，才能逐步掌握“真正的知识”，而不是仅仅获取这些“网络上的信息”。&lt;/p&gt;
&lt;h2 id=&quot;三、看&quot;&gt;&lt;a href=&quot;#三、看&quot; class=&quot;headerlink&quot; title=&quot;三、看&quot;&gt;&lt;/a&gt;三、看&lt;/h2&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="餐巾纸的背面" scheme="http://yoursite.com/tags/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>餐巾纸的背面（一）视觉化思考</title>
    <link href="http://yoursite.com/2017/11/30/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%B8%80%EF%BC%89%E8%A7%86%E8%A7%89%E5%8C%96%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/11/30/餐巾纸的背面（一）视觉化思考/</id>
    <published>2017-11-30T20:34:55.000Z</published>
    <updated>2017-12-27T07:14:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　《餐巾纸的背面》不是告诉你如何成为一个画家，而是告诉你如何进行思考。将视觉化思考的观点，移植到你的工作、生活、交往、个人品牌规划以及你的一切中。学会用眼睛看待世界，用心思考世界，从而用笔与世界沟通。</p><img src="/imgs/餐巾纸的背面-视觉化思考-大纲.jpg" width="500" height="800"><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　转眼已经2017年的年底了，回顾这一年虽然看了不少书，但是却是边看边忘，边焦虑边放松，似乎每次都能给自己找到足够的借口来“堕落”，继而冠冕堂皇的继续“优雅地享受生活”。<br>　　上次的《Buddy Workshop》，顿似醍醐灌顶，让人不容小觑<code>输出</code>的重要性；<br>　　邮件里面看到的《21天写工作坊》，蓦地振聋发聩，让人歆羡<code>坚持</code>的点滴沉淀；<br>　　考虑年底的training budget的书籍，忽地豁然开朗，让人开始沉静下来总结些许。</p><h2 id="三、什么是视觉化思考"><a href="#三、什么是视觉化思考" class="headerlink" title="三、什么是视觉化思考"></a>三、什么是视觉化思考</h2><a id="more"></a><p>　　视觉化思考是运用我们天生的观察力————包括肉眼与“内心的眼睛”————来发现那些平时意想不到的创意和想法，并且以一种简单易懂的方式将其表达出来。</p><p>　　无论是职场新兵，还是驰骋多年的老将，学会图形化思考将会让你在信息碎片化的时代更好的把握战场的敌情、地形、优劣势分析、制高点把握以及任务完成的关键。</p><h2 id="四、为什么视觉化如此神奇？"><a href="#四、为什么视觉化如此神奇？" class="headerlink" title="四、为什么视觉化如此神奇？"></a>四、为什么视觉化如此神奇？</h2><img src="/imgs/餐巾纸的背面-视觉化思考-为什么.jpg" width="400" height="250"><p>1.更直观，视觉记忆更深刻。<br>　　文字比图更容易传承，图比文字更容易比解析。</p><p>2.提升传播效果<br>　　我们很容易发现图片可以传达更多的内容，在我们做讲演ppt的时候，我们都会用图片之类的来代替文字。尤其是直观的图片会给我们提供更多的信息。</p><p>3.提升思维<br>　　好的视觉框架能够更好地让复杂的事情变得更加的简单，而且可以相互支撑，写出让人意想不到的内容。</p><h2 id="五、基本图形"><a href="#五、基本图形" class="headerlink" title="五、基本图形"></a>五、基本图形</h2><h3 id="1-什么问题可以通过图来解决？"><a href="#1-什么问题可以通过图来解决？" class="headerlink" title="1. 什么问题可以通过图来解决？"></a>1. 什么问题可以通过图来解决？</h3><p>　　几乎所有的问题都可以通过画图来解决，因为图画能以便于理解的方式来表达复杂的概念，总结大量的信息，在澄清和解决各类问题时非常有用，比如商业问题、政治僵局、复杂的技术、组织的两难境地、日称冲突，甚至是个人需要应对的琐事和挑战。</p><p>　　下面这幅图，把大多数的问题进行归类：<br><img src="/imgs/餐巾纸的背面-视觉化思考-6要素.jpg" width="600" height="400"></p><p>　　上述图中的6个方面，即视觉化思考的6要素，该6要素会在后面的四个步骤中频繁出现，贯穿整个思考过程。</p><h3 id="2-什么样的图才能解决问题？"><a href="#2-什么样的图才能解决问题？" class="headerlink" title="2. 什么样的图才能解决问题？"></a>2. 什么样的图才能解决问题？</h3><img src="/imgs/餐巾纸的背面-视觉化思考-基本图形.jpg" width="600" height="200"><p>　　我们平常所画的示意图、概要图、流程图、表格、坐标系、概念模型、网络模型以及其他种类的图都是由上面这些基本的元素构成的。你会发现，这些元素其实就是那些展示软件（PowerPoint、Keynote、Office）的绘图共举办的一部分。不管你会不会画画，只要你能画出这些基本图形，那么你就能画出可视化的图形。</p><h2 id="六、你是什么类型的人？"><a href="#六、你是什么类型的人？" class="headerlink" title="六、你是什么类型的人？"></a>六、你是什么类型的人？</h2><p>　　当我告诉人们，我可以通过画图来帮助他们解决商业问题时，他们有以下三种反应：“太棒了！让我看看怎么解决？”或者，“听起来很有意思……不过，真的管用吗？”或者，“算了吧。我不习惯视觉化思考。”</p><ul><li>黑笔类<br>　　作出第一种反应的人属于“把笔给我”型的人，他们会毫不犹豫地开始在纸上画图。我对曾经参加的商业会议进行过粗略的调查，调查中这类人的数量占到了与会者的1/4。</li><li>黄色荧光笔类<br>　　作出第二种反应的人属于“我不会画画，不过……”型的人，他们很善于发现别人画中最重要和最有趣的方面。这种人通常占到会议人数的1/2。</li><li>红笔类<br>　　最后一种反应的人，对于在商业语境中使用图画感到很不自在……至少最初是这样。他们占了会议人数余下的1/4。</li></ul><blockquote><p>　　视觉化思考并不是一种只有天才才具有的天分，也不属于那些多年研究这个问题的人。不论你属于哪个类型的人，重要的是要知道，视觉化思考能力使我们天生的能力。<br>　　我们有三个天生的视觉性工具————肉眼、内心的眼睛、手眼合作。</p></blockquote><img src="/imgs/餐巾纸的背面-视觉化思考-天生的工具.jpg" width="300" height="150"><h2 id="七、四个步骤"><a href="#七、四个步骤" class="headerlink" title="七、四个步骤"></a>七、四个步骤</h2><img src="/imgs/餐巾纸的背面-视觉化思考-四个步骤.jpg" width="600" height="250"><p>　　上图所示的是视觉化思考的过程：看、观察、想象、展示。</p><blockquote><p>当我们为商务演示准备某个图表的时候，我们会：</p><ul><li>看这个图表有哪些内容（比如说明性的词表索引、坐标轴、资料来源等）</li><li>然后观察这些数据有哪些特点（也许X轴增长的速度比Y轴快）</li><li>接着好好想想这些特点说明了什么问题（比如成本增长的速度远远高于利润的增长）</li><li>最后，信息满满地向听众展示自己的看法</li></ul></blockquote><h3 id="1-看"><a href="#1-看" class="headerlink" title="1. 看"></a>1. 看</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">看 </span>=<span class="string"> 收集 + 初选</span></span><br></pre></td></tr></table></figure><h3 id="2-观察"><a href="#2-观察" class="headerlink" title="2. 观察"></a>2. 观察</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">观察 </span>=<span class="string"> 选择 + 归类</span></span><br></pre></td></tr></table></figure><h3 id="3-想象"><a href="#3-想象" class="headerlink" title="3. 想象"></a>3. 想象</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">想象 </span>=<span class="string"> 看到那些并不在眼前的事物</span></span><br></pre></td></tr></table></figure><h3 id="4-展示"><a href="#4-展示" class="headerlink" title="4. 展示"></a>4. 展示</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">展示 </span>=<span class="string"> 让一切清楚明白</span></span><br></pre></td></tr></table></figure><p>　　虽然视觉化思考的四个步骤常常是按照次序自然地逐步推进，但是其实整个视觉化思考的过程运作起来，更像是一连串循环往复的程序，就像下面所示：<br><img src="/imgs/餐巾纸的背面-视觉化思考-步骤循环.jpg" width="600" height="250"><br>　　看和观察这两个步骤总是在不停地交替，并且相互支持。<br>　　想象则变成了一座桥梁，在一端，我们对进入脑海的视觉信息进行处理；在另一端，视觉创意在不断输出。<br>　　当我们开始向其他人展示自己的成果时，他们就会启动视觉化思考过程————看我们展示的图片，观察吸引他们的地方，想象他们该如何处理这些材料，还会对我们展示的东西进行修改。<br>　　视觉化思考的循环过程就会一遍一遍地重复下去。</p><h2 id="八、六个方法"><a href="#八、六个方法" class="headerlink" title="八、六个方法"></a>八、六个方法</h2><p>　　6个方法对应于上面所提到的视觉化思考的6个要素，也对应到后面<a href="">餐巾纸的背面（二）发现创意</a>的<code>六六法则</code>。</p><img src="/imgs/餐巾纸的背面-视觉化思考-6种方法.jpg" width="600" height="350"><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>　<br><img src="/imgs/餐巾纸的背面-视觉化思考-导向绳.jpg" width="600" height="250"><br>上图是《餐巾纸的背面》一书的导向绳，顺应着该导向绳，进行视觉化思考的过程中，上述三个主题会频繁出现。</p><p>　本篇的主要内容对应于《餐巾纸的背面》的导言一章，对视觉化思考涉及到的进行进行了归纳总结。至于四个步骤的详细做法可以阅读<a href="http://zhangyuyu.github.io/2017/12/02/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%91%E7%8E%B0%E5%88%9B%E6%84%8F/" target="_blank" rel="noopener">餐巾纸的背面（二）发现创意</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.jianshu.com/p/413c2acfe8b0" target="_blank" rel="noopener">关于视觉化思考的一些思考</a></li><li><a href="http://www.jianshu.com/p/cb39a06d95c2" target="_blank" rel="noopener">视觉化思维练习总结</a></li><li><a href="http://www.jianshu.com/p/55376a84d951" target="_blank" rel="noopener">视觉化思维，聪明人的选择</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　《餐巾纸的背面》不是告诉你如何成为一个画家，而是告诉你如何进行思考。将视觉化思考的观点，移植到你的工作、生活、交往、个人品牌规划以及你的一切中。学会用眼睛看待世界，用心思考世界，从而用笔与世界沟通。&lt;/p&gt;
&lt;img src=&quot;/imgs/餐巾纸的背面-视觉化思考-大纲.jpg&quot; width=&quot;500&quot; height=&quot;800&quot;&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　转眼已经2017年的年底了，回顾这一年虽然看了不少书，但是却是边看边忘，边焦虑边放松，似乎每次都能给自己找到足够的借口来“堕落”，继而冠冕堂皇的继续“优雅地享受生活”。&lt;br&gt;　　上次的《Buddy Workshop》，顿似醍醐灌顶，让人不容小觑&lt;code&gt;输出&lt;/code&gt;的重要性；&lt;br&gt;　　邮件里面看到的《21天写工作坊》，蓦地振聋发聩，让人歆羡&lt;code&gt;坚持&lt;/code&gt;的点滴沉淀；&lt;br&gt;　　考虑年底的training budget的书籍，忽地豁然开朗，让人开始沉静下来总结些许。&lt;/p&gt;
&lt;h2 id=&quot;三、什么是视觉化思考&quot;&gt;&lt;a href=&quot;#三、什么是视觉化思考&quot; class=&quot;headerlink&quot; title=&quot;三、什么是视觉化思考&quot;&gt;&lt;/a&gt;三、什么是视觉化思考&lt;/h2&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="餐巾纸的背面" scheme="http://yoursite.com/tags/%E9%A4%90%E5%B7%BE%E7%BA%B8%E7%9A%84%E8%83%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Buddy Workshop</title>
    <link href="http://yoursite.com/2017/09/14/Buddy-workshop/"/>
    <id>http://yoursite.com/2017/09/14/Buddy-workshop/</id>
    <published>2017-09-14T20:02:53.000Z</published>
    <updated>2018-01-23T06:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>每个职场新人，初入职场时候，或多或少遇到了很多需要帮助的地方，有技术上的，有情绪上的，有环境上的，我们盼望着有一个“导师”能够引导、指导我们度过最开始的那段迷茫期。<br>抑或是，当换到一个新环境，开始一个崭新的工作，很多流程、机制、文化都难以快速适应，这时候如果有一个“老司机”带我们轻松度过最开始的那段适应期，真真是极好的。</p><p>每个人都曾度过这个阶段，每个人都有过期盼，那么如果你作为一个“导师”，你会怎么做呢？</p><p>本篇文章，不是从“职场小白”或“新入职同事”的角度出发，而是从“带人（Buddy）”的角度出发，了解一些“培养人这件事”中，可能需要知道的理论知识。</p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>在ThoughtWorks已经两年了，这中间虽然自己有在带新人，包括应届毕业生，社招进来的同事，但是一直没有系统的梳理过这中间需要的软技能，只是用以自己被带过的感受在努力带好新人，给他们营造良好的氛围、帮助他们更快的适应环境、督促或者指引他们持续学习、不断进步。</p><p>最近，参加了公司举办的一次Buddy Workshop，系统的梳理了Buddy应知应会的一些内容。</p><p>培训是让人快速完成一些重要理论知识从0到1的过程，而真正的从1到100的过程，还需要在未来的实践中不断前行。有些理论可能当下并没有那么深刻的感触，在以后的道路上才会感触颇多，因此以此博文记录一下要点，方便以后再次回忆。</p><p>具体内容分为以下几个方面：</p><ul><li>为什么要带人？</li><li>培养成什么样的人？</li><li>如何培养？</li><li>面对的挑战</li><li>构建完善的培养体系</li><li>练习<a id="more"></a></li></ul><h2 id="三、为什么要带人"><a href="#三、为什么要带人" class="headerlink" title="三、为什么要带人"></a>三、为什么要带人</h2><h3 id="1-提升自己的能力"><a href="#1-提升自己的能力" class="headerlink" title="1. 提升自己的能力"></a>1. 提升自己的能力</h3><p>正如Cone of experience（学习金字塔）里面告诉我们的，我们是通过“教“的过程才真正学会，而不是学好了才能去教。<br><img src="/imgs/buddy-cone-of-experience.png" width="500" height="250"></p><p>Teaching is Learning，这一点在费曼技巧里面也有一些体现。把教别人的过程作为帮助自己学习的过程。表面看起来是知识输出，但实际上这个过程还有额外的三个价值：</p><ul><li>因为要教别人，就会督促自己发现知识阻塞，进一步打通已有知识。</li><li>教别人的过程，是一个强化记忆和认识的过程</li><li>教别人之后，别人提出疑问、质疑和新想法，会增强我们的认识</li></ul><p>具体的对自己能力的提升，我列举了一些如下：</p><ul><li>自身对相应知识的掌握</li><li>知识的表达能力</li><li>沟通能力等软技能</li></ul><h3 id="2-构建组织环境"><a href="#2-构建组织环境" class="headerlink" title="2. 构建组织环境"></a>2. 构建组织环境</h3><p>我们工作都是以团队为单位的，站在团队的角度，我们不希望因为某一个人某段时间的离开，造成了交付的延迟，因此持续培养新人，让其慢慢承担我们所承担的事情，是非常重要的。<br>此外，在一个团队中，我们不可能一个人做所有的事情，在带人过程中，把自己的事情share出去，也是一个非常明智的选择。</p><h3 id="3-发展他人拥有我们希望具备的品质"><a href="#3-发展他人拥有我们希望具备的品质" class="headerlink" title="3. 发展他人拥有我们希望具备的品质"></a>3. 发展他人拥有我们希望具备的品质</h3><p>我们都希望和同事相处融洽，培养他们拥有我们希望具备的品质，能够增加合作默契等。<br>但是，这并不代表着，我们把他们全部培养成只适合这一家公司的人才，我们还要站在他们未来的角度，培养他们应当具备的品质，这一点在下面”培养成什么样的人“中会涉及到。</p><h2 id="四、培养成什么样的人"><a href="#四、培养成什么样的人" class="headerlink" title="四、培养成什么样的人"></a>四、培养成什么样的人</h2><p>在如今这个信息爆炸和知识爆炸的时代，我们需要不断的学习，不断的进步，以保持持续竞争力，来督促自己的成长，应对未知的变化，从而走向我们希望的生活，因此<strong>培养<u>终身学习</u>的<u>数字化人才</u></strong>就是我们培养的目标。</p><h3 id="1-终身学习"><a href="#1-终身学习" class="headerlink" title="1. 终身学习"></a>1. 终身学习</h3><p>“终身学习”是指持续的、自愿的和自我激励式的学习。“终身学习”不仅发生在童年时期或者教室中，而是贯穿人的一生，可以发生在任何时间、任何场合、任何条件下。学习的目的可以是为了个人发展，也可以是为了职业需要。﻿<br>终身学习有几个特点：</p><ul><li>持续</li><li>自愿</li><li>自我激励<br>更多终身学习内容，可以参考文末的Reference。</li></ul><h3 id="2-数字化人才"><a href="#2-数字化人才" class="headerlink" title="2. 数字化人才"></a>2. 数字化人才</h3><p>数字化人才的定义是以敏捷为核心，具备设计思维、商业视角和工程实践能力的人才。<br><img src="/imgs/buddy-digital-talent.png" width="500" height="250"></p><p>数字化人才既具备工程实现的能力，又有商业嗅觉，了解用户和市场，还有设计思维，知道如何一步步做出用户满意的产品。以敏捷的心态为基础：快速试错、持续改进。当今社会，想要取得成功，跨界能力显得愈发重要。</p><h2 id="五、如何培养"><a href="#五、如何培养" class="headerlink" title="五、如何培养"></a>五、如何培养</h2><p><strong>构建以<u>学习者为中心</u>的<u>可视化教学</u></strong><br><img src="/imgs/buddy-以学习者为中心的教学.jpg" width="500" height="250"></p><h3 id="1-少讲课、多辅导"><a href="#1-少讲课、多辅导" class="headerlink" title="1. 少讲课、多辅导"></a>1. 少讲课、多辅导</h3><p>讲课，老师是主角，它是一种告知行为；辅导，主角是学员自己，它带有训练性质。</p><p>以我切身的经验来看，讲课了很多东西，吸收到的只有一小部分，有些事情，讲了很多次，可能学习者都没有印象。反而，你讲的也累了，耐心也没有那么多了，学习者也怅惘了，自信心没有那么足了。<br>而辅导，你告诉他怎么找答案，不会的再来问你。那么久而久之，学习者学习的方式就自主了，掌握的知识更牢固了。</p><h3 id="2-验收"><a href="#2-验收" class="headerlink" title="2. 验收"></a>2. 验收</h3><p>验收机制顾名思义就是把我们学习过的知识重新整理一篇，看哪些是我们已经掌握好的，哪些是未能渗透掌握的，并以此加深巩固。</p><p>也许你还会觉得很陌生，但其实我们每个人都会有使用过验收机制：</p><ul><li>学校里接受教育时，不定期或定期的各种考试；</li><li>敏捷里写Story时，各种场景的Acceptance Criteria；</li><li>游戏里闯关时，每一关都要达到的标准。</li></ul><table><thead><tr><th>维度</th><th>可视化工具 </th></tr></thead><tbody><tr><td>知识储备</td><td>读书打卡  </td></tr><tr><td>概念掌握</td><td>概念图  </td></tr><tr><td>业务理解</td><td>业务蓝图  </td></tr><tr><td>任务拆分</td><td>Taksing  </td></tr><tr><td>技能掌握</td><td>限时编程  </td></tr><tr><td>持续改进</td><td>总结 / 述职 /5w2h</td></tr></tbody></table><h3 id="3-反馈"><a href="#3-反馈" class="headerlink" title="3. 反馈"></a>3. 反馈</h3><p>戴明循环（PDCA）讲究从计划开始，经过实践，再反思，产生的改进行动再纳入下一轮计划的持续改进过程。<br><img src="/imgs/buddy-pdca.png" width="500" height="250"></p><p>Plan - Do - Check - Action是持续改进提升的模型，这一套适用于很多方面，这里我们也可以用来不断改进我们的培养过程、以及锻炼学习过程。</p><h3 id="4-正确对待时间鸿沟与现实约束"><a href="#4-正确对待时间鸿沟与现实约束" class="headerlink" title="4. 正确对待时间鸿沟与现实约束"></a>4. 正确对待时间鸿沟与现实约束</h3><h4 id="德弗雷斯模型"><a href="#德弗雷斯模型" class="headerlink" title="德弗雷斯模型"></a>德弗雷斯模型</h4><p>德雷福斯模型（Dreyfus model of skill acquisition）概括了从新手到专家必须经历的 5 个阶段，每两个阶段之间都需要经历一定的时间，无法避免。因此在培养的时候，不能一蹴而就，要正确对待这个时间的鸿沟。</p><img src="/imgs/buddy-coaching-evolution.png" width="500" height="250"><h4 id="一切能力的核心"><a href="#一切能力的核心" class="headerlink" title="一切能力的核心"></a>一切能力的核心</h4><p>公司同事曾经做过一个调查，具体内容是，到底是什么样的人，才是能够让我司每一个团队（注意，是每一个团队）都能说出“我愿意与他共事”的人呢？<br>经过大量的各种访谈，并对结果进行整理和记录，大致列出如下16个维度：</p><ul><li>努力程度</li><li>上进心</li><li>责任心</li><li>认真的做事态度</li><li>理解能力</li><li>表达能力</li><li>自学能力</li><li>英文能力</li><li>协作能力</li><li>改进速度</li><li>求知欲</li><li>主动性</li><li>文化契合度</li><li>正能量</li><li>分享精神</li><li>思维能力</li></ul><p>其实，最后总结下来，核心能力就是<strong>理解能力</strong>和<strong>表达能力</strong>，也就是我们的听、说、读、写的能力。而这些能力是在我们小学一、二年级时候建立的。<br>这个现实的约束，与我们成长的环境有关，我们无法从头再来，因此正确认识到这个现实约束，显得尤为关键。</p><h4 id="院校、企业在人员培养方面的区别"><a href="#院校、企业在人员培养方面的区别" class="headerlink" title="院校、企业在人员培养方面的区别"></a>院校、企业在人员培养方面的区别</h4><h2 id="六、面对的挑战"><a href="#六、面对的挑战" class="headerlink" title="六、面对的挑战"></a>六、面对的挑战</h2><h3 id="1-自身业务"><a href="#1-自身业务" class="headerlink" title="1. 自身业务"></a>1. 自身业务</h3><h3 id="2-发展他人"><a href="#2-发展他人" class="headerlink" title="2. 发展他人"></a>2. 发展他人</h3><p>由于 Buddy 的工作经验和带人技巧参差不齐，所以是否能够准确评价毕业生，是否能够高质量的提升毕业生水平，并不能达成一致效果，导致一部分毕业生缺乏方向，缺乏安全感，进步有限。</p><h3 id="3-缺少导师和可视化工具"><a href="#3-缺少导师和可视化工具" class="headerlink" title="3. 缺少导师和可视化工具"></a>3. 缺少导师和可视化工具</h3><h3 id="4-难以关注整体"><a href="#4-难以关注整体" class="headerlink" title="4. 难以关注整体"></a>4. 难以关注整体</h3><h2 id="七、构建完善的培养体系"><a href="#七、构建完善的培养体系" class="headerlink" title="七、构建完善的培养体系"></a>七、构建完善的培养体系</h2><h3 id="胜任力模型"><a href="#胜任力模型" class="headerlink" title="胜任力模型"></a>胜任力模型</h3><ul><li>Self Confidence（自信）</li><li>Developing Others（发展他人）</li><li>Delivering Customer Results（客户成果交付）</li><li>Technical Expertise（技术专长）</li></ul><h3 id="教头计划"><a href="#教头计划" class="headerlink" title="教头计划"></a>教头计划</h3><p>Buddy1.0  —专家组—&gt;  Buddy2.0 —技术系统—&gt; Buddy3.0</p><h2 id="八、练习"><a href="#八、练习" class="headerlink" title="八、练习"></a>八、练习</h2><h3 id="1-概念图"><a href="#1-概念图" class="headerlink" title="1. 概念图"></a>1. 概念图</h3><p>概念图是由概念，连接线和关注点组成。最小的单元是命题，命题由两个概念和一条连接线组成。它可以帮助我们把大脑中思考的事情用图来可视化。在这里可以帮助我们查看新人对事物的理解。如果新人的表达能力描述不清，借此辅助。<br>我们可以借助工具CmapTools进行概念图的绘制：<br><img src="/imgs/buddy-cmap-json.png" width="500" height="250"><br><a href="https://school.thoughtworks.cn:8341/rid=1RRC78MYB-1X88GJ7-PV6/JSON.cmap" target="_blank" rel="noopener">原cmap文件地址</a></p><h3 id="2-Tasking"><a href="#2-Tasking" class="headerlink" title="2. Tasking"></a>2. Tasking</h3><p>强调程序的输入和输出。</p><h3 id="3-反馈与倾听"><a href="#3-反馈与倾听" class="headerlink" title="3. 反馈与倾听"></a>3. 反馈与倾听</h3><h4 id="区分观察和评论"><a href="#区分观察和评论" class="headerlink" title="区分观察和评论"></a>区分观察和评论</h4><h4 id="区分感受和想法"><a href="#区分感受和想法" class="headerlink" title="区分感受和想法"></a>区分感受和想法</h4><h4 id="需要和感受的关系"><a href="#需要和感受的关系" class="headerlink" title="需要和感受的关系"></a>需要和感受的关系</h4><h4 id="区分请求和命令"><a href="#区分请求和命令" class="headerlink" title="区分请求和命令"></a>区分请求和命令</h4><p>最后最对这个话题，有兴趣的同学可以看一下两本书《非暴力沟通》、《关键对话》。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文系统的记录了此次培训的要点，和涉及到的练习。<br>此外，讲师在描述自己如何带buddy的时候提出了几点也很重要：</p><ul><li>阅读习惯的培养（<a href="http://www.jianshu.com/p/0cb14cbe3432" target="_blank" rel="noopener">思特沃克学院阅读习惯培养推荐书单</a>）</li><li>如何反思（5W1H、5Why）</li><li>反思的顺序（事实 -&gt; 矛盾 -&gt; 问题 -&gt; 观点）</li><li>Action（PDCA、SMART原则）</li><li>述职/总结（过去一个月的工作内容、回顾与反思、我有哪些问题或疑惑 ）</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://jiaching.com/%E6%95%99%E5%B0%B1%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E5%AD%B8%E2%94%82%E6%AD%A3%E7%A2%BA%E7%9A%84%E5%AD%B8%E7%BF%92%E4%B9%8B%E9%81%93/" target="_blank" rel="noopener">教就是最好的学</a></li><li><a href="https://mp.weixin.qq.com/s/lz3Y237k3hNmb4zCusZNkw" target="_blank" rel="noopener">10个终身学习方法</a></li><li><a href="https://school.thoughtworks.cn/" target="_blank" rel="noopener">思沃学院</a></li><li><a href="http://www.jianshu.com/p/f196468e0203" target="_blank" rel="noopener">如何培养终身学习者</a></li><li><a href="http://www.360doc.com/content/16/0721/12/132526_577268647.shtml" target="_blank" rel="noopener">费曼技巧</a></li><li><a href="http://www.jianshu.com/p/8b62d8788c72" target="_blank" rel="noopener">开启我的奇妙人生的八个思考模型工具</a></li><li><a href="https://www.zybuluo.com/flysmart/note/213521" target="_blank" rel="noopener">德雷福斯模型</a></li><li><a href="https://www.zybuluo.com/jtong/note/504192" target="_blank" rel="noopener">像机器人一样思考 系列文章</a></li><li><a href="http://sjyuan.cc/project-driven-student-centralized-training/" target="_blank" rel="noopener">以学习者为中心的项目驱动培训</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;每个职场新人，初入职场时候，或多或少遇到了很多需要帮助的地方，有技术上的，有情绪上的，有环境上的，我们盼望着有一个“导师”能够引导、指导我们度过最开始的那段迷茫期。&lt;br&gt;抑或是，当换到一个新环境，开始一个崭新的工作，很多流程、机制、文化都难以快速适应，这时候如果有一个“老司机”带我们轻松度过最开始的那段适应期，真真是极好的。&lt;/p&gt;
&lt;p&gt;每个人都曾度过这个阶段，每个人都有过期盼，那么如果你作为一个“导师”，你会怎么做呢？&lt;/p&gt;
&lt;p&gt;本篇文章，不是从“职场小白”或“新入职同事”的角度出发，而是从“带人（Buddy）”的角度出发，了解一些“培养人这件事”中，可能需要知道的理论知识。&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;在ThoughtWorks已经两年了，这中间虽然自己有在带新人，包括应届毕业生，社招进来的同事，但是一直没有系统的梳理过这中间需要的软技能，只是用以自己被带过的感受在努力带好新人，给他们营造良好的氛围、帮助他们更快的适应环境、督促或者指引他们持续学习、不断进步。&lt;/p&gt;
&lt;p&gt;最近，参加了公司举办的一次Buddy Workshop，系统的梳理了Buddy应知应会的一些内容。&lt;/p&gt;
&lt;p&gt;培训是让人快速完成一些重要理论知识从0到1的过程，而真正的从1到100的过程，还需要在未来的实践中不断前行。有些理论可能当下并没有那么深刻的感触，在以后的道路上才会感触颇多，因此以此博文记录一下要点，方便以后再次回忆。&lt;/p&gt;
&lt;p&gt;具体内容分为以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要带人？&lt;/li&gt;
&lt;li&gt;培养成什么样的人？&lt;/li&gt;
&lt;li&gt;如何培养？&lt;/li&gt;
&lt;li&gt;面对的挑战&lt;/li&gt;
&lt;li&gt;构建完善的培养体系&lt;/li&gt;
&lt;li&gt;练习
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="培训" scheme="http://yoursite.com/tags/%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>Slf4j MDC使用和基于Logback的实现分析</title>
    <link href="http://yoursite.com/2017/08/17/Log-Slf4j%20MDC%20%E4%BD%BF%E7%94%A8%E5%92%8C%E5%9F%BA%E4%BA%8E%20Logback%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/08/17/Log-Slf4j MDC 使用和基于 Logback的实现/</id>
    <published>2017-08-17T12:01:52.000Z</published>
    <updated>2017-12-27T07:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>　　上一篇<a href="http://zhangyuyu.github.io/2017/08/17/Log-Java%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">Java日志管理</a>里面对Java相关的日志库进行了梳理，了解了常见的日志框架（Log Implement）和日志门面(Log Facade)。</p><ul><li>使用日志门面，开发者只需要针对门面接口开发，而调用组件的应用程序则可以搭配自己喜好的日志实现工具，目前来看Slf4j + LogBack组合方式是比较通用的方式。</li><li>对于web应用而言，多线程的调用是很常见的，我们可能需要对一个用户的操作流程进行归类标记，用来区分哪个行为和哪个日志事件有关，MDC则很好的处理这个需求。</li></ul><p>本篇将介绍Slf4j + LogBack的组合方式，介绍MDC的使用，并结合源码对实现原理进行分析。</p><h3 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h3><p>　　起源于最近看到项目使用了MDC，好奇这是个什么东西的情况下，系统的了解了Java的日志管理，并借此机会分析其实现原理，记录下来，理清思路。</p><a id="more"></a><h3 id="三、Slf4j-MDC-介绍"><a href="#三、Slf4j-MDC-介绍" class="headerlink" title="三、Slf4j MDC 介绍"></a>三、Slf4j MDC 介绍</h3><p>　　介绍Slf4j和MDC的由来，可以参考上一篇<a href="http://zhangyuyu.github.io/2017/08/17/Log-Java%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">Java日志管理</a>。</p><h4 id="1-Slf4j是什么？"><a href="#1-Slf4j是什么？" class="headerlink" title="1. Slf4j是什么？"></a>1. Slf4j是什么？</h4><p>　　Slf4j全称为Simple Logging Facade for Java (简单日志门面)，作为各种日志框架的简单门面或者抽象，包括JUL，Log4j，Logback。SLF4J允许用户在部署期间加入自己希望使用的日志系统。其实Slf4j与Log4j, Logback都是同一作者。</p><h4 id="2-MDC是什么"><a href="#2-MDC是什么" class="headerlink" title="2. MDC是什么?"></a>2. MDC是什么?</h4><p>　　MDC全称为Mapped Diagnostic Context（映射调试上下文）是 log4j 和 logback 提供的一种方便在多线程条件下记录日志的功能。<br>　　典型的例子是 Web 应用服务器。当用户访问某个页面时，应用服务器可能会创建一个新的线程来处理该请求，也可能从线程池中复用已有的线程。在一个用户的会话存续期间，可能有多个线程处理过该用户的请求。这使得比较难以区分不同用户所对应的日志。当需要追踪某个用户在系统中的相关日志记录时，就会变得很麻烦。</p><blockquote><p>　　虽然，Slf4j 是用来适配其他的日志具体实现包的，但是针对 MDC功能，目前只有Logback 以及 Log4j 支持。</p></blockquote><h4 id="3-MDC的简单使用"><a href="#3-MDC的简单使用" class="headerlink" title="3. MDC的简单使用"></a>3. MDC的简单使用</h4><h5 id="3-1-使用MDC"><a href="#3-1-使用MDC" class="headerlink" title="3.1 使用MDC"></a>3.1 使用MDC</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.daimler.otr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">LogTest</span>.<span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">MDC</span>.put(<span class="string">"THREAD_ID"</span>, <span class="type">String</span>.valueOf(<span class="type">Thread</span>.currentThread().getId()));</span><br><span class="line">        logger.info(<span class="string">"纯字符串信息的info级别日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-logback的配置"><a href="#3-2-logback的配置" class="headerlink" title="3.2 logback的配置"></a>3.2 logback的配置</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="xml"> %highlight(%-5p) %logger.%M\(%F:%L\)] %X</span><span class="template-variable">&#123;THREAD_ID&#125;</span><span class="xml"> %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-3-运行结果"><a href="#3-3-运行结果" class="headerlink" title="3.3 运行结果"></a>3.3 运行结果</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2017</span>-<span class="number">08</span>-<span class="number">24</span> <span class="number">09</span>:<span class="number">08</span>:<span class="number">17</span> INFO  com<span class="selector-class">.daimler</span><span class="selector-class">.otr</span><span class="selector-class">.LogTest</span><span class="selector-class">.main</span>(LogTest<span class="selector-class">.java</span>:<span class="number">13</span>)] <span class="number">1</span> 纯字符串信息的info级别日志</span><br></pre></td></tr></table></figure><h5 id="3-4-其他说明"><a href="#3-4-其他说明" class="headerlink" title="3.4 其他说明"></a>3.4 其他说明</h5><p>在笔者的web项目中，是将MDC的操作放在Filter中，对所有请求前进行filter拦截，然后加上自定义的唯一标识到MDC中，就可以在所有日志输出中，清楚看到某用户的操作流程。</p><ol><li><p>首先有一个单独的MDCRegister定义了对于key需要的put操作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class MDCRegister &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> registerUUID(<span class="keyword">String</span> requestId)&#123;</span><br><span class="line">        MDC.<span class="built_in">put</span>(<span class="string">"uuid"</span>, requestId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> registerModuleName(<span class="keyword">String</span> requestUri)&#123;</span><br><span class="line">        MDC.<span class="built_in">put</span>(<span class="string">"module_name"</span>, requestUri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> registerUserName(<span class="keyword">String</span> userName)&#123;</span><br><span class="line">        MDC.<span class="built_in">put</span>(<span class="string">"user_name"</span>, userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> registerAppVersion(<span class="keyword">String</span> appVersion)&#123;</span><br><span class="line">        MDC.<span class="built_in">put</span>(<span class="string">"app_version"</span>, appVersion);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> registerSessionID(<span class="keyword">String</span> token)&#123;</span><br><span class="line">        <span class="keyword">String</span> sessionID = Base64.encodeBase64String((token + <span class="string">"300Fi67wJ4A4E0h"</span>).getBytes()).substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        MDC.<span class="built_in">put</span>(<span class="string">"session_id"</span>, sessionID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> registerLogInformationFromRequest(<span class="keyword">String</span> token, <span class="keyword">String</span> requestId, <span class="keyword">String</span> appVersion, <span class="keyword">String</span> requestUri)&#123;</span><br><span class="line">        MDC.<span class="built_in">clear</span>();</span><br><span class="line">        registerUUID(requestId);</span><br><span class="line">        registerAppVersion(appVersion);</span><br><span class="line">        registerSessionID(token);</span><br><span class="line">        registerModuleName(requestUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后自定义Filter，使用MDC相关操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractPreAuthenticatedProcessingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MDCRegister</span> mdcRegister;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Object</span> getPreAuthenticatedPrincipal(<span class="type">HttpServletRequest</span> request) &#123;</span><br><span class="line">        <span class="type">String</span> token = getRequestToken(request);</span><br><span class="line">        <span class="type">String</span> requestID = request.getHeader(<span class="string">"X-SERVICE-REQUEST-ID"</span>);</span><br><span class="line">        <span class="type">String</span> appVersion = request.getHeader(<span class="string">"X-CLIENT-VERSION"</span>);</span><br><span class="line">        <span class="type">String</span> requestUri = request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> sessionId = token;</span><br><span class="line">       </span><br><span class="line">        mdcRegister.registerLogInformationFromRequest(sessionId, requestID, appVersion, requestUri);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>定义logback.xml中的pattern</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span>[<span class="string">V</span>][<span class="symbol">%d</span>][<span class="string">%-5p</span>][<span class="symbol">%t</span>][<span class="string">%c&#123;0&#125;</span>][<span class="symbol">%M</span>][<span class="string">%X&#123;uuid&#125;</span>][<span class="symbol">%X&#123;app_version&#125;</span>][<span class="string">%X&#123;user_name&#125;</span>][<span class="symbol">%X&#123;session_id&#125;</span>] - %m%n<span class="xml"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在日志模板logback.xml 中，使用 %X{ }来占位，替换到对应的 MDC 中 key 的值。</p></blockquote><h3 id="四、Log-MDC-实现分析"><a href="#四、Log-MDC-实现分析" class="headerlink" title="四、Log MDC 实现分析"></a>四、Log MDC 实现分析</h3><h4 id="1-Slf4j-MDC-实现分析"><a href="#1-Slf4j-MDC-实现分析" class="headerlink" title="1. Slf4j MDC 实现分析"></a>1. Slf4j MDC 实现分析</h4><p>查看Slf4j MDC的实现源码，可以发现Slf4j MDC内部实现很简单：实现一个单例对应实例，获取具体的MDC实现类，然后其对外接口，就是对参数进行校验，然后调用 MDCAdapter 的方法实现。</p><p>如下只显示了与mdcAdapter相关的Slf4j MDC源码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class MDC &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> MDCAdapter mdcAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MDC() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mdcAdapter = bwCompatibleGetMDCAdapterFromBinder();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError ncde) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key parameter cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mdcAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"MDCAdapter cannot be null. See also "</span> + NULL_MDCA_URL);</span><br><span class="line">        &#125;</span><br><span class="line">        mdcAdapter.put(<span class="built_in">key</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key parameter cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mdcAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"MDCAdapter cannot be null. See also "</span> + NULL_MDCA_URL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mdcAdapter.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> remove(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key parameter cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mdcAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"MDCAdapter cannot be null. See also "</span> + NULL_MDCA_URL);</span><br><span class="line">        &#125;</span><br><span class="line">        mdcAdapter.remove(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mdcAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"MDCAdapter cannot be null. See also "</span> + NULL_MDCA_URL);</span><br><span class="line">        &#125;</span><br><span class="line">        mdcAdapter.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MDCAdapter getMDCAdapter() &#123;</span><br><span class="line">        <span class="keyword">return</span> mdcAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MDCAdapter接口源码如下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface MDCAdapter &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> remove(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getCopyOfContextMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setContextMap(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; contextMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-Logback-MDC-实现分析"><a href="#2-Logback-MDC-实现分析" class="headerlink" title="2. Logback MDC 实现分析"></a>2. Logback MDC 实现分析</h4><p>Logback 中，用LogbackMDCAdapter实现了Sl4j里面的MDCAdapter接口。<br>下面是get 和 put 的代码实现：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class LogbackMDCAdapter implements MDCAdapter &#123;</span><br><span class="line">    <span class="keyword">final</span> ThreadLocal&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; copyOnThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> WRITE_OPERATION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAP_COPY_OPERATION = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; lastOperation = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer getAndSetLastOperation(<span class="built_in">int</span> op) &#123;</span><br><span class="line">        Integer lastOp = lastOperation.<span class="built_in">get</span>();</span><br><span class="line">        lastOperation.<span class="built_in">set</span>(op);</span><br><span class="line">        <span class="keyword">return</span> lastOp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> wasLastOpReadOrNull(Integer lastOp) &#123;</span><br><span class="line">        <span class="keyword">return</span> lastOp == <span class="keyword">null</span> || lastOp.intValue() == MAP_COPY_OPERATION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; duplicateAndInsertNewMap(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; oldMap) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; newMap = Collections.synchronizedMap(<span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;());</span><br><span class="line">        <span class="keyword">if</span> (oldMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// we don't want the parent thread modifying oldMap while we are</span></span><br><span class="line">            <span class="comment">// iterating over it</span></span><br><span class="line">            <span class="keyword">synchronized</span> (oldMap) &#123;</span><br><span class="line">                newMap.putAll(oldMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        copyOnThreadLocal.<span class="built_in">set</span>(newMap);</span><br><span class="line">        <span class="keyword">return</span> newMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> val) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; oldMap = copyOnThreadLocal.<span class="built_in">get</span>();</span><br><span class="line">        Integer lastOp = getAndSetLastOperation(WRITE_OPERATION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wasLastOpReadOrNull(lastOp) || oldMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; newMap = duplicateAndInsertNewMap(oldMap);</span><br><span class="line">            newMap.put(<span class="built_in">key</span>, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oldMap.put(<span class="built_in">key</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = copyOnThreadLocal.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">map</span> != <span class="keyword">null</span>) &amp;&amp; (<span class="built_in">key</span> != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、-Logback-日志输出实现"><a href="#五、-Logback-日志输出实现" class="headerlink" title="五、 Logback 日志输出实现"></a>五、 Logback 日志输出实现</h3><p>MDC 的功能实现很简单，就是在线程上下文中，维护一个 Map&lt;String,String&gt; 属性来支持日志输出的时候，当我们在配置文件logback.xml中配置了%X{key}，则后台日志打印出对应的 key 的值。</p><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><p>所谓初始化，就是我们构建logger的时候。在LoggerFactory.getLogger()，调用的是 slf4j 的方法，而底层使用的是logback的实现。因此，初始化的重点就是找到底层具体的实现接口，然后构建具体类。</p><p>Sl4j中LoggerFactory如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.slf4j;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerFactory</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger getLogger(String name) &#123;</span><br><span class="line">        ILoggerFactory iLoggerFactory = getILoggerFactory();</span><br><span class="line">        <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory getILoggerFactory() &#123;</span><br><span class="line">        <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LoggerFactory.<span class="keyword">class</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">                    INITIALIZATION_STATE = ONGOING_INITIALIZATION;</span><br><span class="line">                    performInitialization();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">SUCCESSFUL_INITIALIZATION:</span></span><br><span class="line">            <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">NOP_FALLBACK_INITIALIZATION:</span></span><br><span class="line">            <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">FAILED_INITIALIZATION:</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">ONGOING_INITIALIZATION:</span></span><br><span class="line">            <span class="keyword">return</span> SUBST_FACTORY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> performInitialization() &#123;</span><br><span class="line">        bind();</span><br><span class="line">        <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</span><br><span class="line">            versionSanityCheck();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> bind() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!isAndroid()) &#123;</span><br><span class="line">                staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</span><br><span class="line">                reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// the next line does the binding</span></span><br><span class="line">            StaticLoggerBinder.getSingleton();</span><br><span class="line">            INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</span><br><span class="line">            reportActualBinding(staticLoggerBinderPathSet);</span><br><span class="line">            fixSubstituteLoggers();</span><br><span class="line">            replayEvents();</span><br><span class="line">            SUBST_FACTORY.clear();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError ncde) &#123;</span><br><span class="line">            ...  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.lang.NoSuchMethodError nsme) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String STATIC_LOGGER_BINDER_PATH = <span class="string">"org/slf4j/impl/StaticLoggerBinder.class"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的部分代码，可以很明显看出，slf4j 会去调用classloader获取当前加载的类中，实现了指定的接口<code>org/slf4j/impl/StaticLoggerBinder.class</code>的类，如果多余1个，则会抛出异常。</p><p>直接在自己的包中实现一个和Slf4j要求路径一样的类，实现对应的接口，然后就可以调用了。</p><p>例如Logback中，则实现了一个 org.slf4j.impl.StaticLoggerBinder 类，而这个类，在上面的Slf4j的LogFactory中直接被使用<code>StaticLoggerBinder.getSingleton();</code></p><p>Logback中StaticLoggerBinder如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package org.slf4j.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.status.StatusUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.ILoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.helpers.Util;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.spi.LoggerFactoryBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.util.ContextInitializer;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.util.ContextSelectorStaticBinder;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.CoreConstants;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.joran.spi.JoranException;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.util.StatusPrinter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticLoggerBinder</span> <span class="title">implements</span> <span class="title">LoggerFactoryBinder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StaticLoggerBinder</span> <span class="type">SINGLETON</span> = new <span class="type">StaticLoggerBinder</span>();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">SINGLETON</span>.<span class="keyword">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">LoggerContext</span> defaultLoggerContext = new <span class="type">LoggerContext</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ContextSelectorStaticBinder</span> contextSelectorBinder = <span class="type">ContextSelectorStaticBinder</span>.getSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StaticLoggerBinder</span>() &#123;</span><br><span class="line">        defaultLoggerContext.setName(<span class="type">CoreConstants</span>.<span class="type">DEFAULT_CONTEXT_NAME</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">StaticLoggerBinder</span> getSingleton() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">SINGLETON</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                new <span class="type">ContextInitializer</span>(defaultLoggerContext).autoConfig();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="type">JoranException</span> je) &#123;</span><br><span class="line">               ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">Throwable</span> t) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-输出日志模板解析"><a href="#2-输出日志模板解析" class="headerlink" title="2. 输出日志模板解析"></a>2. 输出日志模板解析</h4><p>关于logback.xml的解析工作，也是在初始化的时候完成的。</p><p>2.1 首先StaticLoggerBinder.init()会执行ContextInitializer的autoConfig():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoConfig</span><span class="params">()</span> <span class="keyword">throws</span> JoranException </span>&#123;</span><br><span class="line">            StatusListenerConfigHelper.installIfAsked(loggerContext);</span><br><span class="line">            URL url = findURLOfDefaultConfigurationFile(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                configureByResource(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureByResource</span><span class="params">(URL url)</span> <span class="keyword">throws</span> JoranException </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (urlString.endsWith(<span class="string">"groovy"</span>)) &#123;</span><br><span class="line">               ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlString.endsWith(<span class="string">"xml"</span>)) &#123;</span><br><span class="line">                JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">                configurator.setContext(loggerContext);</span><br><span class="line">                configurator.doConfigure(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 此后，会执行GenericConfigurator的下述doConfigure方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doConfigure</span><span class="params">(<span class="keyword">final</span> List&lt;SaxEvent&gt; eventList)</span> <span class="keyword">throws</span> JoranException </span>&#123;</span><br><span class="line">        buildInterpreter();</span><br><span class="line">        <span class="comment">// disallow simultaneous configurations of the same context</span></span><br><span class="line">        <span class="keyword">synchronized</span> (context.getConfigurationLock()) &#123;</span><br><span class="line">            interpreter.getEventPlayer().play(eventList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.3 紧接着，执行EventPlayer的play方法，解析xml：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void play(List&lt;SaxEvent&gt; aSaxEventList) &#123;</span><br><span class="line">       event<span class="class">List = aSaxEventList;</span></span><br><span class="line">       SaxEvent se;</span><br><span class="line">       for (currentIndex = 0; currentIndex &lt; eventList.size(); currentIndex++) &#123;</span><br><span class="line">           se = eventList.get(currentIndex);</span><br><span class="line"></span><br><span class="line">          <span class="built_in"> if </span>(se instanceof StartEvent) &#123;</span><br><span class="line">               interpreter.startElement((StartEvent) se);</span><br><span class="line">               //<span class="built_in"> invoke </span>fireInPlay after startElement processing</span><br><span class="line">               interpreter.getInterpretationContext().fireInPlay(se);</span><br><span class="line">           &#125;</span><br><span class="line">          <span class="built_in"> if </span>(se instanceof BodyEvent) &#123;</span><br><span class="line">               //<span class="built_in"> invoke </span>fireInPlay before characters processing</span><br><span class="line">               interpreter.getInterpretationContext().fireInPlay(se);</span><br><span class="line">               interpreter.characters((BodyEvent) se);</span><br><span class="line">           &#125;</span><br><span class="line">          <span class="built_in"> if </span>(se instanceof EndEvent) &#123;</span><br><span class="line">               //<span class="built_in"> invoke </span>fireInPlay before endElement processing</span><br><span class="line">               interpreter.getInterpretationContext().fireInPlay(se);</span><br><span class="line">               interpreter.endElement((EndEvent) se);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在 Logback 中，解析xml的工作，最后都是交给 Action 和其继承类来完成。在 Action 类中提供了三个方法begin、body和end三个方法，这三个抽象方法中：</p><ul><li>begin 方法负责处理ElementSelector元素的解析；</li><li>body 方法，一般为空，处理文本的；</li><li>end 方法则是处理模板解析的，所以我们的Logback.xml的模板解析实在end方法中。具体是在 NestedComplexPropertyIA类中来解析。其继承Action类，并且其会调用具体的模板解析工具类：PatternLayoutEncoder类和PatternLayout类。</li></ul><p>2.4 PatternLayoutEncoder会创建一个PatternLayout对象，然后获取到logback.xml中配置的模板字符串，即<code>[%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5p) %logger.%M\(%F:%L\)] %X{THREAD_ID} %msg%n</code>，如配置的节点名一样，其在代码中同样赋值给pattern变量。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PatternLayoutEncoder</span> <span class="keyword">extends</span> <span class="title">PatternLayoutEncoderBase&lt;ILoggingEvent&gt;</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void start() &#123;</span><br><span class="line">        <span class="type">PatternLayout</span> patternLayout = <span class="keyword">new</span> <span class="type">PatternLayout</span>();</span><br><span class="line">        patternLayout.setContext(context);</span><br><span class="line">        patternLayout.setPattern(getPattern());</span><br><span class="line">        patternLayout.setOutputPatternAsHeader(outputPatternAsHeader);</span><br><span class="line">        patternLayout.start();</span><br><span class="line">        <span class="keyword">this</span>.layout = patternLayout;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PatternLayoutEncoder会执行start()方法，然后调用相关方法对pattern进行解析，然后构建一个节点链表，保存这个链表会在日志输出的时使用到。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || pattern.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Parser&lt;E&gt; p = <span class="keyword">new</span> Parser&lt;E&gt;(pattern);</span><br><span class="line">        <span class="keyword">if</span> (getContext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.setContext(getContext());</span><br><span class="line">        &#125;</span><br><span class="line">        Node t = p.parse();</span><br><span class="line">        <span class="keyword">this</span>.head = p.compile(t, getEffectiveConverterMap());</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ScanException sce) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.5 Parse依次遍历pattern字符串，然后把符合要求的字符串放进tokenList中，这个list就维护了我们最终需要输出的模板的格式化模式了。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Parser(<span class="keyword">String</span> pattern, IEscapeUtil escapeUtil) throws ScanException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TokenStream ts = <span class="keyword">new</span> <span class="type">TokenStream</span>(pattern, escapeUtil);</span><br><span class="line">        <span class="built_in">this</span>.tokenList = ts.tokenize();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException npe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ScanException</span>(<span class="string">"Failed to initialize Parser"</span>, npe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.6 Compiler会将这个tokenList进行转换，成为我们需要的Node类型的拥有head 和 tail 的链表。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">ContextAwareBase</span> </span>&#123;</span><br><span class="line">     <span class="type">Converter</span>&lt;<span class="type">E</span>&gt; compile() &#123;</span><br><span class="line">        head = tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> n = top; n != <span class="literal">null</span>; n = n.next) &#123;</span><br><span class="line">            switch (n.<span class="keyword">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Node</span>.<span class="type">LITERAL</span>:</span><br><span class="line">                addToList(<span class="keyword">new</span> <span class="type">LiteralConverter</span>&lt;<span class="type">E</span>&gt;((<span class="type">String</span>) n.getValue()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Node</span>.<span class="type">COMPOSITE_KEYWORD</span>:</span><br><span class="line">                <span class="type">CompositeNode</span> cn = (<span class="type">CompositeNode</span>) n;</span><br><span class="line">                <span class="type">CompositeConverter</span>&lt;<span class="type">E</span>&gt; compositeConverter = createCompositeConverter(cn);</span><br><span class="line">                <span class="keyword">if</span> (compositeConverter == <span class="literal">null</span>) &#123;</span><br><span class="line">                    addError(<span class="string">"Failed to create converter for [%"</span> + cn.getValue() + <span class="string">"] keyword"</span>);</span><br><span class="line">                    addToList(<span class="keyword">new</span> <span class="type">LiteralConverter</span>&lt;<span class="type">E</span>&gt;(<span class="string">"%PARSER_ERROR["</span> + cn.getValue() + <span class="string">"]"</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                compositeConverter.setFormattingInfo(cn.getFormatInfo());</span><br><span class="line">                compositeConverter.setOptionList(cn.getOptions());</span><br><span class="line">                <span class="type">Compiler</span>&lt;<span class="type">E</span>&gt; childCompiler = <span class="keyword">new</span> <span class="type">Compiler</span>&lt;<span class="type">E</span>&gt;(cn.getChildNode(), converterMap);</span><br><span class="line">                childCompiler.setContext(context);</span><br><span class="line">                <span class="type">Converter</span>&lt;<span class="type">E</span>&gt; childConverter = childCompiler.compile();</span><br><span class="line">                compositeConverter.setChildConverter(childConverter);</span><br><span class="line">                addToList(compositeConverter);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Node</span>.<span class="type">SIMPLE_KEYWORD</span>:</span><br><span class="line">                <span class="type">SimpleKeywordNode</span> kn = (<span class="type">SimpleKeywordNode</span>) n;</span><br><span class="line">                <span class="type">DynamicConverter</span>&lt;<span class="type">E</span>&gt; dynaConverter = createConverter(kn);</span><br><span class="line">                <span class="keyword">if</span> (dynaConverter != <span class="literal">null</span>) &#123;</span><br><span class="line">                    dynaConverter.setFormattingInfo(kn.getFormatInfo());</span><br><span class="line">                    dynaConverter.setOptionList(kn.getOptions());</span><br><span class="line">                    addToList(dynaConverter);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// if the appropriate dynaconverter cannot be found, then replace</span></span><br><span class="line">                    <span class="comment">// it with a dummy LiteralConverter indicating an error.</span></span><br><span class="line">                    <span class="type">Converter</span>&lt;<span class="type">E</span>&gt; errConveter = <span class="keyword">new</span> <span class="type">LiteralConverter</span>&lt;<span class="type">E</span>&gt;(<span class="string">"%PARSER_ERROR["</span> + kn.getValue() + <span class="string">"]"</span>);</span><br><span class="line">                    addStatus(<span class="keyword">new</span> <span class="type">ErrorStatus</span>(<span class="string">"["</span> + kn.getValue() + <span class="string">"] is not a valid conversion word"</span>, <span class="keyword">this</span>));</span><br><span class="line">                    addToList(errConveter);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-日志输出分析"><a href="#3-日志输出分析" class="headerlink" title="3. 日志输出分析"></a>3. 日志输出分析</h4><p>前面部分进行了初始化配置，紧接着在<code>logger.info()</code>的时候，就可以根据初始化得到的Node链表head来解析，遇到%X的时候，从MDC中获取对应的key值，然后append到日志字符串中，然后输出。</p><p>3.1 Logger会执行buildLoggingEventAndAppend方法：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">Logger</span>, <span class="title">LocationAwareLogger</span>, <span class="title">AppenderAttachable</span>&lt;<span class="title">ILoggingEvent</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> filterAndLog_0_Or3Plus(<span class="keyword">final</span> String localFQCN, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> Level level, <span class="keyword">final</span> String msg, <span class="keyword">final</span> Object[] params,</span><br><span class="line">                        <span class="keyword">final</span> Throwable t) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> FilterReply decision = loggerContext.getTurboFilterChainDecision_0_3OrMore(marker, <span class="keyword">this</span>, level, msg, params, t);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (decision == FilterReply.NEUTRAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (effectiveLevelInt &gt; level.levelInt) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(decision == FilterReply.DENY)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            buildLoggingEventAndAppend(localFQCN, marker, level, msg, params, t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> buildLoggingEventAndAppend(<span class="keyword">final</span> String localFQCN, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> Level level, <span class="keyword">final</span> String msg, <span class="keyword">final</span> Object[] params,</span><br><span class="line">                        <span class="keyword">final</span> Throwable t) &#123;</span><br><span class="line">            LoggingEvent le = <span class="keyword">new</span> LoggingEvent(localFQCN, <span class="keyword">this</span>, level, msg, t, params);</span><br><span class="line">            le.setMarker(marker);</span><br><span class="line">            callAppenders(le);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">callAppenders</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> writes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Logger l = <span class="keyword">this</span>; l != <span class="keyword">null</span>; l = l.parent) &#123;</span><br><span class="line">            writes += l.appendLoopOnAppenders(event);</span><br><span class="line">            <span class="keyword">if</span> (!l.additive) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// No appenders in hierarchy</span></span><br><span class="line">        <span class="keyword">if</span> (writes == <span class="number">0</span>) &#123;</span><br><span class="line">            loggerContext.noAppenderDefinedWarning(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">appendLoopOnAppenders</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aai != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> aai.<span class="title">appendLoopOnAppenders</span><span class="params">(event)</span></span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2 继而调用OutputStreamAppender的append方法（由于配置文件配置的是Appender模式）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamAppender&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">UnsynchronizedAppenderBase&lt;E&gt;</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void append(<span class="type">E</span> eventObject) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subAppend(eventObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">protected</span> void subAppend(<span class="type">E</span> event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event instanceof <span class="type">DeferredProcessingAware</span>) &#123;</span><br><span class="line">                ((<span class="type">DeferredProcessingAware</span>) event).prepareForDeferredProcessing();</span><br><span class="line">            &#125;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writeOut(event);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> ioe) &#123;</span><br><span class="line">            <span class="keyword">this</span>.started = <span class="literal">false</span>;</span><br><span class="line">            addStatus(<span class="keyword">new</span> <span class="type">ErrorStatus</span>(<span class="string">"IO failure in appender"</span>, <span class="keyword">this</span>, ioe));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">protected</span> void writeOut(<span class="type">E</span> event) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.encoder.doEncode(event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.3 按照模板获取值然后转换成字节流输出到后台<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doEncode</span>(<span class="params">E <span class="keyword">event</span></span>) throws IOException </span>&#123;</span><br><span class="line">    String txt = layout.doLayout(<span class="keyword">event</span>);</span><br><span class="line">    outputStream.write(convertToBytes(txt));</span><br><span class="line">    <span class="keyword">if</span> (immediateFlush)</span><br><span class="line">        outputStream.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doLayout</span>(<span class="params">ILoggingEvent <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isStarted()) &#123;</span><br><span class="line">        <span class="keyword">return</span> CoreConstants.EMPTY_STRING;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> writeLoopOnConverters(<span class="keyword">event</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的head是上述2.4里面PatternLayoutEncoder里面start方法之中得到的。</span></span><br><span class="line"><span class="comment">// 这里输出就是按照解析后的链表进行分析输出的。然后根据c类型不同，获取字符串方法也不同</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">writeLoopOnConverters</span>(<span class="params">E <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">    Converter&lt;E&gt; c = head;</span><br><span class="line">    <span class="keyword">while</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">        c.write(buf, <span class="keyword">event</span>);</span><br><span class="line">        c = c.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在writeLoopOnConverters方法中，获取对应字符串是不同的，其根据不同的Converter，输出也不同。而Converter的判断，时就是根据我们配置的map映射来的。</p><p>3.4 MDCConverter的convert实现:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MDCConverter</span> <span class="keyword">extends</span> <span class="title">ClassicConverter</span> </span>&#123;</span><br><span class="line">    public <span class="type">String</span> convert(<span class="type">ILoggingEvent</span> event) &#123;</span><br><span class="line">        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; mdcPropertyMap = event.getMDCPropertyMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mdcPropertyMap == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> outputMDCForAllKeys(mdcPropertyMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> value = event.getMDCPropertyMap().get(key);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是LoggingEvent中的getMDCPropertyMap，可以看到转换类型是LogbackMDCAdapter。<br>因此，上述event.getMDCPropertyMap().get(key)就可以从LogbackMDCAdapter（MDC Logback实现）中调用get方法了。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, String&gt; getMDCPropertyMap() &#123;</span><br><span class="line">        // populate mdcPropertyMap <span class="keyword">if</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">mdcPropertyMap</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            MDCAdapter <span class="attr">mdc</span> = MDC.getMDCAdapter();</span><br><span class="line">            <span class="keyword">if</span> (mdc instanceof LogbackMDCAdapter)</span><br><span class="line">                <span class="attr">mdcPropertyMap</span> = ((LogbackMDCAdapter) mdc).getPropertyMap();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="attr">mdcPropertyMap</span> = mdc.getCopyOfContextMap();</span><br><span class="line">        &#125;</span><br><span class="line">        // mdcPropertyMap still <span class="literal">null</span>, use emptyMap()</span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">mdcPropertyMap</span> == <span class="literal">null</span>)</span><br><span class="line">            <span class="attr">mdcPropertyMap</span> = Collections.emptyMap();</span><br><span class="line"></span><br><span class="line">        return mdcPropertyMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>自此，伴随着从SLF4J到Logback的运行流程，介绍了Logback MDC的使用：</p><ul><li>从LoggerFactory.getLogger()讲起</li><li>初始化找到底层具体的实现接口</li><li>日志模板解析</li><li>logger.info()实际调用</li><li>日志输出（打印MDC对应key的value）</li></ul><h3 id="六、Reference"><a href="#六、Reference" class="headerlink" title="六、Reference"></a>六、Reference</h3><ul><li><a href="https://ketao1989.github.io/2015/04/29/LogBack-Implemention-And-Slf4j-Mdc/" target="_blank" rel="noopener">Slf4j MDC 使用和 基于 Logback 的实现分析</a></li><li><a href="http://www.importnew.com/16331.html" target="_blank" rel="noopener">Java日志终极指南</a></li><li><a href="https://my.oschina.net/dabird/blog/821868" target="_blank" rel="noopener">https://my.oschina.net/dabird/blog/821868</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;　　上一篇&lt;a href=&quot;http://zhangyuyu.github.io/2017/08/17/Log-Java%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java日志管理&lt;/a&gt;里面对Java相关的日志库进行了梳理，了解了常见的日志框架（Log Implement）和日志门面(Log Facade)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用日志门面，开发者只需要针对门面接口开发，而调用组件的应用程序则可以搭配自己喜好的日志实现工具，目前来看Slf4j + LogBack组合方式是比较通用的方式。&lt;/li&gt;
&lt;li&gt;对于web应用而言，多线程的调用是很常见的，我们可能需要对一个用户的操作流程进行归类标记，用来区分哪个行为和哪个日志事件有关，MDC则很好的处理这个需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本篇将介绍Slf4j + LogBack的组合方式，介绍MDC的使用，并结合源码对实现原理进行分析。&lt;/p&gt;
&lt;h3 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h3&gt;&lt;p&gt;　　起源于最近看到项目使用了MDC，好奇这是个什么东西的情况下，系统的了解了Java的日志管理，并借此机会分析其实现原理，记录下来，理清思路。&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Java日志管理</title>
    <link href="http://yoursite.com/2017/08/17/Log-Java%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/17/Log-Java日志管理/</id>
    <published>2017-08-17T11:53:47.000Z</published>
    <updated>2017-12-27T07:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>日志是所有软件系统非常重要的一部分；良好统一的日志规范和严格执行会大大提高系统的可维护性、可用性、可靠性，并进而提高开发效率，指导业务。</p><ul><li>过程监控－－通过分析程序的执行过程，用于验证程序的执行是否按照既定的方式运行。</li><li>问题定位－－通过查看程序错误日志的详细信息以及产生位置，迅速定位问题产生的原因。</li><li>业务指导，通过统计和分析相关的业务、用户行为日志，对业务进行预测指导。</li><li>数据恢复－－通过反向执行过程日志，可以将数据可以会滚到之前的状态。</li><li>健康检查以及系统优化－－通过查看系统日志，确定程序运行的健康状况，调节系统参数，优化程序性能。</li></ul><h3 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h3><p>猛地发现自己一直错误地把Sl4j和java.util.logging、Logback、Log4j理解为同一层次的概念。<br>继而查了相关的资料，站在更高一层，理解一下Java的日志管理相关的框架————Log4j、JUL、JCL、Slf4j、Logback 、Log4j2。</p><img src="/imgs/java-log-frameworks.png" width="500" height="350"><p>分为两个层次的概念：</p><ul><li>日志框架(Implement)：日志系统是日志的具体实现。如Log4j、java.util.Logging、Logback、Log4j2。</li><li>日志门面（Facade）：为了解决多个日志系统的兼容问题，日志门面应运而生。如Commons logging和Slf4j。</li></ul><a id="more"></a><h3 id="三、Java常见日志库的历史"><a href="#三、Java常见日志库的历史" class="headerlink" title="三、Java常见日志库的历史"></a>三、Java常见日志库的历史</h3><p>Logging frameworks出现之前（Java 1.3及以前），Java打日志依赖System.out.println()，System.err.println()或者e.printStackTrace()。Debug日志被写入STDOUT流,错误日志被写入STDERR流。</p><p>Logging frameworks的出现：<br>先来一幅图从整体上看一下Java常见日志库的时间先后顺序：<br><img src="/imgs/java-log-history.png" width="500" height="350"></p><h4 id="1-Log4j"><a href="#1-Log4j" class="headerlink" title="1. Log4j"></a>1. Log4j</h4><p>Log4j可以说是一个里程碑式的框架，它提出的一些基本理念，深深地影响了后来者，直至今天，这些理念也依然在被广泛使用：</p><ul><li>Logger－－Logger负责捕捉事件并将其发送给合适的Appender。</li><li>Appender－－也被称为Handler，负责将日志事件记录到目标位置。在将日志事件输出之前，Appenders使用Layouts来对事件进行格式化处理。</li><li>Layout－－也被称为Formatter，它负责对日志事件中的数据进行转换和格式化。Layouts决定了数据在一条日志记录中的最终形式。</li></ul><h4 id="2-Java-Util-Log"><a href="#2-Java-Util-Log" class="headerlink" title="2. Java Util Log"></a>2. Java Util Log</h4><p>Sun公司开始意识到JDK需要一个记录日志的特性。受Log4j的启发，Sun在Java 1.4版本中引入了一个新的API, 叫java.util.logging, 但是，JUL功能远不如Log4j完善，如果开发者要使用它，就意味着需要自己写Appenders(Sun称它为Handlers)，而且，只有两个Handlers可被使用：Console和File，这就意味着，开发者只能将日志写入Console和文件。</p><blockquote><p>如前面所述，JUL在Java 1.4才被引入，在这之前，并没有官方的日志库供开发者使用。于是便有了很多日志相关的”轮子”。我想这应该是当前会有如此多日志框架的一个很重要的原因。</p></blockquote><h4 id="3-Commons-Logging"><a href="#3-Commons-Logging" class="headerlink" title="3. Commons Logging"></a>3. Commons Logging</h4><p>由于项目的日志打印必然依赖以上两个框架中至少一个，无论是jul还是Log4j,开发者必须去两个都配置。这时候，Apache的Commons logging（Jakarta Commons Logging）出现了。<br>它的主要作用是提供一个日志门面，使用者可以使用不同的日志实现。用户可以自由选择第三方的日志组件作为具体实现（Log4j或JUL），JCL会通过动态查找的机制，在程序运行时自动找出真正使用的日志库。JCL内部有一个Simple logger的简单实现，但是功能很弱。</p><h4 id="4-Slf4j"><a href="#4-Slf4j" class="headerlink" title="4. Slf4j"></a>4. Slf4j</h4><p>JCL是在运行期间查找符合条件的日志类，然后使用类加载的方式加载指定的日志类。这种机制带来了不可预见的后果，如类加载问题，这会让开发者遇到各种奇怪的问题，增加了调试的困难度。<br>也正是因为如此，Log4j 的作者发起了另一个项目，也就是 Slf4j（Simple Logging Facade for JAVA）。<br>Slf4j 同 JCL类似，也是提供了一个公共的接口，开发者只需要关注接口，不用关心下层实现。同时 Slf4j 的实现只要遵循这个接口，就可以做到各个日志系统之间的无缝兼容。</p><h4 id="5-Logback"><a href="#5-Logback" class="headerlink" title="5. Logback"></a>5. Logback</h4><p>Logback是Slf4j接口的一套具体实现，又是同一个作者，因而保证了其和Log4j相近的使用方式，也具有Slf4j的全部特性。</p><p>现在我们有了两个流行的 Log Facade，以及三个流行的 Log Implementation。Gülcü 是个追求完美的人，他决定让这些Log之间都能够方便的互相替换，所以做了各种 Adapter 和 Bridge 来连接。<br><img src="/imgs/java-log-adapter-bridge1.png" width="500" height="350"></p><blockquote><p>在这里需要注意不能搞出循环的桥接，比如下面这些依赖就不能同时存在:</p><ul><li>jcl-over-slf4j 和 slf4j-jcl</li><li>log4j-over-slf4j 和 slf4j-log4j12</li><li>jul-to-slf4j 和 slf4j-jdk14</li></ul></blockquote><h4 id="6-Log4j2"><a href="#6-Log4j2" class="headerlink" title="6. Log4j2"></a>6. Log4j2</h4><p>Log4j2 是 Log4j、Slf4j、Logback 的作者的又一个作品，它对 Log4j 做了很大的改进，提供了多种现代特性，而且它的异步性能优越，在分布式系统中性能要远好于 Logback，同时也支持 Slf4j 与 JCL。<br>Log4j2 也做了 Facade/Implementation 分离的设计，分成了 log4j-api 和 log4j-core。</p><p>现在好了，我们有了三个流行的Log Facade和四个流行的Log Implementation，这时候桥接关系的图如下图：<br><img src="/imgs/java-log-adapter-bridge2.png" width="500" height="350"></p><h3 id="四、Java-日志框架对比"><a href="#四、Java-日志框架对比" class="headerlink" title="四、Java 日志框架对比"></a>四、Java 日志框架对比</h3><p>这里主要讲述一下几个日志框架（Log4j、JUL、Logback、Log4j2）的对比。</p><h4 id="1-Log4j-VS-JUL"><a href="#1-Log4j-VS-JUL" class="headerlink" title="1. Log4j VS JUL"></a>1. Log4j VS JUL</h4><ul><li><p>处理器<br>JUL包含4种具体的handler的实现，而Log4j则包括超过12个的appender实现。<br>JUL的handler足够用来进行基本的日志记录 - 他们允许你写入到一个buffer，一个console，一个socket，和一个file中。Log4j的appenders，另一方面，大概覆盖了所有logging输出目的地你可以想到的。他们可以写到NT日志或者Unix syslog中，或者甚至发送Email。</p></li><li><p>格式化器<br>JUL包含了两个格式化类：XMLFormatter和SimpleFormatter。Log4j包含了对应的布局器:XMLLayout和SimpleLayout.Log4j还提供了TTCCLayout，它格式化LoggingEvents到富内容字符串，和HTMLLayout，它可格式化LoggingEvent到HMTL表格中。</p></li></ul><h4 id="2-Logback-VS-Log4j"><a href="#2-Logback-VS-Log4j" class="headerlink" title="2. Logback VS Log4j"></a>2. Logback VS Log4j</h4><p>Logback当前分成三个模块：logback-core,logback- classic和logback-access:</p><ul><li>logback-core是其它两个模块的基础模块。</li><li>logback-classic是log4j的一个改良版本。此外logback-classic完整实现Slf4j API使你可以很方便地更换成其它日记系统如Log4j或JDK14 Logging。</li><li>logback-access访问模块与Servlet容器集成提供通过Http来访问日记的功能。 </li></ul><h4 id="3-Log4j2-VS-Logback"><a href="#3-Log4j2-VS-Logback" class="headerlink" title="3. Log4j2 VS Logback"></a>3. Log4j2 VS Logback</h4><p>Log4j2是Log4j的升级版，与之前的版本Log4j 1.x相比、有重大的改进，在修正了Logback固有的架构问题的同时，改进了许多Logback所具有的功能。log4j2与log4j1发生了很大的变化，不兼容。</p><ul><li><p>性能<br>由于采用了更先进的锁机制和LMAX Disruptor库，Log4j2的性能优于Logback，特别是在多线程环境下和使用异步日志的环境下。</p></li><li><p>垃圾<br>Log4j2实现了“无垃圾”和“低垃圾”模式。Log4j2在记录日志时，能够重用对象（如String等），尽可能避免实例化新的临时对象，减少因日志记录产生的垃圾对象，减少垃圾回收带来的性能下降。<br>Logback能够自动压缩/删除旧日志。</p></li><li><p>与Slf4j的适配<br>二者都能够适配Slf4j，Logback与Slf4j的适配应该会更好一些，毕竟省掉了一层适配库</p></li></ul><h3 id="五、Java-日志门面对比"><a href="#五、Java-日志门面对比" class="headerlink" title="五、Java 日志门面对比"></a>五、Java 日志门面对比</h3><p>这里主要对比一下日志门面Commons logging和Slf4j：</p><p>Common logging通过<em>动态查找</em>的机制，在程序运行时自动找出真正使用的日志库。由于它使用了ClassLoader寻找和载入底层的日志库， 导致了象OSGI这样的框架无法正常工作，因为OSGI的不同的插件使用自己的ClassLoader。 OSGI的这种机制保证了插件互相独立，然而却使Apache Common-Logging无法工作。</p><p>Slf4j在编译时<em>静态绑定</em>真正的Log库,因此可以在OSGI中使用。另外，Slf4j 支持参数化的log字符串，避免了之前为了减少字符串拼接的性能损耗而不得不写的if(logger.isDebugEnable())，现在你可以直接写：logger.debug(“current user is: {}”, user)。拼装消息被推迟到了它能够确定是不是要显示这条消息的时候，但是获取参数的代价并没有幸免。</p><h3 id="六、日志框架与日志门面组合"><a href="#六、日志框架与日志门面组合" class="headerlink" title="六、日志框架与日志门面组合"></a>六、日志框架与日志门面组合</h3><p>使用日志门面可以方便的切换具体的日志实现。而且如果依赖多个项目，使用了不同的Log Facade，还可以方便的通过Adapter 转接到同一个实现上。 因此为了考虑扩展性，一般我们在程序开发的时候，会选择使用commons-logging或者slf4j这些日志门面，而不是直接使用log4j或者logback这些实现。</p><p>以下是几种比较常见的日志方案组合：</p><h4 id="1-JCL-Log4j"><a href="#1-JCL-Log4j" class="headerlink" title="1. JCL + Log4j"></a>1. JCL + Log4j</h4><p>需要的jar包：</p><ul><li>commons-logging</li><li>log4j</li></ul><h4 id="2-Slf4j-Logback"><a href="#2-Slf4j-Logback" class="headerlink" title="2. Slf4j + Logback"></a>2. Slf4j + Logback</h4><p>需要的jar包：</p><ul><li>slf4j-api</li><li>logback-core</li><li>logback-classic(集成包)</li></ul><h4 id="3-Log4j2"><a href="#3-Log4j2" class="headerlink" title="3. Log4j2"></a>3. Log4j2</h4><p>Log4j2需要的jar分成2个：</p><ul><li>log4j-api： 作为日志接口层，用于统一底层日志系统</li><li>log4j-core : 作为上述日志接口的实现，是一个实际的日志框架</li></ul><h4 id="4-JCL-log4j2"><a href="#4-JCL-log4j2" class="headerlink" title="4. JCL + log4j2"></a>4. JCL + log4j2</h4><p>需要的jar包：</p><ul><li>commons-logging</li><li>log4j-api</li><li>log4j-core</li><li>log4j-jcl（log4j2与commons-logging的集成包）</li></ul><p>现在的方式JCL + Log4j组合在性能和部分功能上都比较弱，如果要改进可以考虑以下几点：</p><ul><li>考虑性能和占位符等功能方面<br>推荐slf4j + logback方式 或者log4j2方式，这种方式对现有系统迁移改动较大，无论是代码内log声明还是配置文件上，而且slf4j不支持fatal打印；</li><li>考虑系统迁移性<br>推荐commons-logging+log4j2,代码不需要改动，只需要改动对应log4j配置文件即可，但是无法利用其占位符功能；</li><li>新系统搭建<br>不涉及到系统迁移的情况，新系统搭建可以采用纯log4j2方式，其既提供了接口也提供了实现，在性能上也得到了比较大提升。</li></ul><h3 id="七、NDC、MDC、ThreadContext"><a href="#七、NDC、MDC、ThreadContext" class="headerlink" title="七、NDC、MDC、ThreadContext"></a>七、NDC、MDC、ThreadContext</h3><p>当处理多线程应用程序，特别是web服务时，跟踪事件可能会变得困难。当针对多个同时存在的多个用户生成日志记录时，你如何区分哪个行为和哪个日志事件有关呢？如何两个用户没有成功打开一个相同的文件，或者在同一时间没有成功登陆，那么怎么处理日志记录？你可能需要一种方式来将日志记录和程序中的唯一标示符关联起来，这些标识符可能是用户ID，会话ID或者设备ID。而这就是NDC、MDC以及ThreadContext的用武之地。</p><p>NDC、MDC和ThreadContext通过向单独的日志记录中添加独一无二的数据戳，来创建日志足迹（log trails）。这些数据戳也被称为鱼标记（fish tagging），我们可以通过一个或者多个独一无二的值来区分日志。这些数据戳在每个线程级别上进行管理，并且一直持续到线程结束，或者直到数据戳被删掉。例如，如果你的Web应用程序为每个用户生成一个新的线程，那么你可以使用这个用户的ID来标记日志记录。当你想在一个复杂的系统中跟踪特定的请求、事务或者用户，这是一种非常有用的方法。</p><h4 id="1-NDC"><a href="#1-NDC" class="headerlink" title="1. NDC"></a>1. NDC</h4><p>NDC或者嵌套诊断上下文（Nested Diagnostic Context）是基于栈的思想，信息可以被放到栈上或者从栈中移除。而栈中的值可以被Logger访问，并且Logger无需显示想日志方法中传入任何值。</p><ul><li>NDC.push()方法将值存储在栈中；</li><li>NDC.pop()方法将一些项从栈中移除；</li><li>NDC.remove()方法让Java回收内存，以免造成内存溢出。</li></ul><h4 id="2-MDC"><a href="#2-MDC" class="headerlink" title="2. MDC"></a>2. MDC</h4><p>MDC或者映射诊断上下文和NDC很相似，不同之处在于MDC将值存储在键值对中，而不是栈中。这样你可以很容易的在Layout中引用一个单独的键。</p><ul><li>MDC.put(key,value) 方法将一个新的键值对添加到上下文中；</li><li>MDC.remove(key) 方法会移除指定的键值对；</li><li>MDC.clear()方法将所有的键值对从MDC中移除，这样会降低内存的使用量，并阻止MDC在后面试图调用那些已经过期的数据。</li></ul><blockquote><p>Slf4j 只有 MDC，没有 NDC<br>Logback内置没有实现NDC，但是slf4j-ext包提供了一个NDC实现，它使用MDC作为基础。</p></blockquote><h4 id="3-ThreadContext"><a href="#3-ThreadContext" class="headerlink" title="3. ThreadContext"></a>3. ThreadContext</h4><blockquote><p>Log4j版本2中将MDC和NDC合并到一个单独的组件中，这个组件被称为ThreadContext(线程上下文)。</p></blockquote><p>ThreadContext可以看成是NDC和MDC的结合体，它分别用<code>Thread Context Stack</code>和<code>Thread Context Map</code>来表示<code>NDC</code>和<code>MDC</code>。</p><ul><li>ThreadContext.clearStack()，清除NDC；</li><li>ThreadContext.clearMap()，清除MDC；</li><li>ThreadContext.clearAll()，清除所有。</li></ul><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p>本文从日志的好处讲起，先总体上概述了日志相关库分为：日志框架和日志门面；然后按照时间顺序列举了这些日志常见库；随后对它们进行简单的对比；提出了几个常见的日之框架与日志门面的组合使用；最后提到了NDC、MDC、ThreadContext的概念为<a href="http://zhangyuyu.github.io/2017/08/17/Log-Slf4j%20MDC%20%E4%BD%BF%E7%94%A8%E5%92%8C%E5%9F%BA%E4%BA%8E%20Logback%E7%9A%84%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">下一篇文章</a>提供一点理论基础。<br>针对每个库更详细的特性或者具体的使用步骤，大家可以自行去对应的官网查看。</p><h3 id="九、Reference"><a href="#九、Reference" class="headerlink" title="九、Reference"></a>九、Reference</h3><ul><li><a href="http://patchouli-know.com/2017/04/08/java-log/" target="_blank" rel="noopener">Java 日志系统梳理</a></li><li><a href="http://group.jobbole.com/30249/" target="_blank" rel="noopener">聊一聊那些年我们用过的 Java 日志框架</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-practicelog/" target="_blank" rel="noopener">Java 日志管理最佳实践</a></li><li><a href="http://blog.csdn.net/yycdaizi/article/details/8276265" target="_blank" rel="noopener">Java日志组件介绍</a></li><li><a href="http://blog.csdn.net/gaojiaweir0011/article/details/8217604" target="_blank" rel="noopener">Log4j 对比 java.util.logging</a></li><li><a href="http://dev.sei.pku.edu.cn/trac/pkuas/blog/2011/04/06/zhanglei09/my_topic" target="_blank" rel="noopener">Log4J与Java Logging调研</a></li><li><a href="http://tech.lede.com/2017/02/06/rd/server/log4jSearch/" target="_blank" rel="noopener">日志工具现状调研</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-usertrack/index.html" target="_blank" rel="noopener">在Web 应用中增加用户跟踪功能</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;日志是所有软件系统非常重要的一部分；良好统一的日志规范和严格执行会大大提高系统的可维护性、可用性、可靠性，并进而提高开发效率，指导业务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程监控－－通过分析程序的执行过程，用于验证程序的执行是否按照既定的方式运行。&lt;/li&gt;
&lt;li&gt;问题定位－－通过查看程序错误日志的详细信息以及产生位置，迅速定位问题产生的原因。&lt;/li&gt;
&lt;li&gt;业务指导，通过统计和分析相关的业务、用户行为日志，对业务进行预测指导。&lt;/li&gt;
&lt;li&gt;数据恢复－－通过反向执行过程日志，可以将数据可以会滚到之前的状态。&lt;/li&gt;
&lt;li&gt;健康检查以及系统优化－－通过查看系统日志，确定程序运行的健康状况，调节系统参数，优化程序性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h3&gt;&lt;p&gt;猛地发现自己一直错误地把Sl4j和java.util.logging、Logback、Log4j理解为同一层次的概念。&lt;br&gt;继而查了相关的资料，站在更高一层，理解一下Java的日志管理相关的框架————Log4j、JUL、JCL、Slf4j、Logback 、Log4j2。&lt;/p&gt;
&lt;img src=&quot;/imgs/java-log-frameworks.png&quot; width=&quot;500&quot; height=&quot;350&quot;&gt;
&lt;p&gt;分为两个层次的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志框架(Implement)：日志系统是日志的具体实现。如Log4j、java.util.Logging、Logback、Log4j2。&lt;/li&gt;
&lt;li&gt;日志门面（Facade）：为了解决多个日志系统的兼容问题，日志门面应运而生。如Commons logging和Slf4j。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Docker Workshop（六）Docker安全</title>
    <link href="http://yoursite.com/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2017/07/20/Docker-workshop-6-Docker安全/</id>
    <published>2017-07-20T06:49:15.000Z</published>
    <updated>2018-05-27T09:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p><a href="http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">上一篇 Docker网络</a>主要讲述了网络模型、网络模式。<br>本篇将讲述Docker安全性体现在哪些方面，并探讨每个方面的最佳实践。</p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　该系列《Docker in Prodcution》内容包含如下部分：</p><ul><li><a href="http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">容器简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Docker简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Docker的基本操作</a></li><li><a href="http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">Docker数据存储</a></li><li><a href="http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">Docker网络</a></li><li><strong>Docker安全</strong></li><li>多主机部署</li><li>服务发现</li><li>日志、跟踪、监控</li></ul><h2 id="三、Docker访问主机系统"><a href="#三、Docker访问主机系统" class="headerlink" title="三、Docker访问主机系统"></a>三、Docker访问主机系统</h2><p>很多时候，我们启动Docker容器时都以root用户权限在运行。那么，如果有ROOT权限可以做什么呢？当然可以做很多的事情，比如：访问所有信息、修改任何内容、关闭机器、结束进程以及安装各种软件等。<br><a id="more"></a></p><h3 id="【练习】访问主机系统"><a href="#【练习】访问主机系统" class="headerlink" title="【练习】访问主机系统"></a>【练习】访问主机系统</h3><p>1）主机上访问文件系统</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/shadow  # 使用普通用户访问</span><br><span class="line">cat: /etc/shadow: Permission denied</span><br><span class="line">$ who am i<span class="comment">; groups;  # 查看当前的用户和组</span></span><br><span class="line">vagrant  pts/<span class="number">0</span>        <span class="number">2017-09-14</span> <span class="number">08</span>:<span class="number">08</span> (<span class="number">10.0.2.2</span>)</span><br><span class="line">vagrant docker</span><br><span class="line">$ sudo cat /etc/shadow  # 使用root用户访问</span><br><span class="line">root:$<span class="number">6</span>$HmunRCSU$YXNgfbnj2AQVtJS8DWFqb2ZxXIFGp3eRXMbXtuF9XUfgkAD1X8o2cQxBK6SHEH/K6D77PYMuv9p7rVtjAFfmh<span class="number">0:16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">daemon:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">bin:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">sys:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">sync:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">games:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">man:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2) Docker容器里访问文件系统</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v /:/hostfs busybox cat /hostfs/etc/shadow</span><br><span class="line">root:$<span class="number">6</span>$HmunRCSU$YXNgfbnj2AQVtJS8DWFqb2ZxXIFGp3eRXMbXtuF9XUfgkAD1X8o2cQxBK6SHEH/K6D77PYMuv9p7rVtjAFfmh<span class="number">0:16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">daemon:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">bin:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">sys:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">sync:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">games:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">man:*:<span class="number">16744:0</span>:<span class="number">99999:7</span>:::</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看出只有root用户才能访问上面的文件。而Docker容器是用root权限运行的，所以在docker group下的用户间接地就有了root权限，也就可以访问到上述文件了。</p><p>3）Docker容器里修改主机文件系统</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls / | grep threat</span><br><span class="line">$ docker <span class="built_in">run</span> -<span class="keyword">it</span> -v /:/hostfs busybox touch /hostfs/threat-<span class="keyword">on</span>-<span class="keyword">the</span>-way</span><br><span class="line">$ ls / | grep threat</span><br><span class="line">threat-<span class="keyword">on</span>-<span class="keyword">the</span>-way</span><br></pre></td></tr></table></figure><p>可以看到，在Docker容器中创建的文件出现在了宿主机中，即在Docker容器中能够修改主机文件系统。</p><p>更严重的时，如果是 Privileged 容器，即在运行容器时指定–privileged=true参数，则能够允许容器所有设备执行任意操作，能够读写内核内存/proc/kcore，使用参数–net=host可以嗅探主机所有网络流量。</p><p>4）查看Docker容器和Metadata在宿主机上存储的地址</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ll /var/lib/docker/</span><br><span class="line">total 84</span><br><span class="line">drwxr-xr-x  <span class="number"> 9 </span>root root <span class="number"> 4096 </span>Sep<span class="number"> 14 </span>12:24 ./</span><br><span class="line">drwxr-xr-x <span class="number"> 52 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 22 </span><span class="number"> 2015 </span>../</span><br><span class="line">drwxr-xr-x  <span class="number"> 5 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 22 </span><span class="number"> 2015 </span>aufs/</span><br><span class="line">drwx------  <span class="number"> 8 </span>root root <span class="number"> 4096 </span>Sep<span class="number"> 14 </span>12:24 containers/</span><br><span class="line">drwx------<span class="number"> 259 </span>root root<span class="number"> 36864 </span>Sep<span class="number"> 14 </span>08:10 graph/</span><br><span class="line">-rw-r--r--  <span class="number"> 1 </span>root root <span class="number"> 5120 </span>Sep<span class="number"> 14 </span>12:24 linkgraph.db</span><br><span class="line">drwxr-x---  <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 22 </span><span class="number"> 2015 </span>network/</span><br><span class="line">-rw-------  <span class="number"> 1 </span>root root <span class="number"> 2116 </span>Sep<span class="number"> 14 </span>08:14 repositories-aufs</span><br><span class="line">drwx------  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Sep<span class="number"> 14 </span>08:10 tmp/</span><br><span class="line">drwx------  <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 22 </span><span class="number"> 2015 </span>trust/</span><br><span class="line">drwx------  <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Sep<span class="number"> 14 </span>08:08 volumes/</span><br></pre></td></tr></table></figure><p>运行态容器默认都是使用/var/lib/docker目录，容器内部写日志、产生运行时数据等都会影响该目录，并且产生的文件越来越多，占用空间越来越大，因此需要定期清理无用的镜像和容器。可以用Logical Volume Manager (LVM)为Docker挂载点/var/lib/docker创建单独的分区，最好是SSD盘。</p><h2 id="四、Docker的安全性"><a href="#四、Docker的安全性" class="headerlink" title="四、Docker的安全性"></a>四、Docker的安全性</h2><p>Docker的安全性主要体现在如下几个方面：</p><ul><li><a href="4-1.Docker容器的安全性">Docker容器的安全性</a></li><li><a href="4-2.镜像的安全性">镜像的安全性</a></li><li><a href="4-3.Docker daemon的安全性">Docker daemon的安全性</a></li></ul><h3 id="4-1-Docker容器的安全性"><a href="#4-1-Docker容器的安全性" class="headerlink" title="4-1.Docker容器的安全性"></a>4-1.Docker容器的安全性</h3><p>指容器是否会危害到宿主机或其他容器。<br>容器的安全性问题的根源在于容器和宿主机共用内核，因此受攻击的面特别大，另外，如果容器里的应用导致Linux内核崩溃，那么毫无疑问，整个系统哥都会崩溃。这一点与虚拟机是不同的，虚拟机与宿主机的接口非常有限，而且虚拟机崩溃一般不会导致宿主机崩溃。</p><h3 id="4-2-镜像的安全性"><a href="#4-2-镜像的安全性" class="headerlink" title="4-2.镜像的安全性"></a>4-2.镜像的安全性</h3><p>用户如何确保下载下来的镜像是可信的、未被篡改过的；</p><h3 id="4-3-Docker-daemon的安全性"><a href="#4-3-Docker-daemon的安全性" class="headerlink" title="4-3.Docker daemon的安全性"></a>4-3.Docker daemon的安全性</h3><p>如何确保发送给daemon的命令是由可信用户发起的。用户通过CLI或者REST API向daemon发送命令已完成对容器的各种操作，例如通过docker exec命令删除容器里的数据，因此需要保证client与daemon的连接时可信的。</p><h2 id="五、Docker安全最佳实践"><a href="#五、Docker安全最佳实践" class="headerlink" title="五、Docker安全最佳实践"></a>五、Docker安全最佳实践</h2><h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><ul><li>保持内核及时更新，防止黑客利用未修复的漏洞进行攻击</li><li>增强主机安全保护，如果主机不安全了，容器也就谈不上安全了</li><li>保持Docker及时更新，特别要关注Docker安全相关方面的更新</li></ul><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul><li>在Dockerfile中为容器创建一个非root用户</li><li>以非root用户运行容器进程，最大程度控制用户的权限范围</li><li>只使用受信的基础镜像，可由最小基础镜像开始(Busybox, Alpine)，最好是建立本地仓库镜像</li><li>仅安装必要的包，因为可能有些包会有漏洞，一定程度上降低风险</li><li>重新构建镜像时需要包含安全补丁，防止黑客利用漏洞实施攻击</li></ul><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><ul><li>只允许受信用户控制Docker守护进程，保证与Daemon的连接是可信的</li><li>不使用不受信的镜像仓库，因为镜像可能会被篡改过</li><li>必要时请为Docker守护进程应用 TLS 认证网络</li><li>限制容器之间的网络通信，如果两个容器之间没有通信的必要就限制其网络通信功能</li></ul><h3 id="容器运行时"><a href="#容器运行时" class="headerlink" title="容器运行时"></a>容器运行时</h3><ul><li>不要到产品环境中使用任何开发者工具(boot2docker, kinematic)</li><li>限制容器使用Linux内核能力和资源使用，为守护进程设置受限的控制资源权限(–ulimit)</li><li>不要使用 Privileged 容器，如果使用–privileged参数将授予容器与主机几乎相同的权限</li><li>指定容器重启策略为on-failure，重启策略(Restart policies)有四种：<code>no</code>、<code>on-failure</code>、<code>always</code>、<code>unless-stopped</code>。</li><li>使用强制权限控制系统 AppArmor 和 Linux安全增强工具 SELinux 保证额外的安全层</li></ul><p>更多详情，可以参考<a href="https://learn.cisecurity.org/benchmarks" target="_blank" rel="noopener">Security Benchmarks</a>制定的容器的安全基准。下面截取了其中的一部分目录：<br><img src="/imgs/docker-security-host.png" width="500" height="250"></p><center>主机</center><br><br><br><img src="/imgs/docker-security-images.png" width="500" height="250"><br><center>镜像</center><br><br><br><img src="/imgs/docker-security-daemon.png" width="500" height="250"><br><center>守护进程</center><br><br><br><img src="/imgs/docker-security-container-runtime.png" width="500" height="250"><br><center>容器运行时</center><h3 id="六、构建容器平台时候的安全问题"><a href="#六、构建容器平台时候的安全问题" class="headerlink" title="六、构建容器平台时候的安全问题"></a>六、构建容器平台时候的安全问题</h3><p>上面说到的安全问题基本上是容器自身的，就是单独去考虑一个容器时，容器自身的一个安全性的问题。那么，当我们构建一个云平台的时候，这时容器是大量的，也可能是多租户的，特别是公有云，用户上传上来的应用是否安全，在这种情况下，怎么来去考虑一个容器平台的安全问题。可以从四个方面：</p><ul><li>基础架构层安全</li><li>容器调度层安全</li><li>容器调度层安全</li><li>容器调度层安全</li></ul><p>我们可以采取的一些措施：</p><ul><li>建立容器云平台的安全基线</li><li>容器 CI/CD 过程加密验证</li><li>加强平台的权限访问控制或者 API 密钥管理</li><li>加强容器的安全测试及渗透测试</li><li>加强安全漏洞扫</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇文章主要列举了一些Docker安全的最佳实践，并没有做过多的解释，具体情况还需要结合具体的项目实践。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.freebuf.com/articles/system/69809.html" target="_blank" rel="noopener">浅谈Docker隔离性和安全性</a></li><li><a href="https://segmentfault.com/a/1190000005794220" target="_blank" rel="noopener">Docker安全</a></li><li><a href="https://mp.weixin.qq.com/s/IN_JJhg_oG7ILVjNj-UexA" target="_blank" rel="noopener">绝不避谈 Docker 安全</a></li><li><a href="http://securityer.lofter.com/post/1d0f3ee7_d4e69b1" target="_blank" rel="noopener">如何打造安全的容器云平台</a></li><li><a href="http://www.10tiao.com/html/167/201707/2650762256/2.html" target="_blank" rel="noopener">从自身漏洞与架构缺陷，谈Docker安全建设</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇 Docker网络&lt;/a&gt;主要讲述了网络模型、网络模式。&lt;br&gt;本篇将讲述Docker安全性体现在哪些方面，并探讨每个方面的最佳实践。&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　该系列《Docker in Prodcution》内容包含如下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;容器简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker的基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker数据存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker安全&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多主机部署&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;日志、跟踪、监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、Docker访问主机系统&quot;&gt;&lt;a href=&quot;#三、Docker访问主机系统&quot; class=&quot;headerlink&quot; title=&quot;三、Docker访问主机系统&quot;&gt;&lt;/a&gt;三、Docker访问主机系统&lt;/h2&gt;&lt;p&gt;很多时候，我们启动Docker容器时都以root用户权限在运行。那么，如果有ROOT权限可以做什么呢？当然可以做很多的事情，比如：访问所有信息、修改任何内容、关闭机器、结束进程以及安装各种软件等。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Workshop（五）Docker网络</title>
    <link href="http://yoursite.com/2017/07/17/Docker-workshop-5-Docker%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2017/07/17/Docker-workshop-5-Docker网络/</id>
    <published>2017-07-17T14:50:23.000Z</published>
    <updated>2018-05-27T09:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">上一篇 Docker的数据存储</a>主要讲述Docker数据管理的两种方式：数据卷和数据卷容器。<br>本篇主要讲述网络的实现、网络模型、网络模式等相关知识。</p><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　该系列《Docker in Prodcution》内容包含如下部分：</p><ul><li><a href="http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">容器简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Docker简介</a></li><li><a href="http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Docker的基本操作</a></li><li><a href="http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">Docker数据存储</a></li><li><strong>Docker网络</strong></li><li><a href="http://zhangyuyu.github.io/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">Docker安全</a></li><li>多主机部署</li><li>服务发现</li><li>日志、跟踪、监控</li></ul><h2 id="三、网络的实现"><a href="#三、网络的实现" class="headerlink" title="三、网络的实现"></a>三、网络的实现</h2><p>　　Docker现有的网络模型主要是通过使用Network namespace、Linux Bridge、Iptables、veth pair等技术实现的。<br><a id="more"></a></p><ul><li>Network namespace（网络命名空间）<br>　　Network namespace主要提供了关于网络资源的隔离，包括网络设备、IPv4和IPv6协议栈、IP路由表、防火墙、/proc/net目录、/sys/class/net目录、端口（socket）等。</li><li>Linux Bridge<br>　　功能相当于物理交换机，为连在其上的设备（容器）转发数据帧。如docker0网桥。</li><li>Iptables<br>　　主要为容器提供NAT以及容器网络安全。</li><li>veth pair（虚拟网络设备）<br>　　两个虚拟网卡组成的数据通道。在Docker中，用于连接Docker容器和Linux Bridge。一端在容器中作为eth0网卡，另一端在Linux Bridge中作为网桥的一个端口。</li></ul><h2 id="四、网络创建过程"><a href="#四、网络创建过程" class="headerlink" title="四、网络创建过程"></a>四、网络创建过程</h2><img src="/imgs/docker-network-implement.png" width="500" height="250"><p>　　Docker创建一个容器的时候，会具体执行如下操作：</p><ul><li>创建一对虚拟接口，即veth pair，分别放到宿主机和容器中;</li><li>本地主机一端的虚拟接口，连接到默认的docker0网桥或指定网桥上，并具有一个以veth开头的唯一的名字，如veth0ac844e;</li><li>容器一端的虚拟接口，将放到新容器中，并修改名字为eth0，该接口只在容器的命名空间可见;</li><li>从网桥可用地址段中获取一个空闲地址分配给容器的eth0（例如172.17.0.2/16），并配置默认路由网关为dokcer0的IP地址。</li></ul><p>　　完成这些配置之后，该容器就可以使用eth0虚拟网卡来连接其它容器和访问外部网络了。<br>　　当该容器结束后，Docker会清空容器，容器内的网络接口eth0会随网络命名空间一起被清除，veth0ac844e接口也被自动从docker0卸载。</p><p>　　另外，可以在docker运行的时候通过–net参数指定容器的网络配置，有<a href="#1-单节点网络模式">四个可选值</a>。</p><h3 id="【练习1】网络创建细节"><a href="#【练习1】网络创建细节" class="headerlink" title="【练习1】网络创建细节"></a>【练习1】网络创建细节</h3><p>1）启动一个 /bin/bash 容器，指定 –net=none 参数</p><pre><code>$ sudo docker run -i -t --rm --net=none busybox /bin/sh</code></pre><p>2) 在<code>本地主机</code>查找容器的进程 id，并为它创建网络命名空间。</p><pre><code>$ sudo docker inspect -f &apos;{{.State.Pid}}&apos; 5259b04d2a502559$ pid=2559$ sudo mkdir -p /var/run/netns$ sudo ln -s /proc/$pid/ns/net /var/run/netns/$pid</code></pre><p>3）查看网桥docker0分配的子网段</p><pre><code>$ ip addr show docker06: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default    link/ether 02:42:89:d3:35:32 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:89ff:fed3:3532/64 scope link       valid_lft forever preferred_lft forever</code></pre><p>4) 创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 docker0，并启用它</p><pre><code>$ sudo ip link add A type veth peer name B$ sudo brctl addif docker0 A$ sudo ip link set A up</code></pre><p>5）将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关</p><pre><code>$ sudo ip link set B netns $pid$ sudo ip netns exec $pid ip link set dev B name eth0$ sudo ip netns exec $pid ip link set eth0 up$ sudo ip netns exec $pid ip addr add 172.17.42.1/16 dev eth0$ sudo ip netns exec $pid ip route add default via 172.17.0.1</code></pre><p>6) 其他指令</p><pre><code># 查看网桥docker0上的虚拟接口$ brctl showbridge name bridge id       STP enabled interfacesbr-fe42067d4b8f     8000.0242987a3884   nodocker0     8000.024289d33532   no      veth76e4a32lxcbr0      8000.000000000000   no# 查看网桥docker0的生成树状态$ brctl show docker0bridge name bridge id       STP enabled interfacesdocker0     8000.024289d33532   no      veth76e4a32# 查看网桥docker0的网卡驱动类型$ ethtool -i docker0driver: bridgeversion: 2.3firmware-version: N/Abus-info: N/Asupports-statistics: nosupports-test: nosupports-eeprom-access: nosupports-register-dump: nosupports-priv-flags: no# 查看该网络接口的唯一识别编号peer_ifindex$ ethtool -S veth76e4a32NIC statistics:     peer_ifindex: 7# 查看路由信息$ sudo iptables -LChain INPUT (policy ACCEPT)target     prot opt source               destinationACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domainACCEPT     udp  --  anywhere             anywhere             udp dpt:domainACCEPT     tcp  --  anywhere             anywhere             tcp dpt:bootpsACCEPT     udp  --  anywhere             anywhere             udp dpt:bootpsChain FORWARD (policy ACCEPT)target     prot opt source               destinationDROP       all  --  172.18.0.0/16        172.17.0.0/16DROP       all  --  172.17.0.0/16        172.18.0.0/16DOCKER     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHEDACCEPT     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhereDOCKER     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHEDACCEPT     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhereACCEPT     all  --  anywhere             anywhereChain OUTPUT (policy ACCEPT)target     prot opt source               destinationChain DOCKER (2 references)target     prot opt source               destinationACCEPT     tcp  --  anywhere             172.17.0.2           tcp dpt:5000</code></pre><h2 id="五、网络模型"><a href="#五、网络模型" class="headerlink" title="五、网络模型"></a>五、网络模型</h2><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><p>　　在容器网络模型中，通常会包括容器(Container)、沙箱(Sandbox)、端点(Endpoint)、网络(Network)等组件，其中，网络会涉及桥接网(Bridge Network)或重叠网(Overlay Network)。<br><img src="/imgs/docker-network-concept.png" width="500" height="250"></p><ul><li>容器(Container): 容器能够作为任意一个或多个网络的一部分，能够同时对接桥接网和重叠网网络。</li><li>沙箱(Sandbox): 包含容器网络堆栈配置信息，是一个隔离的环境，可能包含多网络的多个端点。</li><li>端点(Endpoint): 连接沙箱和网络的接口，绑定到特定的网络，比如之前提到的veth pair。</li><li>网络(Network): 使得一组端点之间能够相互直接交流的，实现可以是Linux网桥或重叠</li></ul><h3 id="与Docker-Links对比"><a href="#与Docker-Links对比" class="headerlink" title="与Docker Links对比"></a>与Docker Links对比</h3><p>与Docker Links进行简单对比，Docker Links允许容器之间互相发现，并使用容器名作为别名进行互相之间的通信，比DNS或服务发现更容易使用，且不用关心端口映射，但Docker Links有一些限制，比如:</p><ul><li>只能在同一宿主机内使用，不能跨主机</li><li>重新创建容器会移除之前的链接(Links)</li><li>被链接的容器必须是一个已经启动的容器<br>因此，在Docker 1.9版本之后，官方推荐使用Docker网络功能代替Docker Links。Docker容器网络模型的主要优势在于:</li><li>在某个特定网络下的所有容器能自由地相互通信</li><li>多个网络有助于分散容器之间的流量传输</li><li>多个端点允许一个容器加入到多个网络中</li><li>能够支持同主机和跨主机的容器间通信</li></ul><h2 id="四、Docker网络模式"><a href="#四、Docker网络模式" class="headerlink" title="四、Docker网络模式"></a>四、Docker网络模式</h2><p><a href="#1-单节点网络模式">1. 单节点网络模式</a></p><ul><li><a href="#1-1.bridge模式">bridge模式</a></li><li><a href="#1-2.host模式">host模式</a></li><li><a href="#1-3.container模式">container模式</a> </li><li><a href="#1-4.none模式">none模式</a></li></ul><p><a href="#2-多节点网络模式">2. 多节点网络模式</a></p><ul><li><a href="#2-1.原生支持">原生支持</a></li><li><a href="#2-2.插件">插件</a></li></ul><h3 id="1-单节点网络模式"><a href="#1-单节点网络模式" class="headerlink" title="1-单节点网络模式"></a>1-单节点网络模式</h3><h4 id="1-1-bridge模式"><a href="#1-1-bridge模式" class="headerlink" title="1-1.bridge模式"></a>1-1.bridge模式</h4><p>使用–net=bridge指定<br>该模式中，Docker守护进程创建一个虚拟以太网桥docker0，附加在其上的任何网卡之间都能自动转发数据包。默认情况下，守护进程会创建一对对等接口，将其中一个接口设置为容器的eth0接口，另一个接口放置在宿主机的命名空间中，从而将宿主机上的所有容器都连接到这个内部网络上。同时，守护进程还会从网桥的私有地址空间中分配一个IP地址和子网给该容器。</p><h4 id="1-2-host模式"><a href="#1-2-host模式" class="headerlink" title="1-2.host模式"></a>1-2.host模式</h4><p>使用–net=host指定<br>该模式将禁用Docker容器的网络隔离。因为容器共享了宿主机的网络命名空间，直接暴露在公共网络中。因此，你需要通过端口映射（port mapping）来进行协调。</p><p>当使用host模式网络时，容器实际上继承了宿主机的IP地址。该模式比bridge模式更快（因为没有路由开销），但是它将容器直接暴露在公共网络中，是有安全隐患的。</p><h4 id="1-3-container模式"><a href="#1-3-container模式" class="headerlink" title="1-3.container模式"></a>1-3.container模式</h4><p>使用–net=container指定<br>该模式会重用另一个容器的网络命名空间。通常来说，当你想要自定义网络栈时，该模式是很有用的。实际上，该模式也是Kubernetes使用的网络模式。</p><h4 id="1-4-none模式"><a href="#1-4-none模式" class="headerlink" title="1-4.none模式"></a>1-4.none模式</h4><p>使用–net=none指定<br>该模式将容器放置在它自己的网络栈中，但是并不进行任何配置。实际上，该模式关闭了容器的网络功能，在以下两种情况下是有用的：容器并不需要网络（例如只需要写磁盘卷的批处理任务）；你希望自定义网络。</p><p>####【练习2】单主机创建网络<br>1) 创建<code>web</code>网络，并创建一个基于<code>web</code>网络的容器<code>web_container</code></p><pre><code>$ docker network create weba3f32cf362412ca10cc375c0cbf304c15b1cfd2a0da6addb97ef3606bcb04350$ docker network lsNETWORK ID          NAME                DRIVER134b9d559a29        host                host20d10cc6ad42        bridge              bridgea3f32cf36241        web                 bridgee7f9d75e45b8        none                null$ docker run -itd --net=web --name web_container busyboxfdec55f5db5da821825fe5b091e69e248f8f346273a9397ea66a931b4c26bb7f$ docker network inspect web[    {        &quot;Name&quot;: &quot;web&quot;,        &quot;Id&quot;: &quot;a3f32cf362412ca10cc375c0cbf304c15b1cfd2a0da6addb97ef3606bcb04350&quot;,        &quot;Scope&quot;: &quot;local&quot;,        &quot;Driver&quot;: &quot;bridge&quot;,        &quot;IPAM&quot;: {            &quot;Driver&quot;: &quot;default&quot;,            &quot;Config&quot;: [                {}            ]        },        &quot;Containers&quot;: {            &quot;fdec55f5db5da821825fe5b091e69e248f8f346273a9397ea66a931b4c26bb7f&quot;: {                &quot;EndpointID&quot;: &quot;67b284bcef2544ec153c90e041c7d51351d5f2cea63e31537352e37ac8fb1fe6&quot;,                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            }        },        &quot;Options&quot;: {}    }]</code></pre><p>2） 重复操作<code>1）</code>，创建另外一个基于<code>app</code>网络的容器</p><pre><code>$ docker network create app$ docker network lsNETWORK ID          NAME                DRIVER20d10cc6ad42        bridge              bridgea3f32cf36241        web                 bridgee7f9d75e45b8        none                null134b9d559a29        host                host73eda6fce093        app                 bridge$ docker run -itd --name app_container --net=app busybox$ docker network inspect app</code></pre><p>3) 连接<code>web_container</code>到<code>app</code>网络</p><pre><code>$ docker network connect app web_container</code></pre><p>这样<code>web_container</code>就可以通过<code>web_container.app</code>连接<code>app</code>网络了:</p><pre><code>$ docker exec app_container ping web_container.appPING web_container.app (172.19.0.3): 56 data bytes64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.118 ms64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.080 ms</code></pre><p>4) 连接<code>app_container</code>到<code>web</code>网络</p><pre><code># 连接之前：$ docker exec web_container ping app_container.webping: bad address &apos;app_container.web&apos;# 连接$ docker network connect web app_container# 连接之后$ docker exec web_container ping app_container.webPING app_container.web (172.18.0.3): 56 data bytes64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.219 ms64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.111 ms</code></pre><p>5) 查看网络信息</p><ul><li><p>查看连接之后web网络的containers里面就有两个container了</p><p>  $ docker network inspect web<br>  [</p><pre><code>{    &quot;Name&quot;: &quot;web&quot;,    &quot;Id&quot;: &quot;a3f32cf362412ca10cc375c0cbf304c15b1cfd2a0da6addb97ef3606bcb04350&quot;,    &quot;Scope&quot;: &quot;local&quot;,    &quot;Driver&quot;: &quot;bridge&quot;,    &quot;IPAM&quot;: {        &quot;Driver&quot;: &quot;default&quot;,        &quot;Config&quot;: [            {}        ]    },    &quot;Containers&quot;: {        &quot;59b01ca0444b4c708b521725532762512bc57ec9fdfccb2e2a6addef8a072f05&quot;: {            &quot;EndpointID&quot;: &quot;dd969e4ec9703cf87adfd97b22bb8e06ec8a12139c948aceb6aea70388d23d31&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,            &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,            &quot;IPv6Address&quot;: &quot;&quot;        },        &quot;fdec55f5db5da821825fe5b091e69e248f8f346273a9397ea66a931b4c26bb7f&quot;: {            &quot;EndpointID&quot;: &quot;67b284bcef2544ec153c90e041c7d51351d5f2cea63e31537352e37ac8fb1fe6&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,            &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,            &quot;IPv6Address&quot;: &quot;&quot;        }    },    &quot;Options&quot;: {}}</code></pre><p>  ]                                   </p></li><li><p>查看container的NetworkSettings，里面Networks有两个网络了：</p><p>  $ docker inspect web_container<br>  “Networks”: {</p><pre><code>    &quot;app&quot;: {        &quot;EndpointID&quot;: &quot;b06bbe5ea7dbaa96fecb2165404185effa0d6ebf01b028633f2afe00664cf16d&quot;,        &quot;Gateway&quot;: &quot;172.19.0.1&quot;,        &quot;IPAddress&quot;: &quot;172.19.0.3&quot;,        &quot;IPPrefixLen&quot;: 16,        &quot;IPv6Gateway&quot;: &quot;&quot;,        &quot;GlobalIPv6Address&quot;: &quot;&quot;,        &quot;GlobalIPv6PrefixLen&quot;: 0,        &quot;MacAddress&quot;: &quot;02:42:ac:13:00:03&quot;    },    &quot;web&quot;: {        &quot;EndpointID&quot;: &quot;67b284bcef2544ec153c90e041c7d51351d5f2cea63e31537352e37ac8fb1fe6&quot;,        &quot;Gateway&quot;: &quot;172.18.0.1&quot;,        &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,        &quot;IPPrefixLen&quot;: 16,        &quot;IPv6Gateway&quot;: &quot;&quot;,        &quot;GlobalIPv6Address&quot;: &quot;&quot;,        &quot;GlobalIPv6PrefixLen&quot;: 0,        &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;    }}</code></pre></li></ul><h3 id="2-多节点网络模式"><a href="#2-多节点网络模式" class="headerlink" title="2-多节点网络模式"></a>2-多节点网络模式</h3><h4 id="2-1-原生支持"><a href="#2-1-原生支持" class="headerlink" title="2-1.原生支持"></a>2-1.原生支持</h4><p>Docker 在 1.19 版本中引入的基于 VxLAN 的对跨节点网络的原生支持，即自带重叠网络(Overlay Network) 组件。<br>Docker 支持 Consul, Etcd, 和 ZooKeeper 三种分布式key-value 存储。其中，etcd 是一个高可用的分布式 k/v存储系统，使用etcd的场景默认处理的数据都是控制数据，对于应用数据，只推荐数据量很小，但是更新访问频繁的情况。</p><h4 id="【练习3】利用Docker-Swarm多主机创建网络"><a href="#【练习3】利用Docker-Swarm多主机创建网络" class="headerlink" title="【练习3】利用Docker Swarm多主机创建网络"></a>【练习3】利用Docker Swarm多主机创建网络</h4><p>1) 先准备两台虚拟机作为Docker Swarm的两个节点Node1，Node2。</p><pre><code>$ midir docker-cluster$ cd docker-cluster$ vim Vagrantfile</code></pre><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="number">2</span>) <span class="built_in">do</span> |<span class="type">config</span>|<span class="type"></span></span><br><span class="line"><span class="type">  (1</span>.<span class="number">.2</span>).each <span class="built_in">do</span> |<span class="type">i</span>|<span class="type"></span></span><br><span class="line"><span class="type">    config</span>.vm.define <span class="string">"wanzi-node#&#123;i&#125;"</span> <span class="built_in">do</span> |<span class="type">node</span>|<span class="type"></span></span><br><span class="line"><span class="type">      node</span>.vm.box = <span class="string">"comiq/dockerbox"</span></span><br><span class="line">      node.vm.provider <span class="string">"virtualbox"</span> <span class="built_in">do</span> |<span class="type">vb</span>|<span class="type"></span></span><br><span class="line"><span class="type">        vb</span>.name = <span class="string">"wanzi-node#&#123;i&#125;"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><pre><code>$ vagrant upBringing machine &apos;wanzi-node1&apos; up with &apos;virtualbox&apos; provider...Bringing machine &apos;wanzi-node2&apos; up with &apos;virtualbox&apos; provider...==&gt; wanzi-node1: Checking if box &apos;comiq/dockerbox&apos; is up to date...==&gt; wanzi-node1: VirtualBox VM is already running.==&gt; wanzi-node2: Importing base box &apos;comiq/dockerbox&apos;...==&gt; wanzi-node2: Matching MAC address for NAT networking...==&gt; wanzi-node2: Checking if box &apos;comiq/dockerbox&apos; is up to date...==&gt; wanzi-node2: Setting the name of the VM: wanzi-node2==&gt; wanzi-node2: Fixed port collision for 22 =&gt; 2222. Now on port 2201.==&gt; wanzi-node2: Clearing any previously set network interfaces...==&gt; wanzi-node2: Preparing network interfaces based on configuration...    wanzi-node2: Adapter 1: nat==&gt; wanzi-node2: Forwarding ports...    wanzi-node2: 22 =&gt; 2201 (adapter 1)==&gt; wanzi-node2: Booting VM...==&gt; wanzi-node2: Waiting for machine to boot. This may take a few minutes...    wanzi-node2: SSH address: 127.0.0.1:2201    wanzi-node2: SSH username: vagrant    wanzi-node2: SSH auth method: private key    wanzi-node2: Warning: Connection timeout. Retrying...==&gt; wanzi-node2: Machine booted and ready!==&gt; wanzi-node2: Checking for guest additions in VM...==&gt; wanzi-node2: Mounting shared folders...    wanzi-node2: /vagrant =&gt; /Users/yuzhang/Downloads/Devops/docker_cluster</code></pre><p>2） <strong>Node1</strong>作为Manager<br>登陆到Node1:</p><pre><code>$ vagrant ssh wanzi-node1Welcome to Ubuntu 16.04 LTS (GNU/Linux 4.4.0-21-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage</code></pre><p>在Node1上初始化并创建Docker Swarm，作为Manager:</p><pre><code>vagrant@vagrant:~$  docker swarm init --advertise-addr 192.168.59.1:2377Swarm initialized: current node (85qhfwludbf603gcazjqippl2) is now a manager.To add a worker to this swarm, run the following command:docker swarm join \--token SWMTKN-1-5rv6l22kow7fhpthihiy5oqi8ka4mospeele38ycsfuwsviv1y-bekemef3aafmbanavzkeekjch \192.168.59.1:2377</code></pre><p>To add a manager to this swarm, run ‘docker swarm join-token manager’ and follow the instructions.</p><p>3) <strong>Node2</strong>作为Worker<br>登陆到Node2:</p><pre><code>$ vagrant ssh wanzi-node1</code></pre><p>在Node2上运行如下命令加入到Swarm中，作为Worker:</p><pre><code>vagrant@vagrant:~$ docker swarm join \&gt;     --token SWMTKN-1-5rv6l22kow7fhpthihiy5oqi8ka4mospeele38ycsfuwsviv1y-bekemef3aafmbanavzkeekjch \&gt;     192.168.59.1:2377This node joined a swarm as a worker.</code></pre><p>4) 在<strong>Node1</strong>上查看所有node信息</p><pre><code>vagrant@vagrant:~$ docker node lsID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS85qhfwludbf603gcazjqippl2 *  vagrant   Ready   Active        Leader9o4sy1vcd5nygr77jrjpl28sn    vagrant   Ready   Active</code></pre><p>5) 在<strong>Node2</strong>上则<strong>不</strong>能查看所有node信息</p><pre><code>vagrant@vagrant:~$ docker node lsError response from daemon: This node is not a swarm manager. Worker nodes can&apos;t be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.</code></pre><p>6) 在<strong>Node1</strong>上创建<code>overlay</code>网络</p><pre><code>vagrant@vagrant:~$ docker network create -d=overlay net_overlay0aa8c2nu8vwwbep0spui8upvavagrant@vagrant:~$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE9cbbdda300b9        bridge              bridge              localeb0832fa48cc        docker_gwbridge     bridge              locald9cbc7492332        host                host                local6agtuhiw3e1r        ingress             overlay             swarm0aa8c2nu8vww        net_overlay         overlay             swarme5bb8590c3b8        none                null                local</code></pre><p>这样，所有在Swarm中的主机都可以访问该网络了，除了docker0默认网桥外，这里多出了一个docker_gwbridge的网桥，docker0在跨多主机容器网络中并没有被用到，而是docker_gwbridge替代了docker0用来实现Overlay网络中容器间的通信以及容器到外部的通信，其职能就和单机容器网络中docker0一样。</p><pre><code>vagrant@vagrant:~$ docker network inspect net_overlay[    {        &quot;Name&quot;: &quot;net_overlay&quot;,        &quot;Id&quot;: &quot;0aa8c2nu8vwwbep0spui8upva&quot;,        &quot;Scope&quot;: &quot;swarm&quot;,        &quot;Driver&quot;: &quot;overlay&quot;,        &quot;EnableIPv6&quot;: false,        &quot;IPAM&quot;: {            &quot;Driver&quot;: &quot;default&quot;,            &quot;Options&quot;: null,            &quot;Config&quot;: []        },        &quot;Internal&quot;: false,        &quot;Containers&quot;: null,        &quot;Options&quot;: {            &quot;com.docker.network.driver.overlay.vxlanid_list&quot;: &quot;257&quot;        },        &quot;Labels&quot;: null    }]</code></pre><p>7) 创建服务<br>　　创建一个名为hello的服务，包含2个副本，使用sleep infinity的命令运行，该命令使得容器不会立即退出:</p><pre><code>vagrant@vagrant:~$ docker service lsID            NAME   REPLICAS  IMAGE   COMMANDalq1vrojrwd6  hello  0/2       ubuntu  sleep infinityvagrant@vagrant:~$ docker service ps helloID                         NAME     IMAGE   NODE     DESIRED STATE  CURRENT STATE          ERROR66zkihz10oaoxv1i94niud0cy  hello.1  ubuntu  vagrant  Running        Running 4 seconds ago08stnpfqhg3rhtb1nd3dxxade  hello.2  ubuntu  vagrant  Running        Running 5 seconds ago</code></pre><p>可以分别在Node1和Node2上查看运行的容器：<br>Node1:</p><pre><code>vagrant@vagrant:~$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES63f768d6b911        ubuntu:latest       &quot;sleep infinity&quot;    28 seconds ago      Up 27 seconds                           hello.2.08stnpfqhg3rhtb1nd3dxxade</code></pre><p>Node2:</p><pre><code>vagrant@vagrant:~$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESe506461b95f3        ubuntu:latest       &quot;sleep infinity&quot;    48 seconds ago      Up 47 seconds                           hello.1.66zkihz10oaoxv1i94niud0cy</code></pre><p>8) 检查连通性<br>Node1:</p><pre><code>vagrant@vagrant:~$ docker inspect -f {{.NetworkSettings.Networks.net_overlay.IPAddress}}  63f768d6b91110.0.0.4</code></pre><p>Node2:</p><pre><code>vagrant@vagrant:~$ docker inspect -f {{.NetworkSettings.Networks.net_overlay.IPAddress}}  e506461b95f310.0.0.3 vagrant@vagrant:~$ docker exec hello.1.66zkihz10oaoxv1i94niud0cy apt-get update; apt-get install iputils-ping -y; ping 10.0.0.4</code></pre><h4 id="2-2-插件"><a href="#2-2-插件" class="headerlink" title="2-2.插件"></a>2-2.插件</h4><p>该方式是通过插件（plugin）方式引入的第三方实现方案，比如 Weave, Calico, Contiv Netplugin, Cisco, VMware, MidoNet, pipework, flannel等等。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇文章主要是讲述Docker网络相关的内容，包括Docker的网络实现、网络创建过程、网络模型组件与优势、网络模式（单节点、多节点）等。<br><a href="http://zhangyuyu.github.io/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">下一篇</a>将讲述Docker的安全。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://dockone.io/article/1261" target="_blank" rel="noopener">Docker网络模式</a></li><li><a href="http://www.cnblogs.com/sammyliu/p/5894191.html" target="_blank" rel="noopener">理解Docker网络</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/advanced_network/&lt;ptp class=&quot;html&quot;&gt;&lt;/ptp" target="_blank" rel="noopener">Docker从入门到实践-高级网络配置</a></li><li><a href="http://dockone.io/article/1736" target="_blank" rel="noopener">使用Docker Swarm来运行服务</a></li><li><a href="http://kiwenlau.com/2016/07/03/vagrant-vm-cluster/" target="_blank" rel="noopener">使用Vagrant创建多节点虚拟机集群</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇 Docker的数据存储&lt;/a&gt;主要讲述Docker数据管理的两种方式：数据卷和数据卷容器。&lt;br&gt;本篇主要讲述网络的实现、网络模型、网络模式等相关知识。&lt;/p&gt;
&lt;h2 id=&quot;二、背景&quot;&gt;&lt;a href=&quot;#二、背景&quot; class=&quot;headerlink&quot; title=&quot;二、背景&quot;&gt;&lt;/a&gt;二、背景&lt;/h2&gt;&lt;p&gt;　　该系列《Docker in Prodcution》内容包含如下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;容器简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/10/Docker-workshop-2-Docker%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/11/Docker-workshop-3-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker的基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/13/Docker-workshop-4-Docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker数据存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker网络&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2017/07/20/Docker-workshop-6-Docker%E5%AE%89%E5%85%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;多主机部署&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;日志、跟踪、监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、网络的实现&quot;&gt;&lt;a href=&quot;#三、网络的实现&quot; class=&quot;headerlink&quot; title=&quot;三、网络的实现&quot;&gt;&lt;/a&gt;三、网络的实现&lt;/h2&gt;&lt;p&gt;　　Docker现有的网络模型主要是通过使用Network namespace、Linux Bridge、Iptables、veth pair等技术实现的。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
</feed>
