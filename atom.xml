<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[若见喻笺]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-11-21T08:35:27.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Zhang Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Vagrant]]></title>
    <link href="http://yoursite.com/2015/11/21/Vagrant/"/>
    <id>http://yoursite.com/2015/11/21/Vagrant/</id>
    <published>2015-11-21T07:11:35.000Z</published>
    <updated>2015-11-21T08:35:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、Vagrant的认识">一、Vagrant的认识</h3><p>　　Vagrant 是一款用来构建虚拟开发环境的工具，它底层支持VirtualBox、VMware甚至AWS作为虚拟机系统。</p>
<blockquote>
<p>Vagrant的作用：<br>1、统一开发环境。一次配置打包，统一分发给团队成员，统一团队开发环境，解决诸如“编码问题”，“缺少模块”，“配置文件不同”带来的问题；<br>2、避免重复搭建开发环境。新员工加入，不用浪费时间搭建开发环境，快速加入开发，减少时间成本的浪费；<br>3、多个相互隔离开发环境。可以在不用box里跑不同的语言，或者编译安装同一语言不同版本，搭建多个相互隔离的开发环境，卸载清除时也很快捷轻松。</p>
</blockquote>
<h3 id="二、安装">二、安装</h3><h4 id="1、安装_VirtualBox">1、安装 VirtualBox</h4><h4 id="2、安装_Vagrant">2、安装 Vagrant</h4><p>下载地址：<a href="http://www.vagrantup.com/downloads" target="_blank" rel="external">http://www.vagrantup.com/downloads</a></p>
<blockquote>
<p>Window下可以使用软件包管理工具chocolate安装，参照<a><a href="https://chocolatey.org/" target="_blank" rel="external">https://chocolatey.org/</a></a><br>Mac OSX下可以使用brew安装。</p>
</blockquote>
<h4 id="3、安装系统镜像">3、安装系统镜像</h4><p>3.1 通过Vagrant Cloud方式</p>
<ul>
<li>新建一个文件夹，如AgentBox,然后进入目录</li>
<li>在<a><a href="https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1" target="_blank" rel="external">https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1</a></a>上搜索想安装的镜像，找到对应的安装指令，如<code>$ vagrant init ubuntu/precise64; vagrant up --provider virtualbox</code>。　</li>
</ul>
<p>3.2 通过添加box方式</p>
<ul>
<li>在<a><a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a></a>下载镜像。</li>
<li><code>$ vagrant box add {title} {url}</code><ul>
<li>假设我们下载的镜像存放路径是~/box/precise64.box,在终端里输入:<br><code>$ vagrant box add AgentBox ~/box/precise64.box</code><br>AgentBox是我们给这个box命的名字，~/box/precise64.box是box 所在路径。</li>
<li>box文件也可以是远程地址:<code>vagrant box add AgentBox http://files.vagrantup.com/lucid64.box</code></li>
</ul>
</li>
<li>初始化开发环境<br>　　先进入box里面，然后<code>$ vagrant init AgentBox</code></li>
<li>启动环境<code>vagrant up</code></li>
</ul>
<h3 id="三、常用指令">三、常用指令</h3><p>1、 添加box<br>vagrant box add AgentBox ~/box/precise64.box</p>
<blockquote>
<p>box文件也可以是远程地址 base 为默认名称<br>vagrant box add base <a href="http://files.vagrantup.com/lucid64.box" target="_blank" rel="external">http://files.vagrantup.com/lucid64.box</a></p>
</blockquote>
<p>2、vagrant init，初始化</p>
<blockquote>
<p>如果你添加的box名称不是base，那么需要在初始化的时候指定名称，例如vagrant init AgentBox</p>
</blockquote>
<p>3、vagrant up，启动虚拟机<br>4、vagrant ssh，ssh到虚拟机<br>5、vagrant reload，重启虚拟机（重新载入配置文件）<br>6、vagrant package –base precise64_default_1447845103364_6382 –output precise64.box打包分发<br>7、vagrant box list<br>8、vagrant status</p>
<h3 id="四、主要配置">四、主要配置</h3><p>　　开发目录下有一个文件Vagrantfile，里面包含有大量的配置信息，主要包括三个方面的配置，虚拟机的配置、SSH配置、Vagrant的一些基础配置。</p>
<p>1、box设置</p>
<pre><code>config<span class="class">.vm</span><span class="class">.box</span> = <span class="string">"AgentBox"</span>
</code></pre><p>2、hostname设置</p>
<pre><code>config<span class="class">.vm</span><span class="class">.hostname</span> = <span class="string">"for_work"</span>
</code></pre><p>3、虚拟机网络设置</p>
<pre><code>config<span class="class">.vm</span><span class="class">.network</span> <span class="string">"private_network"</span>, ip: <span class="string">"192.168.33.10"</span>
config<span class="class">.vm</span><span class="class">.network</span> <span class="string">"public_network"</span>
</code></pre><p>4、同步目录</p>
<pre><code>config<span class="class">.vm</span><span class="class">.synced_folder</span> <span class="string">"../data"</span>, <span class="string">"/vagrant_data"</span>
</code></pre><p>5、端口转发</p>
<pre><code>config<span class="class">.vm</span><span class="class">.network</span> <span class="string">"forwarded_port"</span>, guest: <span class="number">80</span>, host: <span class="number">8080</span>
</code></pre><p>6、内存和cpu核心</p>
<pre><code>config.vm.provider <span class="string">"virtualbox"</span> do |vb|
  <span class="comment">#Display the VirtualBox GUI when booting the machine</span>
  vb.gui = <span class="constant">true</span>
  <span class="comment">#Customize the amount of memory on the VM:</span>
  vb.memory = <span class="string">"1024"</span>
  vb.cpus = <span class="number">2</span>
  vb.<span class="property">name</span> = <span class="string">"my_vm"</span>
<span class="keyword">end</span>
</code></pre><blockquote>
<p>更多资源：<br>GETTING STARTED：<a><a href="https://docs.vagrantup.com/v2/getting-started/" target="_blank" rel="external">https://docs.vagrantup.com/v2/getting-started/</a></a><br>Vagrant简介和安装配置：<a><a href="http://rmingwang.com/vagrant-commands-and-config.html" target="_blank" rel="external">http://rmingwang.com/vagrant-commands-and-config.html</a></a><br>Docker学习总结之Docker与Vagrant之间的特点比较：<a><a href="http://www.linuxidc.com/Linux/2014-09/106783.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-09/106783.htm</a></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、Vagrant的认识">一、Vagrant的认识</h3><p>　　Vagrant 是一款用来构建虚拟开发环境的工具，它底层支持VirtualBox、VMware甚至AWS作为虚拟机系统。</p>
<blockquote>
<p>Vagrant的作用：<br>]]>
    </summary>
    
      <category term="Vagrant" scheme="http://yoursite.com/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AnguarJS跨域请求]]></title>
    <link href="http://yoursite.com/2015/11/21/Anguar%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2015/11/21/Anguar跨域请求/</id>
    <published>2015-11-21T05:18:41.000Z</published>
    <updated>2015-11-21T06:49:41.000Z</updated>
    <content type="html"><![CDATA[<p>　　本节用Yeoman和AngularJS搭建一个功能完整的应用CustomerUI，向后端CustomerApi发送跨域请求。<br>　　跨域资源共享（Cross-Origin Resource Sharing）是一种允许当前域（domain）的资源（比如html/js/web service）被其他域的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。</p>
<h3 id="一、视图">一、视图</h3><h4 id="1-在main-html中">1.在<code>main.html</code>中</h4><pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"jumbotron"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row marketing"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"btn btn-lg btn-success"</span> <span class="attribute">ng-href</span>=<span class="value">"#/createCustomer"</span>&gt;</span>Create<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"btn btn-lg btn-success"</span> <span class="attribute">ng-href</span>=<span class="value">"#/getCustomer"</span>&gt;</span>GetByName<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h4 id="2-在getView-html中">2.在<code>getView.html</code>中</h4><pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>This is the get customer by name view.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">h4</span>&gt;</span>Name<span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"name"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"btn btn-lg btn-success"</span> <span class="attribute">ng-click</span>=<span class="value">"getCustomer()"</span> &gt;</span>Get<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="comment"></span>
</code></pre><h4 id="3-在createView-html中">3.在<code>createView.html</code>中</h4><pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>This is the create customer view.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">h4</span>&gt;</span>Name<span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"name"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">h4</span>&gt;</span>Age<span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"age"</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"btn btn-lg btn-success"</span> <span class="attribute">ng-click</span>=<span class="value">"createCustomer()"</span> &gt;</span>Create<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="comment"></span>
</code></pre><h3 id="二、controller">二、controller</h3><h4 id="1-在getCustomer-js中">1.在<code>getCustomer.js</code>中</h4><pre><code><span class="string">'use strict'</span>;

angular.module(<span class="string">'customerUiApp'</span>)
  .controller(<span class="string">'GetCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$http</span>) {

     <span class="variable">$scope</span>.getCustomer = function(){
       var url = <span class="string">'http://localhost:8080/customers?name='</span> + <span class="variable">$scope</span>.name;
       <span class="variable">$http</span>({
          url : url,
          method : <span class="string">'GET'</span>
       }).then(function(response) {
          <span class="variable">$scope</span>.info = response.data;
          alert(<span class="string">'Get '</span>+<span class="variable">$scope</span>.name+<span class="string">' successfully!'</span>);
        },function(response) {
          <span class="variable">$scope</span>.info = response.data || <span class="string">"Request failed"</span>;
          alert(<span class="variable">$scope</span>.info);
       });
     };
  }]);      
</code></pre><h4 id="2-在createCustomer-js中">2.在<code>createCustomer.js</code>中</h4><pre><code><span class="string">'use strict'</span>;

angular.module(<span class="string">'customerUiApp'</span>)
  .controller(<span class="string">'CreateCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="keyword">function</span> (<span class="variable">$scope</span>, <span class="variable">$http</span>) {
    <span class="variable">$scope</span>.createCustomer = function(){
       <span class="variable">$http</span>({
          url : <span class="string">'http://localhost:8080/customers'</span>,
          method : <span class="string">'POST'</span>,
          data: {
              name : <span class="variable">$scope</span>.name,
              age : <span class="variable">$scope</span>.age
          }
       }).then(function(response) {
          <span class="variable">$scope</span>.info = response.data;
          alert(<span class="string">'Create '</span>+<span class="variable">$scope</span>.name+<span class="string">' successfully!'</span>);
        },function(response) {
          <span class="variable">$scope</span>.info = response.data || <span class="string">"Request failed"</span>;
          alert(<span class="variable">$scope</span>.info);
       });
    };

  }]);
</code></pre><h3 id="三、配置路由">三、配置路由</h3><p>在<code>app.js</code>中</p>
<pre><code><span class="string">'use strict'</span>;

angular.module(<span class="string">'customerUiApp'</span>, [<span class="string">'ngRoute'</span>])
  .config(<span class="keyword">function</span> (<span class="variable">$routeProvider</span>) {
    <span class="variable">$routeProvider</span>
      .when(<span class="string">'/'</span>, {
        templateUrl: <span class="string">'views/main.html'</span>
      })
      .when(<span class="string">'/createCustomer'</span>, {
        templateUrl: <span class="string">'views/createView.html'</span>,
        controller: <span class="string">'CreateCtrl'</span>
      })
      .when(<span class="string">'/getCustomer'</span>, {
        templateUrl: <span class="string">'views/getView.html'</span>,
        controller: <span class="string">'GetCtrl'</span>
      })
      .otherwise({
        redirectTo: <span class="string">'/'</span>
      });
  });
</code></pre><h3 id="四、基准HTML文件">四、基准HTML文件</h3><p>在<code>index.html</code>中</p>
<pre><code><span class="doctype">&lt;!doctype html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>AngularTest<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"bower_components/bootstrap/dist/css/bootstrap.css"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"styles/main.css"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>

  <span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"customerUiApp"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-view</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bower_components/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bower_components/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bower_components/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"bower_components/angular-route/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"scripts/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"scripts/controllers/createCustomer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"scripts/controllers/getCustomer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>导入主程序<code>app.js</code>以及<code>createCustomer.js</code>、<code>getCustomer.js</code>controller。</p>
<h3 id="五、测试">五、测试</h3><h4 id="1、在test/spec/controllers/getCustomer-js中">1、在test/spec/controllers/getCustomer.js中</h4><pre><code><span class="string">'use strict'</span>;

describe(<span class="string">'Controller: GetCtrl'</span>, <span class="keyword">function</span> () {
  beforeEach(module(<span class="string">'customerUiApp'</span>));

  var GetCtrl,scope,<span class="variable">$httpBackend</span>;

  beforeEach(inject(function (<span class="variable">$controller</span>, <span class="variable">$rootScope</span>, <span class="number">_</span><span class="variable">$httpBackend</span><span class="number">_</span>) {
    scope = <span class="variable">$rootScope</span>.<span class="variable">$new</span>();
    <span class="variable">$httpBackend</span> = <span class="number">_</span><span class="variable">$httpBackend</span><span class="number">_</span>;
    GetCtrl = <span class="variable">$controller</span>(<span class="string">'GetCtrl'</span>, {
      <span class="variable">$scope</span>: scope
    });
  }));

  it(<span class="string">'should send get request'</span>, function () {
    <span class="variable">$httpBackend</span>
      .expect(<span class="string">'GET'</span>, <span class="string">'http://localhost:8080/customers?name=Alex'</span>)
      .respond( {name :<span class="string">'Alex'</span>, age:<span class="string">'20'</span>});
    scope.name = <span class="string">'Alex'</span>;

    scope.getCustomer();
    <span class="variable">$httpBackend</span>.flush();

    expect(scope.info.name).toBe(<span class="string">'Alex'</span>);
    expect(scope.info.age).toBe(<span class="string">'20'</span>);
  });
});
</code></pre><h4 id="2、在test/spec/controllers/createCustomer-js中">2、在test/spec/controllers/createCustomer.js中</h4><pre><code><span class="string">'use strict'</span>;

describe(<span class="string">'Controller: CreateCtrl'</span>, <span class="keyword">function</span> () {
  beforeEach(module(<span class="string">'customerUiApp'</span>));

  var CreateCtrl,scope,<span class="variable">$httpBackend</span>;

  beforeEach(inject(function (<span class="variable">$controller</span>, <span class="variable">$rootScope</span>, <span class="number">_</span><span class="variable">$httpBackend</span><span class="number">_</span>) {
    scope = <span class="variable">$rootScope</span>.<span class="variable">$new</span>();
    <span class="variable">$httpBackend</span> = <span class="number">_</span><span class="variable">$httpBackend</span><span class="number">_</span>;
    CreateCtrl = <span class="variable">$controller</span>(<span class="string">'CreateCtrl'</span>, {
      <span class="variable">$scope</span>: scope
    });
  }));

  it(<span class="string">'should send post request'</span>, function () {
    <span class="variable">$httpBackend</span>
      .expect(<span class="string">'POST'</span>, <span class="string">'http://localhost:8080/customers'</span>)
      .respond( {name :<span class="string">'Alex'</span>, age:<span class="string">'20'</span>});
    scope.name = <span class="string">'Alex'</span>;

    scope.createCustomer();
    <span class="variable">$httpBackend</span>.flush();

    expect(scope.info.name).toBe(<span class="string">'Alex'</span>);
    expect(scope.info.age).toBe(<span class="string">'20'</span>);
  });
});
</code></pre><h3 id="六、运行及结果">六、运行及结果</h3><h4 id="1、本地启动CustomerApi运行在8080端口">1、本地启动CustomerApi运行在8080端口</h4><h4 id="2、grunt_serve启动CustomerUI">2、<code>grunt serve</code>启动CustomerUI</h4><h4 id="3、在terminal中输入下述命令，使其允许跨域请求">3、在terminal中输入下述命令，使其允许跨域请求</h4><pre><code><span class="keyword">open</span> /Applications/Google\ Chrome.<span class="keyword">app</span> --<span class="keyword">args</span> --allow-<span class="keyword">file</span>-access-from-files --disable-web-security
</code></pre><h4 id="4、输入url">4、输入url</h4><p>　　在<strong>弹出</strong>的浏览器输入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a><br>　　<img src="/imgs/CustomerUI.png" width="400" height="250"></p>
<h4 id="5、点击GetByName">5、点击<code>GetByName</code></h4><p>　　进入get customer by name界面如下：<br>　　<img src="/imgs/GetByName.png" width="400" height="250"><br>　　输入name,出现CustomerApi的认证如下：<br>　　<img src="/imgs/Authentication.png" width="400" height="250"><br>　　输入用户名user和密码password，得到：<br>　　<img src="/imgs/GetSuccessfully.png" width="400" height="250"><br>　　显示通过CustomerApi获取到的Customer信息如下：<br>　　<img src="/imgs/GetResults.png" width="400" height="250">
　　</p>
<blockquote>
<p>更多资源：<br>enable cross-origin resource sharing:<a><a href="http://enable-cors.org/index.html" target="_blank" rel="external">http://enable-cors.org/index.html</a></a><br>CustomerUI代码：<a><a href="https://github.com/zhangyuyu/CustomerUI" target="_blank" rel="external">https://github.com/zhangyuyu/CustomerUI</a></a><br>CustomerApi代码：<a><a href="https://github.com/zhangyuyu/CustomerAPI" target="_blank" rel="external">https://github.com/zhangyuyu/CustomerAPI</a></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　本节用Yeoman和AngularJS搭建一个功能完整的应用CustomerUI，向后端CustomerApi发送跨域请求。<br>　　跨域资源共享（Cross-Origin Resource Sharing）是一种允许当前域（domain）的资源（比如html/js/]]>
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman]]></title>
    <link href="http://yoursite.com/2015/11/21/Yeoman/"/>
    <id>http://yoursite.com/2015/11/21/Yeoman/</id>
    <published>2015-11-21T01:15:32.000Z</published>
    <updated>2015-11-21T06:38:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、认识Yeoman">一、认识Yeoman</h3><p>　　Yeoman的logo是一个戴帽子的男人。<br>　　<img src="/imgs/yeoman.png" width="400" height="250"><br>　　Yeoman旨在为开发者提供一系列健壮的工具、程序库和工作流，快速构建出漂亮、引人注目的Web应用。它不只是一个工具，还是一个工作流。它其实包括了三个部分yo、grunt、bower，分别用于项目的启动、文件操作、包管理。</p>
<blockquote>
<p>Yo:项目初始化工具，用于构建特定框架的生态系统,可以生成一套启动某类项目必需的项目文件,我们称之为生成器(generator)。<br>Bower：一个客户端技术的软件包管理器，用于依赖管理。它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。使用它以后你再也不用手动地去一个个下载你的前端库了。<br>Grunt： GruntJS是基于JavaScript的命令行构建工具，它可以帮助开发者们自动化重复性的工作,自动运行你所设定的任务。</p>
</blockquote>
<h3 id="二、安装">二、安装</h3><h4 id="1、在安装Yeoman之前，你需要确认以下配置：">1、在安装Yeoman之前，你需要确认以下配置：</h4><ul>
<li>Node.js 版本在0.10以上</li>
<li>npm 版本在1.3.7以上</li>
</ul>
<h4 id="2、安装">2、安装</h4><pre><code>npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> yo grunt-cli bower</span>
</code></pre><h3 id="三、使用">三、使用</h3><h4 id="1、创建一个文件夹CustomerUI，并进入">1、创建一个文件夹CustomerUI，并进入</h4><h4 id="2、安装Yeoman生成器">2、安装Yeoman生成器</h4><p>2.1 搜索安装：</p>
<pre><code>yo
</code></pre><img src="/imgs/yo.png" width="400" height="300">
<p>　　用键盘的上下键来操作菜单，当选项’install a generator’被高亮的时候按下回车键。接下来我们需要寻找一个合适的生成器。搜索’angular’的话，你会得到很多搜索结果。这些生成器都是由许多Yeoman开源社区贡献的。<br>　　<img src="/imgs/yo-search.png" width="400" height="500"><br>　　在这个例子里，我们使用的是’generator-angular’。当选中了’generator-angular’后，按下回车执行安装，它所依赖的Node包就会开始被下载了。</p>
<p>2.2 如果你知道要安装的生成器的名字：</p>
<pre><code><span class="title">yo</span> angular
</code></pre><img src="/imgs/yo-angular.png" width="400" height="300">
<h4 id="3、选择">3、选择</h4><p>3.1 询问是否需要Sass，Sass运行环境是 ruby，可以直接输入no跳过。<br>3.2 询问是否需要安装 Bootstrap 框架? 需要就输入yes。<br>3.3 询问是否要安装上面提到的 angular 相关包,可以用空格选择或者取消选择,回车开始执行。    </p>
<h4 id="4、目录">4、目录</h4><img src="/imgs/CustomerUIStructure.png" width="200" height="150">
<ul>
<li>app/：Web应用的父级目录。<ul>
<li>index.html： Angular应用的基准HTML文件（base html file）</li>
<li>404.html、favicon.ico和robots.txt：通用的Web文件，Yeoman已经将它创建出来了，你不需要再手动去创建</li>
<li>bower_components：存放项目相关的JavaScript或Web依赖，由bower安装的</li>
<li>scripts：我们的JS文件<ul>
<li>app.js：主程序</li>
<li>controllers：Angular控制器</li>
</ul>
</li>
<li>styles：我们的CSS文件</li>
<li>views：Angular模板</li>
</ul>
</li>
<li>Gruntfile.js、package.json以及node_modules：Grunt需要使用的依赖以及配置。</li>
<li>test和karma.conf.js/karma-e2e.conf.js：测试框架以及针对这个项目的单元测试，包括了为控制器写的样板测试（boilerplate tests）。</li>
</ul>
<h4 id="5、运行">5、运行</h4><pre><code><span class="title">grunt</span> serve
</code></pre><p>在浏览器输入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、认识Yeoman">一、认识Yeoman</h3><p>　　Yeoman的logo是一个戴帽子的男人。<br>　　<img src="/imgs/yeoman.png" width="400" height="250"><br>　　Yeoman旨在为开发者提供]]>
    </summary>
    
      <category term="AngularJs" scheme="http://yoursite.com/tags/AngularJs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Servlet life]]></title>
    <link href="http://yoursite.com/2015/10/25/servlet-life/"/>
    <id>http://yoursite.com/2015/10/25/servlet-life/</id>
    <published>2015-10-25T14:19:46.000Z</published>
    <updated>2015-10-26T14:20:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、整体工作流程">一、整体工作流程</h3><blockquote>
<p>1、Client对Web Server发出请求<br><br>2、Web Server接收到请求后，将其发送给Servlet容器<br><br>3、Servlet容器产生Servlet实例对象并调用ServletAPI中相应的方法来对Client的请求进行处理，然后将处理的相应结果返回给WEB Server。<br><br>4、Web server将从Servlet实例中收到响应并发送回客户端。<br></p>
</blockquote>
<img src="/imgs/client-server.png" width="600" height="200">
<h3 id="二、阶段流程">二、阶段流程</h3><p>　　为了细化上述过程，可分为application的deploy过程和request的发送过程来讲：</p>
<h4 id="1、deploy阶段：">1、deploy阶段：</h4><p>　　以Tomcat的容器为例，真正管理Servlet的容器是Context容器。一个Context对应一个Web工程。Context容器直接管理Servlet在容器中的包装类Wrapper。<br>　　deploy过程中，首先会生成context对象，config对象。（listener、filter的初始化过程也是在此阶段先后完成的）。<br>　　<img src="/imgs/servlet-container.png" width="300" height="500"></p>
<h4 id="2、发送request阶段">2、发送request阶段</h4><p>(1）在默认情况下，Servlet实例是在第一个请求到来的时候创建，以后复用。如果有的Servlet需要复杂的操作需要载初始化时完成，比如打开文件、初始化网络连接等，可以通知服务器在启动的时候创建该Servlet的实例，配置<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>。<br>(2）init()<br>　　一旦Servlet实例被创建，Web服务器会自动调用init(ServletConfig config)方法来初始化该Servlet。其中方法参数config中包含了Servlet的配置信息，比如初始化参数，该对象在deploy阶段创建。<br>　　init()方法只执行一次。<br>(3)service()<br>　　 service()方法为Servlet的核心方法，Client的业务逻辑应该在该方法内执行，解析Client请求-〉执行业务逻辑-〉输出响应页面到Client。<br>(4）destroy()<br>　　当Web Server认为Servlet实例没有存在的必要了，比如应用重新装载，或服务器关闭，以及Servlet很长时间都没有被访问过。Web Server可以从内存中销毁该实例。Web Server必须保证在销毁Servlet实例之前调用该实例的destroy()方法，以便回收Servlet申请的资源或进行其它的重要的处理。</p>
<blockquote>
<p>当先后发送多个request时候，init()只执行一次。servlet容器处理多个请求通过产生多个线程，每个线程执行servlet的单实例的service()方法。</p>
</blockquote>
<img src="/imgs/servletLife.png" width="600" height="280">
<h3 id="三、Filter">三、Filter</h3><p>　　Filter不是一个servlet,它不能产生一个response,但是它能够在一个request到达servlet之前预处理request,也可以在离开servlet时处理response。</p>
<blockquote>
<p>Filter常用来：<br></p>
<ul>
<li>日志文件记录request参数<br></li>
<li>身份验证或认证request的resource<br></li>
<li>在request发送给Servlet之前格式化request的header或者body<br></li>
<li>压缩发回给Client的reponse数据</li>
</ul>
</blockquote>
<p>　　一个filter有三个阶段init()、doFilter()、destroy()。</p>
<h4 id="1、init()">1、init()</h4><p>　　filter的init()是在上述的deploy阶段完成的。</p>
<h4 id="2、doFilter()">2、doFilter()　</h4><p>　　一个Servlet初始化之后，每次request到达该Servlet的service()方法之前，都会先做doFilter()。能够配置一个filter到一个或多个servlet；单个servlet或servlet组能够被多个filter使用。</p>
<h4 id="3、destroy()">3、destroy()</h4><p>　　　当Servlet进行destroy之后，对应的Filter也会destroy。</p>
<blockquote>
<p>当有多个Filter时，按照web.xml中声明的顺序执行filter。</p>
</blockquote>
<h3 id="四、Listener">四、Listener</h3><p>　　Listener是Servlet的监听器，它可以监听客户端的请求、服务端的操作等。如监听context、session、application的create,destroy,可以监听到context、session、application<br>属性绑定的变化。通过监听器，可以自动激发一些操作，比如监听在线的用户的数量。<br>　　以实现ServletContextListener接口监听context的create和destroy为例：<br>　　contextInitialized()是在上述deploy阶段Filter的init()之前执行的。<br>　　contextDestroyed()是在Servlet的destroy()及Filter的destroy()之后执行的。
　　</p>
<h3 id="五、执行顺序">五、执行顺序</h3><p>　　在<a href="https://github.com/zhangyuyu/ServletLife" target="_blank" rel="external">ServletLife</a>的工程下，执行命令<code>gradle tomcatRunWar</code>。根据下面控制台打印信息，可以看出listen-&gt;filter-&gt;servlet的顺序：</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>Context created on<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>This is the filter init<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Started Tomcat Server
The Server is running at http://localhost:8080/ServletLife
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>This is the servlet init<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>do filter<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>This is the servlet service<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>This is the servlet destroy<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>This is the filter destroy<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>Context destroy<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><h3 id="六、对应一个故事">六、对应一个故事</h3><blockquote>
<p></p><h5 align="center">T公司CX项目开发经历</h5><br>1、T公司接到一个CX项目<br><br>　　根据项目计划书划分职能（BA、开发A功能人员、开发B功能人员……）<br><br>　　确定BA具体人员<br><br>2、需求R1<br><br>　　准备安排具体人员A、B<br><br>　　BA分析问题<br><br>　　A、B开始认真干活<br><br>3、需求R2<br><br>　　BA分析问题<br><br>　　A、B继续干活<br><br>　　……<br><br>4、项目完成了，开发人员解散<br><br>　　BA也role off<br><p></p>
</blockquote>
<p>　　故事中，T对应一个Web container, CX对应一个context, BA对应Filter，A\B分别对应一个Servlet，需求R1\R2分别对应两次request。<br>　　第一个阶段对应deploy阶段：划分职能可以代表生成context、config对象；确定BA的具体人员则代表着Filter的初始化。<br>　　第二个阶段对应发送request阶段：安排A、B的巨头人员代表Servlet的初始化；BA分析问题代表着Filter的doFilter(）操作；认真干活则代表Servlet的service()操作。<br>　　第三个阶段是发送另一个request，此过程中没有安排具体的人员（Servlet的初始化），对应的是servlet的多线程操作。<br>　　第四个阶段对应destroy过程，开发人员解散代表Servlet的destroy，BA的role off则代表着Filter的destroy。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、整体工作流程">一、整体工作流程</h3><blockquote>
<p>1、Client对Web Server发出请求<br><br>2、Web Server接收到请求后，将其发送给Servlet容器<br><br>3、Servlet容器产生Servlet实]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动创建Servlet异常处理]]></title>
    <link href="http://yoursite.com/2015/10/15/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2015/10/15/手动创建Servlet异常处理/</id>
    <published>2015-10-15T13:19:45.000Z</published>
    <updated>2015-10-17T09:08:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、创建产生异常的servlet">1、创建产生异常的servlet</h3><p>在ExceptionServlet.java中：</p>
<pre><code><span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.io.PrintWriter;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> </span>{

    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{
        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"hello"</span>);  
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{

    }
}
</code></pre><h3 id="2、创建异常处理类">2、创建异常处理类</h3><p>在ErrorHandle.java中：</p>
<pre><code><span class="built_in">import</span> java.io.<span class="built_in">*</span>;
<span class="built_in">import</span> javax.servlet.<span class="built_in">*</span>;
<span class="built_in">import</span> javax.servlet.http.<span class="built_in">*</span>;
<span class="built_in">import</span> java.util.<span class="built_in">*</span>;

<span class="comment">// 扩展 HttpServlet 类</span>
public class ErrorHandler extends HttpServlet {

  <span class="comment">// 处理 GET 方法请求的方法</span>
  public void doGet<span class="params">(HttpServletRequest request, HttpServletResponse response)</span>
            throws ServletException, IOException
  {
      PrintWriter out = response.getWriter<span class="params">()</span>;
      <span class="comment">// 分析 Servlet 异常       </span>
      Throwable throwable = <span class="params">(Throwable)</span>request.getAttribute<span class="params">(<span class="string">"javax.servlet.error.exception"</span>)</span>;
      Integer statusCode = <span class="params">(Integer)</span>request.getAttribute<span class="params">(<span class="string">"javax.servlet.error.status_code"</span>)</span>;
      String servletName = <span class="params">(String)</span>request.getAttribute<span class="params">(<span class="string">"javax.servlet.error.servlet_name"</span>)</span>;
      String requestUri = <span class="params">(String)</span>request.getAttribute<span class="params">(<span class="string">"javax.servlet.error.request_uri"</span>)</span>;

      <span class="keyword">if</span> <span class="params">(throwable != null)</span>{
         out.println<span class="params">(<span class="string">"Exception Type : "</span> + throwable.getClass<span class="params">( )</span>.getName<span class="params">( )</span>)</span>;
         out.println<span class="params">(<span class="string">"The exception message: "</span> + throwable.getMessage<span class="params">( )</span>)</span>;
      }
      <span class="keyword">if</span> <span class="params">(statusCode != null)</span>{
         out.println<span class="params">(<span class="string">"The status code : "</span> + statusCode)</span>;
      }
      out.println<span class="params">(<span class="string">"Servlet Name : "</span> + servletName)</span>;
      out.println<span class="params">(<span class="string">"The request URI: "</span> + requestUri)</span>;

  }
  <span class="comment">// 处理 POST 方法请求的方法</span>
  public void doPost<span class="params">(HttpServletRequest request, HttpServletResponse response)</span>
      throws ServletException, IOException {
     doGet<span class="params">(request, response)</span>;
  }
}
</code></pre><h3 id="3、编译">3、编译</h3><pre><code>javac -cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/lib/</span>servlet-api.jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/webapps/</span>test<span class="regexp">/WEB-INF/</span>classes<span class="comment">/*.java</span>
</code></pre><h3 id="4、部署">4、部署</h3><p>在web.xml中</p>
<pre><code><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>

<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/error<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>

<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>

<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>

<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>javax.servlet.ServletException<span class="tag">&lt;/<span class="title">exception-type</span> &gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>

<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>java.io.IOException<span class="tag">&lt;/<span class="title">exception-type</span> &gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/errorr<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
</code></pre><h3 id="5、启动tomcat">5、启动tomcat</h3><pre><code>$ cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec/bin
$ ./startup.sh    
</code></pre><h3 id="6、运行及结果">6、运行及结果</h3><p>　　使用上面会产生异常的Servlet，或者输入一个错误的URL，会触发Web容器调用ErrorHandler的Servlet，并显示适当的信息。<br><br>　　如果使用上面会产生异常的ExceptionServlet(<a href="http://localhost:8080/test/exception)，那么它将显示：" target="_blank" rel="external">http://localhost:8080/test/exception)，那么它将显示：</a></p>
<blockquote>
<p>Exception Type : javax.servlet.ServletException<br><br>The exception message: hello<br><br>The status code : 500<br><br>Servlet Name : ExceptionServlet<br><br>The request URI: /test/exception</p>
</blockquote>
<p>　　如果输入了一个错误的URL(<a href="http://localhost:8080/test/ex)，那么它将显示`The" target="_blank" rel="external">http://localhost:8080/test/ex)，那么它将显示`The</a> status code : 404`
　　</p>
<h3 id="7、目录结构">7、目录结构</h3><pre><code><span class="string">|---test</span>
    <span class="string">|---WEB-INF</span>
        <span class="string">|---classes</span>
            <span class="string">|---ServletException.java</span>
            <span class="string">|---ErrorHandler.java</span>
        <span class="string">|---lib</span>
        <span class="string">|---web.xml</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、创建产生异常的servlet">1、创建产生异常的servlet</h3><p>在ExceptionServlet.java中：</p>
<pre><code><span class="keyword">import</span> javax.servlet.]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动创建Servlet过滤器]]></title>
    <link href="http://yoursite.com/2015/10/15/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yoursite.com/2015/10/15/手动创建Servlet过滤器/</id>
    <published>2015-10-15T12:18:09.000Z</published>
    <updated>2015-10-21T14:33:24.000Z</updated>
    <content type="html"><![CDATA[<p>　　Servlet 过滤器是可用于 Servlet 编程的 Java 类，主要用于：</p>
<blockquote>
<p>在客户端的请求访问后端资源之前，拦截这些请求。<br><br>在服务器的响应发送回客户端之前，处理这些响应。</p>
</blockquote>
<p>　　在前面《手动创建Servlet》实现的基础上，增加一个filter,在服务器的响应发送回客户端之前，打印log。</p>
<h3 id="1、创建Filter">1、创建Filter</h3><p>在test/WEB_INF/classes下新建一个LogFilter.java</p>
<pre><code><span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> javax.servlet.http.*;
<span class="keyword">import</span> java.util.*;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span>  </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> 
                         <span class="keyword">throws</span> ServletException</span>{
        <span class="comment">// 获取初始化参数</span>
        String testParam = config.getInitParameter(<span class="string">"test-param"</span>); 

        <span class="comment">// 输出初始化参数</span>
        System.out.println(<span class="string">"********Test Param: "</span> + testParam); 

   }
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doFilter</span><span class="params">(ServletRequest request, 
                 ServletResponse response,
                 FilterChain chain)</span> 
                 <span class="keyword">throws</span> java.io.IOException, ServletException </span>{

        PrintWriter out = response.getWriter();
        out.println(<span class="string">"[ Time : "</span>+ <span class="keyword">new</span> Date().toString()+<span class="string">" ]"</span>);    
        <span class="comment">// 把请求传回过滤链</span>
        chain.doFilter(request,response);
   }
   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">( )</span></span>{
      <span class="comment">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span>
   }
 }
</code></pre><p>　　过滤器是一个实现了 javax.servlet.Filter 接口的Java类.javax.servlet.Filter 接口定义了三个方法:</p>
<blockquote>
<p>（1）public void doFilter (ServletRequest, ServletResponse, FilterChain)<br>该方法在每次一个请求/响应对因客户端在链的末端请求资源而通过链传递时由容器调用。<br><br>（2）public void init(FilterConfig filterConfig)<br>该方法由Web容器调用，指示一个过滤器被放入服务。<br><br>（3）public void destroy()<br>该方法由Web容器调用，指示一个过滤器被取出服务。</p>
</blockquote>
<h3 id="2、编译">2、编译</h3><p>　　编译ServletExample以及LogFilter：</p>
<pre><code>javac -cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/lib/</span>servlet-api.jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26、libexec/</span>webapps<span class="regexp">/test/</span>WEB-INF<span class="regexp">/classes/</span>LogFilter.java
</code></pre><h3 id="3、部署">3、部署</h3><pre><code><span class="pi">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
<span class="tag">&lt;<span class="title">web-app</span>&gt;</span>

    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>

    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>

    <span class="tag">&lt;<span class="title">filter</span>&gt;</span>
       <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
       <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
       <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
          <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
          <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

    <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
       <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
       <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
<span class="tag">&lt;/<span class="title">web-app</span>&gt;</span>
</code></pre><p>　　过滤器被部署在部署web.xml中然后映射到部署的Servlet名称或 URL模式。有多个过滤器时，执行的顺序是按它们在声明的顺序。
　　</p>
<h3 id="4、启动tomcat">4、启动tomcat</h3><pre><code>$ cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行">5、运行</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/hello" target="_blank" rel="external">http://localhost:8080/test/hello</a>
　　</p>
<h3 id="6、结果">6、结果</h3><pre><code>[ Time : Thu Oct <span class="number">15</span> <span class="number">20</span>:<span class="number">56</span>:<span class="number">29</span> CST <span class="number">2015</span> ]
Hello World
</code></pre><h3 id="7、目录结构">7、目录结构</h3><pre><code><span class="string">|---test</span>
    <span class="string">|---WEB-INF</span>
        <span class="string">|---classes</span>
            <span class="string">|---ServletExample.java</span>
            <span class="string">|---LogFilter.java</span>
        <span class="string">|---lib</span>
        <span class="string">|---web.xml</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　Servlet 过滤器是可用于 Servlet 编程的 Java 类，主要用于：</p>
<blockquote>
<p>在客户端的请求访问后端资源之前，拦截这些请求。<br><br>在服务器的响应发送回客户端之前，处理这些响应。</p>
</blockquote>
<]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动创建Servlet连接数据库]]></title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet连接数据库/</id>
    <published>2015-09-20T02:20:41.000Z</published>
    <updated>2015-10-21T14:34:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、准备数据库">1、准备数据库</h3><h4 id="(1)在本地mysql中create_一个数据库">(1)在本地mysql中create 一个数据库</h4><pre><code>$ mysql.server start
$ mysql -uroot -p
mysql&gt; show databases;
mysql&gt; create database test;
mysql&gt; use test;
mysql&gt; <span class="function">create table <span class="title">raw_report</span>(<span class="params">
       name varchar(<span class="number">20</span></span>),
       sex <span class="title">varchar</span>(<span class="params"><span class="number">10</span></span>),
       age <span class="title">varchar</span>(<span class="params"><span class="number">10</span></span>),
       birthday <span class="title">varchar</span>(<span class="params"><span class="number">20</span></span>)
  )</span>;
mysql&gt; <span class="function">INSERT <span class="title">raw_report</span>(<span class="params">name, sex, age, birthday</span>) <span class="title">VALUES</span>(<span class="params"><span class="string">'Alex'</span>,<span class="string">'M'</span>,<span class="string">'20'</span>,<span class="string">'08/07/1995'</span></span>)</span>;
mysql&gt; <span class="function">INSERT <span class="title">raw_report</span>(<span class="params">name, sex, age, birthday</span>) <span class="title">VALUES</span>(<span class="params"><span class="string">'Alice'</span>,<span class="string">'F'</span>,<span class="string">'18'</span>,<span class="string">'08/07/1997'</span></span>)</span>;
mysql&gt; <span class="function">INSERT <span class="title">raw_report</span>(<span class="params">name, sex, age, birthday</span>) <span class="title">VALUES</span>(<span class="params"><span class="string">'Bob'</span>,<span class="string">'M'</span>,<span class="string">'21'</span>,<span class="string">'08/07/1994'</span></span>)</span>;
mysql&gt; <span class="function">INSERT <span class="title">raw_report</span>(<span class="params">name, sex, age, birthday</span>) <span class="title">VALUES</span>(<span class="params"><span class="string">'Mary'</span>,<span class="string">'F'</span>,<span class="string">'23'</span>,<span class="string">'08/07/1992'</span></span>)</span>;
</code></pre><h3 id="2、创建servlet">2、创建servlet</h3><p>　　在test/WEB_INF/classes下新建一个DBServlet.java</p>
<pre><code><span class="keyword">import</span> java.io.*;                                    <span class="comment">//导入java.io包</span>
<span class="keyword">import</span> java.util.*;
<span class="keyword">import</span> java.sql.*;
<span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> javax.servlet.http.*;
<span class="keyword">public</span> class DBServlet extends HttpServlet{            <span class="comment">//定义一个继承HttpServlet的公有类</span>
    ServletConfig config=<span class="keyword">null</span>;                        <span class="comment">//定义一个ServletConfig对象</span>
    <span class="keyword">private</span> <span class="keyword">String</span> driverName=<span class="string">""</span>;                    <span class="comment">//定义私有字符串常量并初始化</span>
    <span class="keyword">private</span> <span class="keyword">String</span> username=<span class="string">""</span>;                    <span class="comment">//定义的数据库用户名</span>
    <span class="keyword">private</span> <span class="keyword">String</span> password=<span class="string">""</span>;                    <span class="comment">//定义的数据库连接密码</span>
    <span class="keyword">private</span> <span class="keyword">String</span> dbName=<span class="string">""</span>;                        <span class="comment">//定义的数据库名</span>
    <span class="keyword">private</span> Connection conn;                        <span class="comment">//初始化连接</span>
    <span class="keyword">private</span> Statement stmt;                        <span class="comment">//初始化数据库操作</span>
    ResultSet rs=<span class="keyword">null</span>;   
                             <span class="comment">//初始化结果集</span>
    <span class="keyword">public</span> <span class="keyword">void</span> init(ServletConfig config)<span class="keyword">throws</span> ServletException{
        <span class="keyword">super</span>.init(config);                            <span class="comment">//继承父类的init()方法</span>
        <span class="keyword">this</span>.config=config;                            <span class="comment">//获取配置信息</span>
        driverName=config.getInitParameter(<span class="string">"driverName"</span>);<span class="comment">//从配置文件中获取JDBC驱动名</span>
        username=config.getInitParameter(<span class="string">"username"</span>);    <span class="comment">//获取数据库用户名</span>
        password=config.getInitParameter(<span class="string">"password"</span>);    <span class="comment">//获取数据库连接密码</span>
        dbName=config.getInitParameter(<span class="string">"dbName"</span>);    <span class="comment">//获取要连接的数据库</span>
    }

    <span class="keyword">public</span> <span class="keyword">void</span> doGet(HttpServletRequest req,HttpServletResponse resp)<span class="keyword">throws</span> IOException,ServletException{
        resp.setContentType(<span class="string">"text/html;charset=GBK"</span>);    <span class="comment">//设置字符编码格式</span>
        PrintWriter out=resp.getWriter();                <span class="comment">//实例化对象，用于页面输出</span>
        out.<span class="built_in">println</span>(<span class="string">"&lt;html&gt;"</span>);                    <span class="comment">//实现生成静态Html</span>
        out.<span class="built_in">println</span>(<span class="string">"&lt;head&gt;"</span>);
        out.<span class="built_in">println</span>(<span class="string">"&lt;meta http-equiv=\"Content-Type\"content=\"text/html;charset=GBK\"&gt;"</span>);
        out.<span class="built_in">println</span>(<span class="string">"&lt;title&gt;DataBase Connection&lt;/title&gt;"</span>);
        out.<span class="built_in">println</span>(<span class="string">"&lt;/head&gt;"</span>);
        out.<span class="built_in">println</span>(<span class="string">"&lt;body bgcolor=\"white\"&gt;"</span>);
        out.<span class="built_in">println</span>(<span class="string">"&lt;center&gt;"</span>);
        <span class="keyword">String</span> url=<span class="string">"jdbc:mysql://localhost:3306/test"</span>;
        <span class="keyword">try</span>{
                Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);
                conn=DriverManager.getConnection(url,username,password);
                stmt=conn.createStatement();
                <span class="keyword">String</span> sql=<span class="string">"select * from raw_report"</span>;
                rs=stmt.executeQuery(sql);

                out.<span class="built_in">println</span>(<span class="string">"Servlet访问数据库成功"</span>);
                out.<span class="built_in">println</span>(<span class="string">"&lt;table border=1 bordercolorlight=#000000&gt;"</span>);
                out.<span class="built_in">println</span>(<span class="string">"&lt;tr&gt;&lt;td width=40&gt;name&lt;/td&gt;"</span>);
                out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;sex&lt;/td&gt;"</span>);
                out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;age&lt;/td&gt;"</span>);
                out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;birthday&lt;/td&gt;"</span>);
                <span class="keyword">while</span>(rs.next()){
                     out.<span class="built_in">println</span>(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+rs.getString(<span class="number">1</span>)+<span class="string">"&lt;/td&gt;"</span>);
                     out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;"</span>+rs.getString(<span class="number">2</span>)+<span class="string">"&lt;/td&gt;"</span>);
                     out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;"</span>+rs.getString(<span class="number">3</span>)+<span class="string">"&lt;/td&gt;"</span>);
                     out.<span class="built_in">println</span>(<span class="string">"&lt;td&gt;"</span>+rs.getString(<span class="number">4</span>)+<span class="string">"&lt;/td&gt;"</span>);
                     out.<span class="built_in">println</span>(<span class="string">"&lt;tr&gt;"</span>);
                }
                out.<span class="built_in">println</span>(<span class="string">"&lt;/table&gt;"</span>);

                rs.close();
                stmt.close();
                conn.close();    

            }<span class="keyword">catch</span>(Exception e){
                e.printStackTrace();
                out.<span class="built_in">println</span>(e.toString());    
            }
            out.<span class="built_in">println</span>(<span class="string">"&lt;/center&gt;"</span>);
            out.<span class="built_in">println</span>(<span class="string">"&lt;/body&gt;"</span>);
            out.<span class="built_in">println</span>(<span class="string">"&lt;/html&gt;"</span>);
        }

        <span class="keyword">public</span> <span class="keyword">void</span> doPost(HttpServletRequest req,HttpServletResponse resp)<span class="keyword">throws</span> IOException,ServletException{
            <span class="keyword">this</span>.doGet(req,resp);
        }

        <span class="keyword">public</span> <span class="keyword">void</span> destory(){
            config=<span class="keyword">null</span>;
            driverName=<span class="keyword">null</span>;
            username=<span class="keyword">null</span>;
            password=<span class="keyword">null</span>;
            dbName=<span class="keyword">null</span>;
            conn=<span class="keyword">null</span>;
            stmt=<span class="keyword">null</span>;
            rs=<span class="keyword">null</span>;
        }
}
</code></pre><h3 id="3、编译生成class文件">3、编译生成class文件</h3><pre><code>javac -cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.24/</span>libexec<span class="regexp">/lib/</span>servlet-api.jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.24/</span>libexec<span class="regexp">/webapps/</span>test<span class="regexp">/WEB-INF/</span>classes<span class="regexp">/DBServlet.java</span>
</code></pre><h3 id="4、部署">4、部署</h3><p>　　在web.xml中</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
<span class="tag">&lt;<span class="title">web-app</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
    <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>driverName<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>            
            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>用户名<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>                
        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>        
            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>密码<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>                
        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>dbName<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>    
            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>test<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>    
        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>

  <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>

  <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
     <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>DBServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
     <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/DB<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>

<span class="tag">&lt;/<span class="title">web-app</span>&gt;</span>
</code></pre><h3 id="5、启动tomcat">5、启动tomcat</h3><pre><code>$ cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.24/</span>libexec/bin
$ ./startup.sh    
</code></pre><h3 id="6、运行">6、运行</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/DB" target="_blank" rel="external">http://localhost:8080/test/DB</a></p>
<h3 id="7、目录结构">7、目录结构</h3><pre><code><span class="string">|---test</span>
    <span class="string">|---WEB-INF</span>
        <span class="string">|---classes</span>
            <span class="string">|---DBServlet.java</span>
        <span class="string">|---lib</span>
        <span class="string">|---web.xml</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、准备数据库">1、准备数据库</h3><h4 id="(1)在本地mysql中create_一个数据库">(1)在本地mysql中create 一个数据库</h4><pre><code>$ mysql.server start
$ mysql -uroot -]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动创建Servlet转发页面]]></title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BD%AC%E5%8F%91%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet转发页面/</id>
    <published>2015-09-20T02:12:41.000Z</published>
    <updated>2015-10-21T14:33:04.000Z</updated>
    <content type="html"><![CDATA[<p>　　在上一篇的基础上，本节实现转发页面。</p>
<h3 id="1、创建servlet">1、创建servlet</h3><h4 id="（1）在test目录下，新建一个index-html">（1）在test目录下，新建一个index.html</h4><pre><code><span class="pi">&lt;?xml version='1.0' encoding='UTF-8' ?&gt;</span>
<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>
      <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>
      <span class="attribute">xmlns:h</span>=<span class="value">"http://java.sun.com/jsf/html"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span>
        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello index!<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
        <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"hello"</span> <span class="attribute">method</span>=<span class="value">"GET"</span>&gt;</span>
            First Name: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"first_name"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
            Last Name: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"last_name"</span>   /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Submit"</span> /&gt;</span>
        <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><h4 id="（2）在test/WEB_INF/classes下新建一个HEllo-java">（2）在test/WEB_INF/classes下新建一个HEllo.java</h4><pre><code><span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> javax.servlet.http.*;

public <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HttpServlet</span> {</span>

    public void doGet(<span class="type">HttpServletRequest</span> request,<span class="type">HttpServletResponse</span> response)<span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span>{
        response.setContentType(<span class="string">"text/html"</span>);

        <span class="type">PrintWriter</span> out = response.getWriter();
        <span class="type">String</span> title = <span class="string">"Using GET Method to Read Form Data"</span>;
        <span class="type">String</span> docType =
        <span class="string">"&lt;!doctype html public \"-//w3c//dtd html 4.0 "</span> +
        <span class="string">"transitional//en\"&gt;\n"</span>;
        out.println(docType +
                  <span class="string">"&lt;html&gt;\n"</span> +
                  <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +
                  <span class="string">"&lt;body&gt;\n"</span> +
                  <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +
                  <span class="string">"&lt;b&gt;First Name&lt;/b&gt;: "</span>
                  + request.getParameter(<span class="string">"first_name"</span>) + <span class="string">"\n"</span> +
                  <span class="string">"&lt;b&gt;Last Name&lt;/b&gt;: "</span>
                  + request.getParameter(<span class="string">"last_name"</span>) + <span class="string">"\n"</span> +
                  <span class="string">"&lt;/body&gt;"</span>+<span class="string">"&lt;/html&gt;"</span>);
  }
}
</code></pre><h3 id="2、编译生成class文件">2、编译生成class文件</h3><pre><code>javac -cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/lib/</span>servlet-api.jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/webapps/</span>test<span class="regexp">/WEB-INF/</span>classes<span class="regexp">/Hello.java</span>
</code></pre><h3 id="3、部署">3、部署</h3><p>　在web.xml中</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
<span class="tag">&lt;<span class="title">web-app</span>&gt;</span>
    <span class="comment">&lt;!-- Define servlets that are included in the example application --&gt;</span>

    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>

    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
<span class="tag">&lt;/<span class="title">web-app</span>&gt;</span>
</code></pre><h3 id="4、启动tomcat">4、启动tomcat</h3><pre><code>$ cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.24/</span>libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行及结果">5、运行及结果</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/index.html，填写内容，点击submit，跳转到了hello页面。" target="_blank" rel="external">http://localhost:8080/test/index.html，填写内容，点击submit，跳转到了hello页面。</a></p>
<h3 id="6、目录结构">6、目录结构</h3><pre><code><span class="string">|---test</span>
    <span class="string">|---index.html</span>
    <span class="string">|---WEB-INF</span>
        <span class="string">|---classes</span>
            <span class="string">|---Hello.java</span>
        <span class="string">|---lib</span>
        <span class="string">|---web.xml</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　在上一篇的基础上，本节实现转发页面。</p>
<h3 id="1、创建servlet">1、创建servlet</h3><h4 id="（1）在test目录下，新建一个index-html">（1）在test目录下，新建一个index.html</h4><pre><co]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动创建Servlet]]></title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet/</id>
    <published>2015-09-20T01:34:01.000Z</published>
    <updated>2015-10-21T14:32:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1、创建servlet">1、创建servlet</h3><p>　　（笔者的tomcat安装在/usr/local/Cellar/tomcat/8.0.26/）<br>　　在tomcat下的webapps下创建一个名为test的文件夹，然后在test里创建一个名为<em>WEB-INF</em>的文件（文件名严格遵守），在WEB-INF中再创建一个classes文件夹、一个lib文件夹、一个web.xml文件，然后在classes文件夹下创建一个Java文件ServletExample.java</p>
<pre><code><span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.io.PrintWriter;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletExample</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{
    <span class="keyword">private</span> <span class="keyword">int</span> count;

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>{

    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{
        PrintWriter out = servletResponse.getWriter();
        out.print(<span class="string">"Hello World"</span>);

    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{

    }
}
</code></pre><h3 id="2、编译生成class文件">2、编译生成class文件</h3><p>　　进行编译，这时候要手动指明jar包的位置，不然的话会找不到。</p>
<pre><code>javac -cp <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/lib/</span>servlet-api.jar <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec<span class="regexp">/webapps/</span>test<span class="regexp">/WEB-INF/</span>classes<span class="regexp">/ServletExample.java</span>
</code></pre><h3 id="3、部署servlet">3、部署servlet</h3><p>　　在上述新建的web.xml中，</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
<span class="tag">&lt;<span class="title">web-app</span>&gt;</span>
    <span class="comment">&lt;!-- Define servlets that are included in the example application --&gt;</span>

    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>

    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ServletExample<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>　　
</code></pre><p>　　其中，<servlet-name>对应创建的servlet的java文件名，<servlet-class>指明servlet所在的的路径包括包和类名，<url-pattern>可以任意取。每添加一个servlet时就必须在web.xml中进行部署。</url-pattern></servlet-class></servlet-name></p>
<h3 id="4、启动tomcat">4、启动tomcat</h3><p>　　到tomcat的bin目录下，运行startup.sh文件。(保险起见，可以在运行startup.sh之前，先运行shutdown.sh)</p>
<pre><code>$ cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>tomcat<span class="regexp">/8.0.26/</span>libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行及结果">5、运行及结果</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/test，结果为显示`Hello" target="_blank" rel="external">http://localhost:8080/test/test，结果为显示`Hello</a> World`　</p>
<h3 id="6、目录结构">6、目录结构</h3><pre><code><span class="string">|---test</span>
    <span class="string">|---WEB-INF</span>
        <span class="string">|---classes</span>
            <span class="string">|---ServletExample.java</span>
        <span class="string">|---lib</span>
        <span class="string">|---web.xml</span>
</code></pre><p>　　</p>
<blockquote>
<p>此外，可以在tomcat下的conf里的tomcat-users.xml配置username和password进行manager webapp。</p>
<pre><code><span class="tag">&lt;<span class="title">role</span> <span class="attribute">rolename</span>=<span class="value">"zhang'yu"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">user</span> <span class="attribute">username</span>=<span class="value">"用户名"</span> <span class="attribute">password</span>=<span class="value">"密码"</span> <span class="attribute">roles</span>=<span class="value">"manager-gui"</span>/&gt;</span>
</code></pre></blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1、创建servlet">1、创建servlet</h3><p>　　（笔者的tomcat安装在/usr/local/Cellar/tomcat/8.0.26/）<br>　　在tomcat下的webapps下创建一个名为test的文件夹，然后在test里创建一个名为]]>
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring-Auto-Wiring-@Autowired]]></title>
    <link href="http://yoursite.com/2015/08/30/Spring-Auto-Wiring-Autowired/"/>
    <id>http://yoursite.com/2015/08/30/Spring-Auto-Wiring-Autowired/</id>
    <published>2015-08-30T04:52:14.000Z</published>
    <updated>2015-10-11T12:38:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、bean">一、bean</h3><p>Customer.java</p>
<pre><code>package com.mkyong.common;

import org.springframework.beans.factory.annotation.Autowired;

public class Customer 
{
    @Autowired
    private <span class="keyword">Person</span> <span class="keyword">person</span>;
    private int type;
    private String action;

    //getter and setter methods

    @Override
    public String toString() {
        return <span class="string">"Customer <span class="subst">[person=" + person + ", type=" + type + ", action="
                + action + "]</span>"</span>;
}
}
</code></pre><p>Person.java</p>
<pre><code><span class="keyword">package</span> com.mkyong.common;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{
    <span class="keyword">private</span> String name;

    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> name;
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{
        <span class="keyword">this</span>.name = name;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">"]"</span>;
    }
}
</code></pre><h3 id="二、_AutowiredAnnotationBeanPostProcessor">二、 AutowiredAnnotationBeanPostProcessor</h3><p>　　使用@Autowired, 必须在<code>SpringBeans.xml</code>登记 <code>AutowiredAnnotationBeanPostProcessor</code>,下面有两种方式：</p>
<h4 id="1、context:annotation-config">1、context:annotation-config</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;

    &lt;context:annotation-config /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"CustomerBean"</span> <span class="type">class</span>=<span class="string">"com.mkyong.common.Customer"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"action"</span> value=<span class="string">"buy"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"type"</span> value=<span class="string">"1"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"PersonBean"</span> <span class="type">class</span>=<span class="string">"com.mkyong.common.Person"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"mkyong"</span> /&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre><h4 id="2、直接包含AutowiredAnnotationBeanPostProcessor">2、直接包含AutowiredAnnotationBeanPostProcessor</h4><p>将<code>&lt;context:annotation-config /&gt;</code>替换成<code>&lt;bean 
class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;/&gt;</code></p>
<h3 id="三、运行">三、运行</h3><p>在App.java中</p>
<pre><code><span class="keyword">package</span> com.mkyong.common;

<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(
                <span class="string">"SpringBeans.xml"</span>);

        Customer cust = (Customer) context.getBean(<span class="string">"customer"</span>);
        System.out.println(cust);
    }
}
</code></pre><h3 id="四、运行结果">四、运行结果</h3><pre><code>Customer [person=Person [<span class="keyword">name</span>=mkyongA], <span class="keyword">type</span>=<span class="number">1</span>, <span class="keyword">action</span>=buy]
</code></pre><h3 id="五、Dependency_checking">五、Dependency checking</h3><p>　　默认情况下，the @Autowired是使用Dependency checking的，确保属性总是可以成功注入。如果Spring没有找到匹配的bean去wire，就会扔出异常。可以使用<code>@Autowired(required=false)</code>去关闭Dependency checking。</p>
<h3 id="六、@Qualifier">六、@Qualifier</h3><p>　　@Qualifier用来控制哪个bean应该被autowire。例如，在下面的例子的SpringBeans.xml中配置了PersonBean1和PersonBean2.</p>
<pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;

    &lt;context:annotation-config /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"CustomerBean"</span> <span class="type">class</span>=<span class="string">"com.mkyong.common.Customer"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"action"</span> value=<span class="string">"buy"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"type"</span> value=<span class="string">"1"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"PersonBean1"</span> <span class="type">class</span>=<span class="string">"com.mkyong.common.Person"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"mkyong1"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"PersonBean2"</span> <span class="type">class</span>=<span class="string">"com.mkyong.common.Person"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"mkyong2"</span> /&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre><p>此时，在Customer.java中用@Qualifier(“PersonBean1”)就可以将PersonBean1注入到Customer的person属性中。</p>
<pre><code>package com.mkyong.common;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

public class Customer 
{
    @Autowired
    @Qualifier(<span class="string">"PersonBean1"</span>)
    private <span class="keyword">Person</span> <span class="keyword">person</span>;
    private int type;
    private String action;
    //getter and setter methods
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、bean">一、bean</h3><p>Customer.java</p>
<pre><code>package com.mkyong.common;

import org.springframework.beans.factory.annotation.A]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring-Auto-Wiring]]></title>
    <link href="http://yoursite.com/2015/08/30/Spring-Auto-Wiring/"/>
    <id>http://yoursite.com/2015/08/30/Spring-Auto-Wiring/</id>
    <published>2015-08-30T04:09:07.000Z</published>
    <updated>2015-10-11T12:43:41.000Z</updated>
    <content type="html"><![CDATA[<p>Spring支持5种自动装配模式，如下：</p>
<table>
<thead>
<tr>
<th>自动装配模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>
<td style="text-align:left">默认情况下，不自动装配，通过“ref”属性手动设定。</td>
</tr>
<tr>
<td>byName</td>
<td style="text-align:left">根据Property的Name自动装配，如果一个bean的name，和另一个bean中的Property的name相同，则自动装配这个bean到Property中。</td>
</tr>
<tr>
<td>byType</td>
<td style="text-align:left">根据Property的数据类型（Type）自动装配，如果一个bean的数据类型，兼容另一个bean中Property的数据类型，则自动装配。</td>
</tr>
<tr>
<td>constructor</td>
<td style="text-align:left">根据构造函数参数的数据类型，进行byType模式的自动装配。</td>
</tr>
<tr>
<td>autodetect</td>
<td style="text-align:left">如果发现默认的构造函数，用constructor模式，否则，用byType模式。</td>
</tr>
</tbody>
</table>
<h3 id="一、bean">一、bean</h3><p>CustomerDAO.java</p>
<pre><code><span class="keyword">package</span> com.mkyong.customer.dao;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> 
</span>{
    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;
    }    
}
</code></pre><p>CustomerService.java<br>    package com.mkyong.customer.services;</p>
<pre><code><span class="keyword">import</span> com.mkyong.customer.dao.CustomerDAO;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> 
</span>{
    CustomerDAO customerDAO;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDAO</span><span class="params">(CustomerDAO customerDAO)</span> </span>{
        <span class="keyword">this</span>.customerDAO = customerDAO;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;
    }            
}
</code></pre><h3 id="二、装配">二、装配</h3><h4 id="1、Auto-Wiring_‘no’">1、Auto-Wiring ‘no’</h4><p>　　默认情况下，需要通过’ref’来装配bean，如下：</p>
<pre><code>&lt;bean id=<span class="string">"customerService"</span> class=<span class="string">"com.mkyong.customer.services.CustomerService"</span>&gt;
        &lt;property name=<span class="string">"customerDAO"</span> <span class="keyword">ref</span>=<span class="string">"customerDAO"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean id=<span class="string">"customerDAO"</span> class=<span class="string">"com.mkyong.customer.dao.CustomerDAO"</span> /&gt;
</code></pre><h4 id="2、Auto-Wiring_‘byName’">2、Auto-Wiring ‘byName’</h4><p>　　根据属性Property的名字装配bean，这种情况，CustomerService设置了autowire=”byName”，Spring会自动寻找与属性名字“customerDAO”相同的bean，找到后，通过调用setCustomerDAO(CustomerDAO customerDAO)将其注入属性。</p>
<pre><code>&lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.services.CustomerService"</span> autowire=<span class="string">"byName"</span>&gt;
&lt;bean <span class="property">id</span>=<span class="string">"customerDAO"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.dao.CustomerDAO"</span> /&gt;
</code></pre><h4 id="3、Auto-Wiring_‘byType‘">3、Auto-Wiring ‘byType‘</h4><p>　　根据属性Property的数据类型自动装配，这种情况，Customer设置了autowire=”byType”，Spring会总动寻找与属性类型相同的bean。</p>
<pre><code>&lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.services.CustomerService"</span> autowire=<span class="string">"byType"</span>&gt;
&lt;bean <span class="property">id</span>=<span class="string">"customerDAO"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.dao.CustomerDAO"</span> /&gt;
</code></pre><p>　　如果配置文件中有两个类型相同的bean，将抛出UnsatisfiedDependencyException异常，所以，一旦选择了’byType’类型的自动装配，请确认你的配置文件中每个数据类型定义一个唯一的bean。</p>
<h4 id="4、Auto-Wiring_‘constructor’">4、Auto-Wiring ‘constructor’</h4><p>　　Spring会寻找与参数数据类型相同的bean，通过构造函数public Customer(Person person)将其注入。</p>
<h4 id="5、Auto-Wiring_‘autodetect">5、Auto-Wiring ‘autodetect</h4><p>　　这种情况下，Spring会先寻找Customer中是否有默认的构造函数，如果有相当于上边的’constructor’这种情况，用构造函数注入，否则，用’byType’这种方式注入，</p>
<blockquote>
<p>项目中autowire结合dependency-check一起使用是一种很好的方法，这样能够确保属性总是可以成功注入。</p>
</blockquote>
<pre><code>&lt;bean id=<span class="string">"customer"</span> class=<span class="string">"com.mkyong.customer.services.CustomerService"</span> 
            autowire=<span class="string">"autodetect"</span> dependency-check=<span class="string">"objects /&gt;

&lt;bean id="</span><span class="keyword">person</span><span class="string">" class="</span>com.mkyong.customer.dao.CustomerDAO<span class="string">" /</span>
</code></pre><p>　　<strong>最后，Auto-Wiring虽然使开发变得更加快速，但是增加了配置文件的复杂性，因此可以选择用手工装配、或者用<a href="http://zhangyuyu.github.io/2015/08/30/Spring-Auto-Wiring-Autowired/" target="_blank" rel="external">@Autowired</a>、或者结合<a href="http://zhangyuyu.github.io/2015/08/30/Spring-Auto-scanning/" target="_blank" rel="external">@Component</a>。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Spring支持5种自动装配模式，如下：</p>
<table>
<thead>
<tr>
<th>自动装配模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring-Auto-scanning]]></title>
    <link href="http://yoursite.com/2015/08/30/Spring-Auto-scanning/"/>
    <id>http://yoursite.com/2015/08/30/Spring-Auto-scanning/</id>
    <published>2015-08-30T03:38:10.000Z</published>
    <updated>2015-10-11T12:38:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、一般的bean">一、一般的bean</h3><h4 id="1、CustomerDAO-java">1、CustomerDAO.java</h4><pre><code><span class="keyword">package</span> com.mkyong.customer.dao;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> 
</span>{
    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;
    }    
}
</code></pre><h4 id="2、CustomerService-java">2、CustomerService.java</h4><pre><code><span class="keyword">package</span> com.mkyong.customer.services;

<span class="keyword">import</span> com.mkyong.customer.dao.CustomerDAO;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> 
</span>{
    CustomerDAO customerDAO;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDAO</span><span class="params">(CustomerDAO customerDAO)</span> </span>{
        <span class="keyword">this</span>.customerDAO = customerDAO;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;
    }

}
</code></pre><h4 id="3、Spring-Customer-xml">3、Spring-Customer.xml</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"customerDAO"</span> <span class="keyword">ref</span>=<span class="string">"customerDAO"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerDAO"</span> <span class="type">class</span>=<span class="string">"com.mkyong.customer.dao.CustomerDAO"</span> /&gt;

&lt;/beans&gt;
</code></pre><h3 id="二、auto_Scanning">二、auto Scanning</h3><h4 id="1、CustomerDAO-java-1">1、CustomerDAO.java</h4><pre><code><span class="tag">package</span> <span class="tag">com</span><span class="class">.mkyong</span><span class="class">.customer</span><span class="class">.dao</span>;

<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.stereotype</span><span class="class">.Component</span>;

<span class="at_rule">@<span class="keyword">Component</span>
public class CustomerDAO 
</span>{
    <span class="at_rule">@<span class="keyword">Override</span>
    public String <span class="function">toString</span>() </span>{
        <span class="tag">return</span> "<span class="tag">Hello</span> , <span class="tag">This</span> <span class="tag">is</span> <span class="tag">CustomerDAO</span>";
    }    
}
</code></pre><h4 id="2、CustomerService-java-1">2、CustomerService.java</h4><pre><code><span class="tag">package</span> <span class="tag">com</span><span class="class">.mkyong</span><span class="class">.customer</span><span class="class">.services</span>;

<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.beans</span><span class="class">.factory</span><span class="class">.annotation</span><span class="class">.Autowired</span>;
<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.stereotype</span><span class="class">.Component</span>;

<span class="tag">import</span> <span class="tag">com</span><span class="class">.mkyong</span><span class="class">.customer</span><span class="class">.dao</span><span class="class">.CustomerDAO</span>;

<span class="at_rule">@<span class="keyword">Component</span>
public class CustomerService 
</span>{
    <span class="at_rule">@<span class="keyword">Autowired</span>
    CustomerDAO customerDAO</span>;

    <span class="at_rule">@<span class="keyword">Override</span>
    public String <span class="function">toString</span>() </span>{
        <span class="tag">return</span> "<span class="tag">CustomerService</span> <span class="attr_selector">[customerDAO=" + customerDAO + "]</span>";
    }
}
</code></pre><h4 id="3、Spring-Customer-xml-1">3、Spring-Customer.xml</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span>
    http:<span class="comment">//www.springframework.org/schema/beans/spring-beans-2.5.xsd</span>
    http:<span class="comment">//www.springframework.org/schema/context</span>
    http:<span class="comment">//www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</span>

    &lt;context:component-scan base-package=<span class="string">"com.mkyong.customer"</span> /&gt;

&lt;/beans&gt;
</code></pre><h3 id="三、Antotation_Types——自动扫描组件的注释类型">三、Antotation Types——自动扫描组件的注释类型</h3><p>有4种注释类型，分别是：</p>
<p>@Component      ——表示一个自动扫描component</p>
<p>@Repository              ——表示持久化层的DAO component</p>
<p>@Service             ——表示业务逻辑层的Service component</p>
<p>@Controller        ——表示表示层的Controller component<br>Spring将会扫描所有用@Component注释过得组件。</p>
<p>　　实际上，@Repository、@Service、@Controller三种注释它们都用@Component注释过。所以，在项目中，我们可以将所有自动扫描组件都用@Component注释，Spring将会扫描所有用@Component注释过得组件。<br>　　但是，为了更好的可读性，应该在不同的应用层中，用不同的注释。</p>
<h3 id="四、Spring_Filter_Components_——_在自动扫描中过滤组件">四、Spring Filter Components —— 在自动扫描中过滤组件</h3><h4 id="1、Filter_Component——include">1、Filter Component——include</h4><p>　　用“filter”自动扫描注册组件，这些组件只要匹配定义的“regex”的命名规则，Clasee前就不需要用@Component进行注释。</p>
<h5 id="（1）DAO层，在CustomerDAO-java中">（1）DAO层，在CustomerDAO.java中</h5><pre><code><span class="keyword">package</span> com.mkyong.customer.dao;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> 
</span>{
    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Hello , This is CustomerDAO"</span>;
    }    
}
</code></pre><h5 id="（2）Service层，在CustomerService-java中">（2）Service层，在CustomerService.java中</h5><pre><code><span class="keyword">package</span> com.mkyong.customer.services;

<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="keyword">import</span> com.mkyong.customer.dao.CustomerDAO;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> 
</span>{
    <span class="annotation">@Autowired</span>
    CustomerDAO customerDAO;

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"CustomerService [customerDAO="</span> + customerDAO + <span class="string">"]"</span>;
    }

}
</code></pre><h5 id="（3）在Spring-Customer-xml中">（3）在Spring-Customer.xml中</h5><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span>
    xsi:schemaLocation="http:<span class="comment">//www.springframework.org/schema/beans</span>
    http:<span class="comment">//www.springframework.org/schema/beans/spring-beans-2.5.xsd</span>
    http:<span class="comment">//www.springframework.org/schema/context</span>
    http:<span class="comment">//www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;</span>

    &lt;context:component-scan base-package=<span class="string">"com.mkyong"</span> &gt;

        &lt;context:<span class="keyword">include</span>-filter <span class="keyword">type</span>=<span class="string">"regex"</span> 
                       expression=<span class="string">"com.mkyong.customer.dao.*DAO.*"</span> /&gt;

        &lt;context:<span class="keyword">include</span>-filter <span class="keyword">type</span>=<span class="string">"regex"</span> 
                       expression=<span class="string">"com.mkyong.customer.services.*Service.*"</span> /&gt;

    &lt;/context:component-scan&gt;

&lt;/beans&gt;
</code></pre><p>　　以上xml文件中，所有文件名字，只要包含DAO和Service<code>（*DAO.*，*Service.*）</code>关键字的，都将被检查注册到Spring容器中。</p>
<h4 id="2、Filter_Component——exclude">2、Filter Component——exclude</h4><p>　　用exclude，制定组件避免被Spring发现并被注册到容器中。<br>以下配置排除用@Service注释过的组件，注意type=”annotation”</p>
<pre><code>&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"com.lei.customer"</span> &gt;
        &lt;<span class="keyword">context</span>:exclude-filter <span class="keyword">type</span>=<span class="string">"annotation"</span> 
            expression=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;        
&lt;/<span class="keyword">context</span>:<span class="keyword">component</span>-scan&gt;
</code></pre><p>以下配置排除包含“DAO”关键字的组件</p>
<pre><code>&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"com.lei"</span> &gt;
        &lt;<span class="keyword">context</span>:exclude-filter <span class="keyword">type</span>=<span class="string">"regex"</span> 
            expression=<span class="string">"com.mkyong.customer.dao.*DAO.*"</span> /&gt;        
&lt;/<span class="keyword">context</span>:<span class="keyword">component</span>-scan&gt;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、一般的bean">一、一般的bean</h3><h4 id="1、CustomerDAO-java">1、CustomerDAO.java</h4><pre><code><span class="keyword">package</span> com.mkyo]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring_JavaConfig]]></title>
    <link href="http://yoursite.com/2015/08/30/Spring-JavaConfig/"/>
    <id>http://yoursite.com/2015/08/30/Spring-JavaConfig/</id>
    <published>2015-08-30T02:47:46.000Z</published>
    <updated>2015-10-11T12:52:38.000Z</updated>
    <content type="html"><![CDATA[<p>　　使用JavaConfig (@Configuration), 需要添加依赖，如下所示的最下方：</p>
<pre><code><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.mkyong.core<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>Spring3Example<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>Spring3Example<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="title">url</span>&gt;</span>

    <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
        <span class="tag">&lt;<span class="title">spring.version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="title">spring.version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>

    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

        <span class="comment">&lt;!-- Spring 3 dependencies --&gt;</span>
        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

        <span class="comment">&lt;!-- JavaConfig need this library --&gt;</span>
        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">project</span>&gt;</span>
</code></pre><h3 id="一、Spring_Bean">一、Spring Bean</h3><pre><code>package com.mkyong;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toString</span>(<span class="params">String msg</span>) </span>{

        System.<span class="keyword">out</span>.println(<span class="string">"Hello : "</span> + msg);
    }

}
</code></pre><h3 id="二、Spring配置">二、Spring配置</h3><p>1、回顾xml配置</p>
<pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"helloBean"</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.HelloWorld"</span>&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><p>2、JavaConfig，在AppConfig.java中</p>
<pre><code><span class="tag">package</span> <span class="tag">com</span><span class="class">.mkyong</span>;

<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.context</span><span class="class">.annotation</span><span class="class">.Bean</span>;
<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.context</span><span class="class">.annotation</span><span class="class">.Configuration</span>;

<span class="at_rule">@<span class="keyword">Configuration</span>
public class AppConfig </span>{

    <span class="at_rule">@<span class="keyword">Bean(name="helloBean")</span>
    public HelloWorld <span class="function">helloWorld</span>() </span>{
        <span class="tag">return</span> <span class="tag">new</span> <span class="tag">HelloWorld</span>();
    }

}
</code></pre><h3 id="三、运行，在App-java中">三、运行，在App.java中</h3><pre><code><span class="keyword">package</span> com.mkyong;

<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">void</span> main(String[] args) {

        <span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext("SpringBeans.xml");</span>
        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.<span class="keyword">class</span>);
        HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloBean"</span>);

        obj.toString(<span class="string">"Hello,Spring Java Config"</span>);

    }
}
</code></pre><h3 id="四、结果">四、结果</h3><pre><code><span class="rule"><span class="attribute">Hello </span>:<span class="value"> Hello,Spring Java Config</span></span>
</code></pre><h3 id="五、目录结构">五、目录结构</h3><img src="/imgs/Spring-JavaConfig.png" width="200" height="350">
<h3 id="六、补充@Import">六、补充@Import</h3><p>当要配置多个文件时候，可以用@Import</p>
<h4 id="1、在xml中">1、在xml中</h4><pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"config/customer.xml"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"config/scheduler.xml"</span>/&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><h4 id="2、在JavaConfig中">2、在JavaConfig中</h4><pre><code><span class="tag">package</span> <span class="tag">com</span><span class="class">.mkyong</span><span class="class">.config</span>;

<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.context</span><span class="class">.annotation</span><span class="class">.Configuration</span>;
<span class="tag">import</span> <span class="tag">org</span><span class="class">.springframework</span><span class="class">.context</span><span class="class">.annotation</span><span class="class">.Import</span>;

<span class="at_rule">@<span class="keyword">Configuration</span>
@<span class="function">Import</span>(</span>{ <span class="tag">CustomerConfig</span><span class="class">.class</span>, <span class="tag">SchedulerConfig</span><span class="class">.class</span> })
<span class="tag">public</span> <span class="tag">class</span> <span class="tag">AppConfig</span> <span class="rules">{

}</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　使用JavaConfig (@Configuration), 需要添加依赖，如下所示的最下方：</p>
<pre><code><span class="tag">&lt;<span class="title">project</span> <span class="at]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle-java-plugin]]></title>
    <link href="http://yoursite.com/2015/08/29/Gradle-java-plugin/"/>
    <id>http://yoursite.com/2015/08/29/Gradle-java-plugin/</id>
    <published>2015-08-29T11:42:22.000Z</published>
    <updated>2015-10-11T12:31:30.000Z</updated>
    <content type="html"><![CDATA[<p>　　java plugin给项目添加了java编译，测试和捆绑的能力，是很多其他gradle plugin的基础。<br>在build.gradle中加入<code>apply plugin: &#39;java&#39;</code>，即可使用java plugin。</p>
<h3 id="一、java_Plugin引入的主要Task">一、java Plugin引入的主要Task</h3><p>执行“gradle build”，我们已经可以看到java Plugin所引入的主要Task：</p>
<blockquote>
<p>:compileJava<br>:processResources<br>:classes<br>:jar<br>:assemble<br>:compileTestJava<br>:processTestResources<br>:testClasses<br>:test<br>:check<br>:build</p>
</blockquote>
<p>　　build也是java Plugin所引入的一个Task，它依赖于其他Task，其他Task又依赖于另外的Task，所以有了以上Task执行列表。以上Task执行列表基本上描述了java Plugin向项目中所引入的构建生命周期概念。<br>　　除了定义众多的Task外，java Plugin还向Project中加入了一些额外的Property。比如，sourceCompatibility用于指定在编译Java源文件时所使用的Java版本，archivesBaseName用于指定打包成Jar文件时的文件名称。
　　</p>
<h3 id="二、Source_sets">二、Source sets</h3><p>　　source set是一组编译和执行的源文件，和编译路径与执行路径有联系。Gradle的每个source set都包含有一个名字，并且包含有一个名为java的Property和一个名为resources的Property，他们分别用于表示该source set所包含的Java源文件集合和资源文件集合。</p>
<pre><code><span class="title">sourceSets</span> {
    <span class="title">main</span> {
        <span class="title">java</span> {
            <span class="title">srcDir</span> <span class="string">'src/java'</span>
        }
        resources {
            <span class="title">srcDir</span> <span class="string">'src/resources'</span>
        }
    }
}
</code></pre><p>　　Gradle会自动地为每一个新创建的source set创建相应的Task。对于名为mySourceSet的source set，Gradle将为其创建compile<mysourceset>Java、process<mysourceset>Resources和<mysourceset>Classes这3个Task。对于这里api而言，Gradle会为其创建名为compileApiJava、processApiResource和apiClasses Task。我们可以在命令行中执行”gradle apiClasses”。<br></mysourceset></mysourceset></mysourceset></p>
<blockquote>
<p>注意，对于main而言，Gradle并没有相应的compileMainJava，原因在于：由于main是Gradle默认创建的source set，并且又是及其重要的source set，Gradle便省略掉了其中的“Main”，而是直接使用了compileJava作为main的编译Task。对于test来说，Gradle依然采用了compileTestJava。</p>
</blockquote>
<p>　　通常的情况是，我们自己创建的名为api的source set会被其他source set所依赖，比如main中的类需要实现api中的某个接口等。此时我们需要做两件事情。<br>　　<em> 第一，我们需要在编译main之前对api进行编译，即编译main中Java源文件的Task应该依赖于api中的Task：<code>classes.dependsOn apiClasses</code>
　　</em> 第二，在编译main时，我们需要将api编译生成的class文件放在main的classpath下。此时，我们可以对main和test做以下配置：</p>
<pre><code><span class="title">sourceSets</span> {
  <span class="title">main</span> {
     <span class="title">compileClasspath</span> = compileClasspath + files(api.output.classesDir)
  }
  test {
     <span class="title">runtimeClasspath</span> = runtimeClasspath + files(api.output.classesDir)
  }
}
</code></pre><h3 id="三、依赖管理">三、依赖管理</h3><h4 id="1、repositories">1、repositories</h4><p>　　在声明对第三方类库的依赖时，我们需要告诉Gradle在什么地方去获取这些依赖，即配置Gradle的Repository。在配置好依赖之后，Gradle会自动地下载这些依赖到本地。Gradle可以使用Maven和Ivy的Repository，同时它还可以使用本地文件系统作为Repository。<br>配置Maven的Repository如下：</p>
<pre><code><span class="keyword">repositories</span> {
  mavenCentral()
}
</code></pre><h4 id="2、configurations">2、configurations</h4><p>　　Gradle将对依赖进行分组，每一组依赖称为一个Configuration，在声明依赖时，我们实际上是在设置不同的Configuration。</p>
<h5 id="(1）定义一个Configuration：">(1）定义一个Configuration：</h5><pre><code><span class="title">configurations</span> {
  <span class="title">myDependency</span>
}
</code></pre><h5 id="(2)_加入实际的依赖项：">(2) 加入实际的依赖项：</h5><pre><code><span class="title">dependencies</span> {
  <span class="title">myDependency</span> <span class="string">'org.apache.commons:commons-lang3:3.0'</span>
}
</code></pre><blockquote>
<p>java Plugin定义了compile和testCompile这两个Configuration，分别用于编译Java源文件和编译Java测试源文件。也定义了runtime和testRuntime，分别用于在程序运行和测试运行时加入所配置的依赖。</p>
</blockquote>
<p>　　因此，下述声明依赖时，可以直接使用dependencies：</p>
<pre><code>dependencies {
    compile <span class="string">group:</span> <span class="string">'commons-collections'</span>, <span class="string">name:</span> <span class="string">'commons-collections'</span>, <span class="string">version:</span> <span class="string">'3.2'</span>
    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.+'</span>
}
</code></pre><h5 id="(3）获取classpath">(3）获取classpath</h5><pre><code><span class="keyword">task</span> showMyDependency &lt;&lt; {
  <span class="keyword">println</span> <span class="keyword">configurations</span>.myDependency.asPath
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　java plugin给项目添加了java编译，测试和捆绑的能力，是很多其他gradle plugin的基础。<br>在build.gradle中加入<code>apply plugin: &#39;java&#39;</code>，即可使用java plugin。</]]>
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle-property]]></title>
    <link href="http://yoursite.com/2015/08/29/Gradle-property/"/>
    <id>http://yoursite.com/2015/08/29/Gradle-property/</id>
    <published>2015-08-29T02:38:22.000Z</published>
    <updated>2015-10-11T12:22:31.000Z</updated>
    <content type="html"><![CDATA[<p>　　很多Plugin都会向Project中加入额外的Property，在使用这些Plugin时，我们需要对这些Property进行赋值。<br>　　Gradle在默认情况下已经为Project定义了很多Property，其中比较常用的有：</p>
<blockquote>
<p>project：Project本身<br>name：Project的名字<br>path：Project的绝对路径<br>description：Project的描述信息<br>buildDir：Project构建结果存放目录<br>version：Project的版本号</p>
</blockquote>
<h3 id="一、project属性配置">一、project属性配置</h3><pre><code>version = <span class="string">'this is the project version'</span>
<span class="keyword">description</span> = <span class="string">'this is the project description'</span>
<span class="keyword">task</span> showProjectProperties &lt;&lt; {
  <span class="keyword">println</span> version
  <span class="keyword">println</span> <span class="keyword">project</span>.<span class="keyword">description</span>
}
</code></pre><p>　　注意，在打印description时，我们使用了project.description，而不是直接使用description。原因在于，Project和Task都拥有description属性，而定义Task的闭包将delegate设置成了当前的Task，故如果直接使用description，此时打印的是showProjectProperties的description，而不是Project的，所以我们需要显式地指明project。</p>
<h3 id="二、Task属性配置">二、Task属性配置</h3><h4 id="1、对desctiption属性的配置">1、对desctiption属性的配置</h4><h5 id="（1）定义时候对description属性的配置">（1）定义时候对description属性的配置</h5><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> myTask &lt;&lt; {
  <span class="keyword">description</span> = <span class="string">"this is myProperty"</span>
  <span class="keyword">println</span> <span class="keyword">description</span>
}
</code></pre><h5 id="（2）myTask-description">（2）myTask.description</h5><pre><code><span class="keyword">task</span> myTask &lt;&lt; {
      <span class="keyword">println</span> <span class="keyword">description</span>
}
myTask.<span class="keyword">description</span> = <span class="string">"this is myProperty"</span>
</code></pre><h5 id="(3)_同名的方法中设置description">(3) 同名的方法中设置description</h5><pre><code><span class="keyword">task</span> myTask &lt;&lt; {
      <span class="keyword">println</span> <span class="keyword">description</span>
}
myTask{
      <span class="keyword">description</span> = <span class="string">"this is myProperty"</span>
}
</code></pre><h5 id="(4）调用Task的configure()方法,配置description属性">(4）调用Task的configure()方法,配置description属性</h5><p>build.gradle</p>
<pre><code><span class="keyword">task</span> myTask &lt;&lt; {
  <span class="keyword">println</span> <span class="keyword">description</span>
}
myTask.configure {
  <span class="keyword">description</span> = <span class="string">"this is myProperty"</span>
}
</code></pre><p>运行，结果：</p>
<pre><code>$ gradle -q myTask
<span class="keyword">this</span> <span class="keyword">is</span> myProperty
</code></pre><h4 id="2、自定义属性的配置">2、自定义属性的配置</h4><h5 id="(1)_额外自定义属性的配置">(1) 额外自定义属性的配置</h5><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> myTask {
    ext.myProperty = <span class="string">"this is myProperty"</span>
}

<span class="keyword">task</span> printTaskProperties &lt;&lt; {
    <span class="keyword">println</span> myTask.myProperty
}
</code></pre><p>也可以使用闭包的方式：</p>
<pre><code><span class="title">ext</span> { <span class="title">myProperty</span> = <span class="string">"this is myProperty"</span>}
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -q printTaskProperties
<span class="keyword">this</span> <span class="keyword">is</span> myProperty
</code></pre><h5 id="(2)_通过命令行参数自定义Property">(2) 通过命令行参数自定义Property</h5><p>build.gradle</p>
<pre><code><span class="keyword">task</span> myTask &lt;&lt; {
      <span class="keyword">println</span> myProperty
}
</code></pre><p>此时，会报错：</p>
<pre><code>* What went wrong:
Execution failed <span class="keyword">for</span> task <span class="string">':myTask'</span>.
&gt; Could <span class="keyword">not</span> find <span class="keyword">property</span> <span class="string">'myProperty'</span> <span class="keyword">on</span> task <span class="string">':myTask'</span>.
</code></pre><p>　　表示myProperty并没有被定义，在调用gradle命令时，通过-P参数传入该Property：</p>
<pre><code>$ gradle -PmyProperty=<span class="string">"this is myProperty"</span> myTask                  
:myTask
<span class="keyword">this</span> <span class="keyword">is</span> myProperty
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　很多Plugin都会向Project中加入额外的Property，在使用这些Plugin时，我们需要对这些Property进行赋值。<br>　　Gradle在默认情况下已经为Project定义了很多Property，其中比较常用的有：</p>
<blockquote>
]]>
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle]]></title>
    <link href="http://yoursite.com/2015/08/29/Gradle/"/>
    <id>http://yoursite.com/2015/08/29/Gradle/</id>
    <published>2015-08-28T16:01:59.000Z</published>
    <updated>2015-10-11T12:19:31.000Z</updated>
    <content type="html"><![CDATA[<p>　　每个Gradle build由一个或多个projects组成，一个project代表用gradle做了什么，比如可能代表了一个JAR库或者一个网页应用程序。<br>　　一个project由一个或多个tasks组成，一个Task表示一个逻辑上较为独立的执行过程，比如编译Java源代码，拷贝文件，打包Jar文件，甚至可以是执行一个系统命令或者调用Ant。另外，一个Task可以读取和设置Project的Property以完成特定的操作。<br>　　gradle命令在当前路径下寻找一个叫build.gradle的文件夹，也叫做build script,严格来说build configuration script，它定义了project和其tasks.</p>
<h3 id="一、HelloWorld">一、HelloWorld</h3><h4 id="1、调用Project的task()方法">1、调用Project的task()方法</h4><p>在build.gradle中</p>
<pre><code><span class="keyword">task</span> hello &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'Hello world!'</span>
}
</code></pre><p>　　其中<code>&lt;&lt;</code>表示向hello中加入执行代码。大括号之间的内容则表示传递给task()方法的一个闭包。</p>
<h4 id="2、使用doLast加入执行过程">2、使用doLast加入执行过程</h4><pre><code><span class="keyword">task</span> hello {
        <span class="keyword">doLast</span> {
            <span class="keyword">println</span> <span class="string">'Hello world!'</span>
        }
    }    
</code></pre><h4 id="3、create方式">3、create方式</h4><pre><code><span class="tag">tasks</span><span class="class">.create</span>(<span class="rule"><span class="attribute">name</span>:<span class="value"> <span class="string">'hello'</span>) &lt;&lt; {
   println <span class="string">'Hello world!'</span>
}</span></span>
</code></pre><h4 id="4、运行，结果">4、运行，结果</h4><p>　　在terminal中输入<code>gradle -q hello</code><br>　　其中，<code>-q</code>作用是隐藏了日志信息，使其只显示tasks的输出，可以选择使用。</p>
<pre><code>$ gradle -<span class="tag">q</span> hello
Hello world!
</code></pre><p>　　</p>
<h3 id="二、使用Grovvy">二、使用Grovvy</h3><h4 id="eg1:">eg1:</h4><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> upper &lt;&lt; {
    String someString = <span class="string">'mY_nAmE'</span>
    <span class="keyword">println</span> <span class="string">"Original: "</span> + someString 
    <span class="keyword">println</span> <span class="string">"Upper case: "</span> + someString.toUpperCase()
}
</code></pre><p>Terminal：</p>
<pre><code>$ gradle -q upper
<span class="string">Original:</span> mY_nAmE
Upper <span class="string">case:</span> MY_NAME
</code></pre><h4 id="eg2:">eg2:</h4><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> <span class="keyword">count</span> &lt;&lt; {
    <span class="number">4</span>.<span class="keyword">times</span> { <span class="keyword">print</span> <span class="string">"$it "</span> }
}
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -q count
<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> 
</code></pre><h3 id="三、task依赖">三、task依赖</h3><p>　　taskA依赖于taskB，那么在执行taskA时，Gradle会先执行taskB，然后再执行taskA。</p>
<h4 id="1、声明Task依赖关系的一种方式是在定义一个Task的时候：">1、声明Task依赖关系的一种方式是在定义一个Task的时候：</h4><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> taskX &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'taskY!'</span>
}
<span class="keyword">task</span> taskY(dependsOn: taskX){
    <span class="keyword">println</span> <span class="string">"taskX!"</span>
}
</code></pre><p>Terminal:</p>
<pre><code>&gt; gradle -<span class="tag">q</span> taskY
taskX
taskY
</code></pre><h4 id="2、被依赖的Task还不存在的时候">2、被依赖的Task还不存在的时候</h4><p>在写depondsOn时候，对被依赖的task加上引号<code>&#39;task&#39;</code><br>build.gradle:</p>
<pre><code><span class="keyword">task</span> taskX(dependsOn: <span class="string">'taskY'</span>) &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'taskX'</span>
}
<span class="keyword">task</span> taskY &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'taskY'</span>    
}
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -<span class="tag">q</span> taskX
taskY
taskX    
</code></pre><h4 id="3、Example">3、Example</h4><p>gradle.build</p>
<pre><code><span class="title">task</span> branch &lt;&lt; {
    <span class="title">println</span> <span class="string">"use version=<span class="variable">$version</span>"</span>
}

task myTask(dependsOn: <span class="string">'mybranch'</span>) &lt;&lt; {
    <span class="title">println</span> <span class="string">'this is my task!'</span>
}

gradle.taskGraph.whenReady {<span class="title">taskGraph</span> -&gt;
    if (taskGraph.hasTask(myTask)) {
        <span class="title">version</span> = <span class="string">'1.0'</span>
    } else {
        <span class="title">version</span> = <span class="string">'2.0'</span>
    }
}    
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -q branch  
<span class="operator"><span class="keyword">use</span> <span class="keyword">version</span>=<span class="number">2.0</span>
$ gradle -q myTask
<span class="keyword">use</span> <span class="keyword">version</span>=<span class="number">1.0</span>
this <span class="keyword">is</span> my task!</span>
</code></pre><h3 id="四、动态task">四、动态task</h3><p>build.gradle:</p>
<pre><code><span class="number">4</span>.<span class="keyword">times</span> { counter -&gt;
    <span class="keyword">task</span> <span class="string">"task$counter"</span> &lt;&lt; {
        <span class="keyword">println</span> <span class="string">"I'm task number $counter"</span>
    }
}
</code></pre><p>Ternimal:</p>
<pre><code>$ gradle -<span class="tag">q</span> task1
I<span class="string">'m task number 1</span>
</code></pre><p>　　注意，task是从0开始的，即此处存在task0、task1、task2、task3。可输入<code>gradle tasks</code>查看所有task。</p>
<h3 id="五、操控现有task">五、操控现有task</h3><h4 id="1、添加依赖">1、添加依赖</h4><p>build.gradle:</p>
<pre><code><span class="number">4</span>.<span class="keyword">times</span> { counter -&gt;
    <span class="keyword">task</span> <span class="string">"task$counter"</span> &lt;&lt; {
        <span class="keyword">println</span> <span class="string">"I'm task number $counter"</span>
    }
}
task0.dependsOn task2, task3
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -q task0
I'm task <span class="type">number</span> <span class="number">2</span>
I'm task <span class="type">number</span> <span class="number">3</span>
I'm task <span class="type">number</span> <span class="number">0</span>
</code></pre><h4 id="2、添加行为">2、添加行为</h4><p>build.gradle:</p>
<pre><code><span class="keyword">task</span> hello &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'Hello world!'</span>
}
hello.<span class="keyword">doFirst</span> {
    <span class="keyword">println</span> <span class="string">'Hello first'</span>
}
hello.<span class="keyword">doLast</span> {
    <span class="keyword">println</span> <span class="string">'Hello last'</span>
}
hello &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'Hello hello!'</span>
}
</code></pre><p>Treminal:</p>
<pre><code>$ gradle -q hello
Hello <span class="keyword">first</span>
Hello world!
Hello <span class="keyword">last</span>
Hello hello!
</code></pre><h3 id="六、默认task">六、默认task</h3><p>build.gradle:</p>
<pre><code>defaultTasks <span class="string">'clean'</span>, <span class="string">'run'</span>

<span class="keyword">task</span> clean &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'Default Cleaning!'</span>
}

<span class="keyword">task</span> run &lt;&lt; {
    <span class="keyword">println</span> <span class="string">'Default Running!'</span>
}

<span class="keyword">task</span> other &lt;&lt; {
    <span class="keyword">println</span> <span class="string">"I'm not a default task!"</span>
}
</code></pre><p>Terminal:</p>
<pre><code>$ gradle -q
<span class="keyword">Default</span> Cleaning!
<span class="keyword">Default</span> Running!
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　每个Gradle build由一个或多个projects组成，一个project代表用gradle做了什么，比如可能代表了一个JAR库或者一个网页应用程序。<br>　　一个project由一个或多个tasks组成，一个Task表示一个逻辑上较为独立的执行过程，比如编译J]]>
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SpringMVC_Gradle_xml]]></title>
    <link href="http://yoursite.com/2015/08/28/SpringMVC-Gradle-xml/"/>
    <id>http://yoursite.com/2015/08/28/SpringMVC-Gradle-xml/</id>
    <published>2015-08-28T04:35:55.000Z</published>
    <updated>2015-10-11T12:54:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、Gradle_Build">一、Gradle Build</h3><pre><code>apply plugin: <span class="string">'java'</span>
apply plugin: <span class="string">'war'</span>
apply plugin: <span class="string">'idea'</span>
apply plugin: <span class="string">'jetty'</span>

<span class="comment">// JDK 7</span>
<span class="keyword">sourceCompatibility</span> = <span class="number">1.7</span>
<span class="keyword">targetCompatibility</span> = <span class="number">1.7</span>

<span class="keyword">repositories</span> {
    mavenLocal()
    mavenCentral()
}

<span class="keyword">dependencies</span> {

    <span class="keyword">compile</span> <span class="string">'ch.qos.logback:logback-classic:1.1.3'</span>
    <span class="keyword">compile</span> <span class="string">'org.springframework:spring-webmvc:4.1.6.RELEASE'</span>
    <span class="keyword">compile</span> <span class="string">'javax.servlet:jstl:1.2'</span>

}

<span class="comment">// Embeded Jetty for testing</span>
jettyRun{
    contextPath = <span class="string">"spring4"</span>
    httpPort = <span class="number">8080</span>
}

jettyRunWar{
    contextPath = <span class="string">"spring4"</span>
    httpPort = <span class="number">8080</span>
}
</code></pre><p>　　然后，在Terminal里运行<code>gradle idea</code>,下载相关依赖，支持intellij IDE。</p>
<h3 id="二、Spring_MVC">二、Spring MVC</h3><h4 id="1、WelcomeController-java">1、WelcomeController.java</h4><h4 id="2、HelloWorldService-java">2、HelloWorldService.java</h4><h4 id="3、logback-xml">3、logback.xml</h4><h4 id="4、spring-core-config-xml">4、spring-core-config.xml</h4><h4 id="5、spring-mvc-config-xml">5、spring-mvc-config.xml</h4><h4 id="6、web-xml">6、web.xml</h4><h3 id="三、运行，输出结果">三、运行，输出结果</h3><p>　　在terminal中运行<code>gradle jettyRun</code>：</p>
<pre><code><span class="variable">$ </span>gradle jettyRun                    
<span class="symbol">:compileJava</span>
<span class="symbol">:processResources</span>
<span class="symbol">:classes</span>
<span class="symbol">:jettyRun</span>
<span class="constant">Building </span><span class="number">75</span>% &gt; <span class="symbol">:jettyRun</span> &gt; <span class="constant">Running </span>at <span class="symbol">http:</span>/<span class="regexp">/localhost:8080/spring</span>4
</code></pre><p>　　然后，在浏览器输入<a href="http://localhost:8080/spring4，可以看到页面。" target="_blank" rel="external">http://localhost:8080/spring4，可以看到页面。</a></p>
<h3 id="四、目录结构">四、目录结构</h3><img src="/imgs/SpringMVC-Gradle-xml.png" width="300" height="500">
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、Gradle_Build">一、Gradle Build</h3><pre><code>apply plugin: <span class="string">'java'</span>
apply plugin: <span class="string">'w]]>
    </summary>
    
      <category term="SpingMVC" scheme="http://yoursite.com/tags/SpingMVC/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SpringAOP_Pointcut&Advisor]]></title>
    <link href="http://yoursite.com/2015/08/27/SpringAOP-Pointcut-Advisor/"/>
    <id>http://yoursite.com/2015/08/27/SpringAOP-Pointcut-Advisor/</id>
    <published>2015-08-27T14:56:33.000Z</published>
    <updated>2015-10-11T12:13:02.000Z</updated>
    <content type="html"><![CDATA[<p>　　上一篇的Spring AOP Advice例子中，Class（CustomerService）中的全部method都被自动的拦截了。但是大多情况下，你只需要去拦截一两个method。这样就引入了Pointcut（切入点）的概念，它允许你根据method的名字去拦截指定的method。另外，一个Pointcut必须结合一个Advisor来使用。</p>
<blockquote>
<p>在Spring AOP中，有3个常用的概念:</p>
<ul>
<li>Advices：表示一个method执行前或执行后的动作。</li>
<li>Pointcut：表示根据method的名字或者正则表达式去拦截一个method。</li>
<li>Advisor：Advice和Pointcut组成的独立的单元，并且能够传给proxy factory 对象。</li>
</ul>
</blockquote>
<h3 id="一、回顾Around_advice">一、回顾Around advice</h3><h4 id="1、在CustomerService-java中">1、在CustomerService.java中</h4><pre><code>package com.zhangyu.customer.services;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> {
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String occupation;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>{    <span class="keyword">this</span>.name = name;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer name : "</span> + <span class="keyword">this</span>.name);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOccupation</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer occupation : "</span> + <span class="keyword">this</span>.occupation);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOccupation</span>(<span class="params">String occupation</span>) </span>{<span class="keyword">this</span>.occupation = occupation;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printThrowException</span>(<span class="params"></span>) </span>{
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();
    }    
}
</code></pre><h4 id="2、_在HelloAroundMethod-java中">2、 在HelloAroundMethod.java中</h4><pre><code>package com.zhangyu.aop;

<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInterceptor</span>;
<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInvocation</span>;

public class <span class="type">HelloAroundMethod</span> implements <span class="type">MethodInterceptor</span> {
    @<span class="type">Override</span>
    public <span class="type">Object</span> invoke(<span class="type">MethodInvocation</span> methodInvocation) throws <span class="type">Throwable</span> {

        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"Method name : "</span> + methodInvocation.getMethod().getName());

        // same <span class="keyword">with</span> <span class="type">MethodBeforeAdvice</span>
        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before method ,hello"</span>);

        <span class="keyword">try</span> {
            <span class="type">Object</span> <span class="literal">result</span> = methodInvocation.proceed();

            // same <span class="keyword">with</span> <span class="type">AfterReturningAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before after ,hello!"</span>);
            <span class="keyword">return</span> <span class="literal">result</span>;
        } catch (<span class="type">IllegalArgumentException</span> e) {
            // same <span class="keyword">with</span> <span class="type">ThrowsAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Throw exception ,hello!"</span>);
            throw e;
        }
    }
}
</code></pre><h4 id="3、_在Spring-Customer-xml中">3、 在Spring-Customer.xml中</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;helloAroundMethodBean&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h4 id="4、运行，在App-java中">4、运行，在App.java中</h4><pre><code><span class="keyword">package</span> com.zhangyu.common;

<span class="keyword">import</span> com.zhangyu.customer.services.CustomerService;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> class App {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
        ApplicationContext appContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(
                <span class="keyword">new</span> <span class="keyword">String</span>[] { <span class="string">"Spring-Customer.xml"</span> });

        CustomerService cust = (CustomerService) appContext
                .getBean(<span class="string">"customerService"</span>);

        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printName();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printOccupation();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        <span class="keyword">try</span> {
            cust.printThrowException();
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
}    　　
</code></pre><h4 id="5、运行结果">5、运行结果</h4><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printThrowException
HelloAroundMethod : Before method ,hello!
HelloAroundMethod : Throw exception ,hello!
</code></pre><h3 id="二、Pointcut">二、Pointcut</h3><p>　　可以用名字匹配法和正则表达式匹配法去匹配要拦截的method。</p>
<h4 id="1、Pointcut——名字匹配法">1、Pointcut——名字匹配法</h4><h5 id="（1）通过pointcut和advisor拦截printName()方法。">（1）通过pointcut和advisor拦截printName()方法。</h5><p>　　<em> 创建一个NameMatchMethodPointcut的bean，将你想拦截的方法的名字printName注入到属性mappedName。
　　</em> 创建一个DefaultPointcutAdvisor的advisor bean，将pointcut和advice关联起来。<br>　　* 更改代理的interceptorNames的value值为customerAdvisor。</p>
<pre><code>    &lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;customerAdvisor&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerPointcut"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodPointcut"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"mappedName"</span> value=<span class="string">"printName"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerAdvisor"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"pointcut"</span> <span class="keyword">ref</span>=<span class="string">"customerPointcut"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"helloAroundMethodBean"</span> /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><p>#####（2）运行，结果如下：</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　　可以看到，只拦截了printName（），在其前后分别输出了“Before method ，hello!”和“After method ,hello!”</p>
<p>#####（3）另外<br>　　以上配置中pointcut和advisor可以合并在一起配置，即不用单独配置customerPointcut和customerAdvisor，只要配置customerAdvisor时class选择NameMatchMethodPointcutAdvisor如下：</p>
<pre><code>&lt;bean id=<span class="string">"customerAdvisor"</span> class=<span class="string">"org.springframework.aop.support.NameMatchMethodPointcutAdvisor"</span>&gt;
    &lt;property name=<span class="string">"mappedName"</span> value=<span class="string">"printName"</span> /&gt;
    &lt;property name=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"helloAroundMethodBean"</span> /&gt;
&lt;/bean&gt;
</code></pre><p>　　但是，如果将method名字单独配置成pointcut（切入点），advice和pointcut的结合会更灵活，使一个pointcut可以和多个advice结合，更符合松耦合理念。</p>
<h4 id="2、Pointcut——正则表达式匹配法">2、Pointcut——正则表达式匹配法</h4><h5 id="(1)_你可以配置用正则表达式匹配需要拦截的method：">(1) 你可以配置用正则表达式匹配需要拦截的method：</h5><pre><code>    &lt;bean <span class="property">id</span>=<span class="string">"customerAdvisor"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"patterns"</span>&gt;
        &lt;<span class="type">list</span>&gt;
            &lt;value&gt;.*Occu.*&lt;/value&gt;
        &lt;/<span class="type">list</span>&gt;
    &lt;/<span class="keyword">property</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"helloAroundMethodBean"</span> /&gt;
&lt;/bean&gt;
</code></pre><h5 id="(2)_结果">(2) 结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　可以看到，拦截名字中包含了Occu字符的method，这里是printOccupation()。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　上一篇的Spring AOP Advice例子中，Class（CustomerService）中的全部method都被自动的拦截了。但是大多情况下，你只需要去拦截一两个method。这样就引入了Pointcut（切入点）的概念，它允许你根据method的名字去拦截指定的]]>
    </summary>
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SpringAOP_Advice]]></title>
    <link href="http://yoursite.com/2015/08/27/SpringAOP-Advice/"/>
    <id>http://yoursite.com/2015/08/27/SpringAOP-Advice/</id>
    <published>2015-08-27T12:57:00.000Z</published>
    <updated>2015-10-11T12:04:57.000Z</updated>
    <content type="html"><![CDATA[<p>　　Spring AOP即Aspect-oriented programming，面向切面编程，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题。简单地说，就是一个拦截器（interceptor）拦截一些处理过程。例如，当一个method被执行，Spring AOP能够劫持正在运行的method，在method执行前或者后加入一些额外的功能。</p>
<blockquote>
<p>在Spring AOP中，支持4中类型的通知（Advice）:<br></p>
<ul>
<li>Before advice      ——method执行前通知<br></li>
<li>After returning advice ——method返回一个结果后通知<br></li>
<li>After throwing advice – method抛出异常后通知<br></li>
<li>Around advice – 环绕通知，结合了以上三种</li>
</ul>
</blockquote>
<h3 id="一、不使用AOP的简单例子">一、不使用AOP的简单例子</h3><h4 id="1、在CustomerService-java中">1、在CustomerService.java中</h4><pre><code>package com.zhangyu.customer.services;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> {
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String occupation;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>{<span class="keyword">this</span>.name = name;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer name : "</span> + <span class="keyword">this</span>.name);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOccupation</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer occupation : "</span> + <span class="keyword">this</span>.occupation);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOccupation</span>(<span class="params">String occupation</span>) </span>{<span class="keyword">this</span>.occupation = occupation;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printThrowException</span>(<span class="params"></span>) </span>{
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();
    }    
}
</code></pre><h4 id="2、在Spring-Customer-xml中">2、在Spring-Customer.xml中</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h4 id="3、运行，在App-java中">3、运行，在App.java中</h4><pre><code><span class="keyword">package</span> com.zhangyu.common;

<span class="keyword">import</span> com.zhangyu.customer.services.CustomerService;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> class App {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
        ApplicationContext appContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(
                <span class="keyword">new</span> <span class="keyword">String</span>[] { <span class="string">"Spring-Customer.xml"</span> });

        CustomerService cust = (CustomerService) appContext
                .getBean(<span class="string">"customerService"</span>);

        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printName();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printOccupation();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        <span class="keyword">try</span> {
            cust.printThrowException();
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
}
</code></pre><h4 id="4、结果">4、结果</h4><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><h3 id="二、使用AOP">二、使用AOP</h3><h4 id="1、Before_Advice">1、Before Advice</h4><h5 id="（1）HelloBeforeMethod-java中">（1）HelloBeforeMethod.java中</h5><p>　　创建一个实现了接口MethodBeforeAdvice的class，method运行前，将运行HelloBeforeMethod.java　　</p>
<pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> java.lang.reflect.Method;
<span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloBeforeMethod</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>{
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object <span class="keyword">target</span>)</span>
            <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloBeforeMethod : Before method ,hello"</span>);
    }
}
</code></pre><h5 id="(2)_Spring-Customer-xml中">(2) Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloBeforeMethodBean</code>，然后创建一个新的代理（proxy），命名为<code>customerServiceProxy</code>。其中,<code>target</code>定义你想劫持哪个bean，<code>interceptorNames</code>定义你想用哪个class(advice)劫持target。</p>
<pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;
    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;
    &lt;bean <span class="property">id</span>=<span class="string">"helloBeforeMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloBeforeMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;helloBeforeMethodBean&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h5 id="(3)_运行，在App-java中">(3) 运行，在App.java中　　</h5><p>　　将CustomerService cust改为从<code>customerServiceProxy</code>中getBean:</p>
<pre><code>CustomerService cust = <span class="params">(CustomerService)</span>appContext.getBean<span class="params">(<span class="string">"customerServiceProxy"</span>)</span>;
</code></pre><p>#####（4）结果</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
</code></pre><h4 id="2、After_Advice">2、After Advice</h4><h5 id="(1)_在HelloAfterMethod-java中">(1) 在HelloAfterMethod.java中</h5><pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> java.lang.reflect.Method;
<span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAfterMethod</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>{
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method,
            Object[] args, Object <span class="keyword">target</span>)</span> <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloAfterMethod : After method ,hello!"</span>);
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloAfterMethodBean</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloAfterMethodBean</code>。
　　</p>
<h5 id="（3）运行结果">（3）运行结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
HelloAfterMethod : After method ,hello
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
HelloAfterMethod : After method ,hello
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　　执行到cust.printThrowException()后，直接抛出异常，方法没有正常执行完毕（或者说没有返回结果），所以不运行切入的afterReturning方法。</p>
<h4 id="3、After_throwing_advice">3、After throwing advice</h4><p>　　创建一个实现了ThrowsAdvice接口的class，劫持IllegalArgumentException异常，目标method运行时，抛出IllegalArgumentException异常后，运行切入的方法。</p>
<h5 id="(1)_在HelloThrowException-java中">(1) 在HelloThrowException.java中</h5><pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThrowException</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(IllegalArgumentException e)</span> <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloThrowException : Throw exception ,hello"</span>);
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中-1">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloThrowExceptionBean</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloThrowExceptionBean</code>。
　　</p>
<h5 id="（3）运行结果-1">（3）运行结果　　</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloThrowException : Throw exception ,hello
</code></pre><p>者说没有返回结果），所以不运行切入的afterReturning方法。</p>
<h4 id="4、Around_advice">4、Around advice</h4><h5 id="(1)_在HelloAroundMethod-java中">(1) 在HelloAroundMethod.java中</h5><pre><code>package com.zhangyu.aop;

<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInterceptor</span>;
<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInvocation</span>;

public class <span class="type">HelloAroundMethod</span> implements <span class="type">MethodInterceptor</span> {
    @<span class="type">Override</span>
    public <span class="type">Object</span> invoke(<span class="type">MethodInvocation</span> methodInvocation) throws <span class="type">Throwable</span> {

        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"Method name : "</span> + methodInvocation.getMethod().getName());

        // same <span class="keyword">with</span> <span class="type">MethodBeforeAdvice</span>
        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before method ,hello"</span>);

        <span class="keyword">try</span> {
            <span class="type">Object</span> <span class="literal">result</span> = methodInvocation.proceed();

            // same <span class="keyword">with</span> <span class="type">AfterReturningAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : After method ,hello!"</span>);
            <span class="keyword">return</span> <span class="literal">result</span>;
        } catch (<span class="type">IllegalArgumentException</span> e) {
            // same <span class="keyword">with</span> <span class="type">ThrowsAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Throw exception ,hello!"</span>);
            throw e;
        }
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中-2">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloAroundMethod</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloAroundMethodBean</code>。
　　</p>
<h5 id="（3）运行结果-2">（3）运行结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printThrowException
HelloAroundMethod : Before method ,hello!
HelloAroundMethod : Throw exception ,hello!
</code></pre><h3 id="三、目录结构">三、目录结构</h3><img src="/imgs/SpringAOP_Advice.png" width="300" height="500">
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Spring AOP即Aspect-oriented programming，面向切面编程，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题。简单地说，就是一个拦截器（interceptor）拦截一些处理过程。例如，当一个method被执行，Spring]]>
    </summary>
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Batch HelloWorld]]></title>
    <link href="http://yoursite.com/2015/08/26/SpringBatch/"/>
    <id>http://yoursite.com/2015/08/26/SpringBatch/</id>
    <published>2015-08-26T12:28:47.000Z</published>
    <updated>2015-08-31T15:44:08.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、Spring_Batch流程">一、Spring Batch流程</h3><img src="/imgs/SpringBatch流程.png" width="600" height="300">
<p>　　每个Batch都会包含一个Job，每个Job装了若干Step，Step读取数据，处理数据，然后将这些数据存储起来(ItemReader用来读取数据，ItemProcessor用来处理数据，ItemWriter用来写数据) 。JobLauncher用来启动Job，JobRepository是上述处理提供的一种持久化机制，它为JobLauncher，Job，和Step实例提供CRUD(Create\Retrieve\Update\Delete)操作。</p>
<blockquote>
<p>1 Job = Many Steps.<br>1 Step = 1 READ-PROCESS-WRITE or 1 Tasklet.<br>Job = {Step 1 -&gt; Step 2 -&gt; Step 3} (Chained together)</p>
</blockquote>
<p>　　从DB或是文件中取出数据的时候，read操作每次只读取一条记录，之后将读取的这条数据传递给processor(item)处理，框架将重复做这两步操作，直到读取记录的件数达到batch配置信息中”commin-interval”设定值的时候，就会调用一次write操作。然后再重复以上处理，直到处理完所有的数据。当这个Step的工作完成以后，或是跳到其他Step，或是结束处理。</p>
<h3 id="二、Spring_Batch_Jobs">二、Spring Batch Jobs</h3><h4 id="1、content-xml">1、content.xml</h4><p>　　content.xml中定义了批处理任务中需要的基础设施，主要配置任务仓库、任务调度器、任务执行中用到的事务管理器。</p>
<pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="attribute">xsi:schemaLocation</span>=<span class="value">"
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"</span>&gt;</span>

    <span class="comment">&lt;!-- stored job-meta in memory --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jobRepository"</span>
        <span class="attribute">class</span>=<span class="value">"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionManager"</span> <span class="attribute">ref</span>=<span class="value">"transactionManager"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

      <span class="comment">&lt;!-- stored job-meta in database --&gt;</span>
    <span class="comment">&lt;!--&lt;bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"&gt;
        &lt;property name="dataSource" ref="dataSource" /&gt;
        &lt;property name="transactionManager" ref="transactionManager" /&gt;
        &lt;property name="databaseType" value="mysql" /&gt;
    &lt;/bean&gt;--&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span>
        <span class="attribute">class</span>=<span class="value">"org.springframework.batch.support.transaction.ResourcelessTransactionManager"</span> /&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jobLauncher"</span>
        <span class="attribute">class</span>=<span class="value">"org.springframework.batch.core.launch.support.SimpleJobLauncher"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jobRepository"</span> <span class="attribute">ref</span>=<span class="value">"jobRepository"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><h4 id="2、job-hello-world-xml">2、job-hello-world.xml</h4><img src="/imgs/helloWorldJob.png" width="600" height="300">
<p>　　首先，helloWorldJob里面配置了读（cvsFileItemReader），写（xmlItemWriter） 以及处理（itemProcessor），并设置了commit-interval=”10”。<br>　　之后，对cvsFileItemReader中涉及的resource和lineMapper进行配置。对xmlItemWriter中涉及的resource、marshaller、rootTagName进行配置。而处理过程，则由稍后讲述的itemProcessor.java完成。</p>
<pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:batch</span>=<span class="value">"http://www.springframework.org/schema/batch"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/batch
    http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"../config/context.xml"</span> /&gt;</span>
    <span class="comment">&lt;!--&lt;import resource="../config/database.xml" /&gt;--&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"report"</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.model.Report"</span> <span class="attribute">scope</span>=<span class="value">"prototype"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"itemProcessor"</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.CustomItemProcessor"</span> /&gt;</span>

    <span class="tag">&lt;<span class="title">batch:job</span> <span class="attribute">id</span>=<span class="value">"helloWorldJob"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">batch:step</span> <span class="attribute">id</span>=<span class="value">"step1"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">batch:tasklet</span>&gt;</span>
                <span class="tag">&lt;<span class="title">batch:chunk</span> <span class="attribute">reader</span>=<span class="value">"cvsFileItemReader"</span> <span class="attribute">writer</span>=<span class="value">"xmlItemWriter"</span> <span class="attribute">processor</span>=<span class="value">"itemProcessor"</span><span class="value">commit-interval="10"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">batch:chunk</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">batch:tasklet</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">batch:step</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">batch:job</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"cvsFileItemReader"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.FlatFileItemReader"</span>&gt;</span>

        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"resource"</span> <span class="attribute">value</span>=<span class="value">"classpath:cvs/input/report.csv"</span> /&gt;</span>

        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"lineMapper"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.mapping.DefaultLineMapper"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"lineTokenizer"</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">bean</span> 
                        <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.transform.DelimitedLineTokenizer"</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"names"</span> <span class="attribute">value</span>=<span class="value">"id,sales,qty,staffName,date"</span> /&gt;</span>
                    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"fieldSetMapper"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.ReportFieldSetMapper"</span> /&gt;</span>
                <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>

    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xmlItemWriter"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.xml.StaxEventItemWriter"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"resource"</span> <span class="attribute">value</span>=<span class="value">"file:xml/outputs/report.xml"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"marshaller"</span> <span class="attribute">ref</span>=<span class="value">"reportMarshaller"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"rootTagName"</span> <span class="attribute">value</span>=<span class="value">"report"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"reportMarshaller"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.oxm.jaxb.Jaxb2Marshaller"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"classesToBeBound"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">list</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>com.mkyong.model.Report<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><h4 id="3、ReportFieldSetMapper-java">3、ReportFieldSetMapper.java</h4><p>　　读取时，主要是通过ReportFieldSetMapper.java来完成report.csv到Report.java的映射。</p>
<pre><code>package com.mkyong;

<span class="built_in">import</span> java.<span class="built_in">text</span>.ParseException;
<span class="built_in">import</span> java.<span class="built_in">text</span>.SimpleDateFormat;
<span class="built_in">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;
<span class="built_in">import</span> org.springframework.batch.item.file.transform.FieldSet;
<span class="built_in">import</span> org.springframework.validation.BindException;
<span class="built_in">import</span> com.mkyong.model.Report;

public class ReportFieldSetMapper implements FieldSetMapper&lt;Report&gt; {

private SimpleDateFormat dateFormat = new SimpleDateFormat<span class="params">(<span class="string">"dd/MM/yyyy"</span>)</span>;

@Override
public Report mapFieldSet<span class="params">(FieldSet fieldSet)</span> throws BindException {

    Report report = new Report<span class="params">()</span>;
    report.setId<span class="params">(fieldSet.readInt<span class="params">(<span class="number">0</span>)</span>)</span>;
    report.setSales<span class="params">(fieldSet.readBigDecimal<span class="params">(<span class="number">1</span>)</span>)</span>;
    report.setQty<span class="params">(fieldSet.readInt<span class="params">(<span class="number">2</span>)</span>)</span>;
    report.setStaffName<span class="params">(fieldSet.readString<span class="params">(<span class="number">3</span>)</span>)</span>;

    <span class="comment">//default format yyyy-MM-dd</span>
    <span class="comment">//fieldSet.readDate(4);</span>
    String date = fieldSet.readString<span class="params">(<span class="number">4</span>)</span>;
    try {
        report.setDate<span class="params">(dateFormat.parse<span class="params">(date)</span>)</span>;
    } catch <span class="params">(ParseException e)</span> {
        e.printStackTrace<span class="params">()</span>;
    }

    return report;
}
</code></pre><p>}</p>
<h4 id="4、report-csv">4、report.csv</h4><pre><code><span class="number">1001</span>,<span class="string">"213,100"</span>,<span class="number">980</span>,<span class="string">"mkyong"</span>, <span class="number">29</span>/<span class="number">7</span>/<span class="number">2013</span>
<span class="number">1002</span>,<span class="string">"320,200"</span>,<span class="number">1080</span>,<span class="string">"staff 1"</span>, <span class="number">30</span>/<span class="number">7</span>/<span class="number">2013</span>
<span class="number">1003</span>,<span class="string">"342,197"</span>,<span class="number">1200</span>,<span class="string">"staff 2"</span>, <span class="number">31</span>/<span class="number">7</span>/<span class="number">2013</span>
</code></pre><h4 id="5、Report-java">5、Report.java</h4><pre><code><span class="keyword">package</span> com.mkyong.model;

<span class="keyword">import</span> java.math.BigDecimal;
<span class="keyword">import</span> java.util.Date;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlAttribute;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;

<span class="annotation">@XmlRootElement</span>(name = <span class="string">"record"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Report</span> </span>{

    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> BigDecimal sales;
    <span class="keyword">private</span> <span class="keyword">int</span> qty;
    <span class="keyword">private</span> String staffName;
    <span class="keyword">private</span> Date date;

    <span class="annotation">@XmlAttribute</span>(name = <span class="string">"id"</span>)
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{<span class="keyword">return</span> id;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{<span class="keyword">this</span>.id = id;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"sales"</span>)
    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getSales</span><span class="params">()</span> </span>{<span class="keyword">return</span> sales;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSales</span><span class="params">(BigDecimal sales)</span> </span>{<span class="keyword">this</span>.sales = sales;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"qty"</span>)
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQty</span><span class="params">()</span> </span>{<span class="keyword">return</span> qty;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQty</span><span class="params">(<span class="keyword">int</span> qty)</span> </span>{    <span class="keyword">this</span>.qty = qty;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"staffName"</span>)
    <span class="function"><span class="keyword">public</span> String <span class="title">getStaffName</span><span class="params">()</span> </span>{<span class="keyword">return</span> staffName;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStaffName</span><span class="params">(String staffName)</span> </span>{<span class="keyword">this</span>.staffName = staffName;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"date"</span>)
    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>{<span class="keyword">return</span> date;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>{<span class="keyword">this</span>.date = date;}

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Report [id="</span> + id +
                <span class="string">", sales="</span> + sales +
                <span class="string">", qty="</span> + qty +
                <span class="string">", staffName="</span> + staffName +
                <span class="string">"]"</span>;
    }
}
</code></pre><h4 id="6、CustomItemProcessor-java">6、CustomItemProcessor.java</h4><pre><code><span class="keyword">package</span> com.mkyong;

<span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;
<span class="keyword">import</span> com.mkyong.model.Report;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Report</span>, <span class="title">Report</span>&gt; </span>{

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> Report <span class="title">process</span><span class="params">(Report item)</span> <span class="keyword">throws</span> Exception </span>{

        System.out.println(<span class="string">"Processing..."</span> + item);
        <span class="keyword">return</span> item;
    }
}
</code></pre><h3 id="三、创建测试App">三、创建测试App</h3><p>在App.java中</p>
<pre><code>package com.mkyong;

<span class="keyword">import</span> org.springframework.batch.core.Job;
<span class="keyword">import</span> org.springframework.batch.core.JobExecution;
<span class="keyword">import</span> org.springframework.batch.core.JobParameters;
<span class="keyword">import</span> org.springframework.batch.core.launch.JobLauncher;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

public <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>{
    public static <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) {

        <span class="built_in">String</span>[] springConfig  = {<span class="string">"spring/batch/jobs/job-hello-world.xml"</span>};
        ApplicationContext context = 
                <span class="keyword">new</span> ClassPathXmlApplicationContext(springConfig);

        JobLauncher jobLauncher = (JobLauncher) context.getBean(<span class="string">"jobLauncher"</span>);
        Job job = (Job) context.getBean(<span class="string">"helloWorldJob"</span>);

        <span class="keyword">try</span> {
            JobExecution execution = jobLauncher.run(job, <span class="keyword">new</span> JobParameters());
            System.out.println(<span class="string">"Exit Status : "</span> + execution.getStatus());

        } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }

        System.out.println(<span class="string">"Done"</span>);
    }
}
</code></pre><h3 id="四、结果">四、结果</h3><p>report.xml</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">report</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1001"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-29T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>980<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>213100<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>mkyong<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1002"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-30T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>1080<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>320200<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>staff 1<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1003"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-31T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>1200<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>342197<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>staff 2<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
<span class="tag">&lt;/<span class="title">report</span>&gt;</span>
</code></pre><p>console:</p>
<pre><code>Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.launch.support.SimpleJobLauncher$<span class="number">1</span> run
INFO: Job: [FlowJob: [name=helloWorldJob]] launched with the following parameters: [{}]
Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.job.SimpleStepHandler handleStep
INFO: Executing step: [step1]
Processing...Report [id=<span class="number">1001</span>, sales=<span class="number">213100</span>, qty=<span class="number">980</span>, staffName=mkyong]
Processing...Report [id=<span class="number">1002</span>, sales=<span class="number">320200</span>, qty=<span class="number">1080</span>, staffName=staff <span class="number">1</span>]
Processing...Report [id=<span class="number">1003</span>, sales=<span class="number">342197</span>, qty=<span class="number">1200</span>, staffName=staff <span class="number">2</span>]
Exit Status : COMPLETED
Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.launch.support.SimpleJobLauncher$<span class="number">1</span> run
Done
INFO: Job: [FlowJob: [name=helloWorldJob]] completed with the following parameters: [{}] and the following status: [COMPLETED]
</code></pre><h3 id="五、目录结构">五、目录结构</h3><img src="/imgs/SpringBatchHelloWorld.png" width="300" height="500">
<h3 id="六、主要领域对象">六、主要领域对象</h3><table>
<thead>
<tr>
<th>领域对象</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Job</td>
<td style="text-align:left">Batch操作的基础单元</td>
</tr>
<tr>
<td>Job Instance</td>
<td style="text-align:left">每次job执行时，都会生成一个实例，存放在JobRepository。</td>
</tr>
<tr>
<td>Job Parameters</td>
<td style="text-align:left">不同的实例是通过job参数来区分的</td>
</tr>
<tr>
<td>Job Execution</td>
<td style="text-align:left">负责具体Job的执行，每次运行Job都会启动一个新的Job执行器</td>
</tr>
<tr>
<td>Job Respository</td>
<td style="text-align:left">负责存储Job执行过程中的状态数据及结果，为JobLaunter、Job、Step提供标准的CRUD实现。</td>
</tr>
<tr>
<td>Job Launcher</td>
<td style="text-align:left">根据给定的Jon Parameter执行Job</td>
</tr>
<tr>
<td>Step</td>
<td style="text-align:left">Job的一个执行环节，一个或多个step组装成Job，封装批处理任务中得一个独立连续阶段。</td>
</tr>
<tr>
<td>Step Execution</td>
<td style="text-align:left">每次运行Step都会启动一个新的Step执行器</td>
</tr>
<tr>
<td>Tasklet</td>
<td style="text-align:left">Step中具体执行的逻辑操作，可以重复执行，可以设置具体的同步、异步操作等。</td>
</tr>
<tr>
<td>Execution Context</td>
<td style="text-align:left">执行上下文，是一组框架持久化与控制的key/value对，能够让开发者在step Execution或Job Execution范畴保存需要进行持久化的状态。</td>
</tr>
<tr>
<td>Item</td>
<td style="text-align:left">条目，一条数据记录</td>
</tr>
<tr>
<td>Chunk</td>
<td style="text-align:left">Item集合，它给定数量Item的集合，可以定义对Chunk的读操作、处理操作、写操作、提交间隔等。</td>
</tr>
<tr>
<td>Item Reader</td>
<td style="text-align:left">条目读，其表示Step读数据，一次读取一条</td>
</tr>
<tr>
<td>Item Processor</td>
<td style="text-align:left">条目处理，用于表示item的业务处理</td>
</tr>
<tr>
<td>Item Writer</td>
<td style="text-align:left">条目写，用于表示Step输出数据，一次输出一批</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、Spring_Batch流程">一、Spring Batch流程</h3><img src="/imgs/SpringBatch流程.png" width="600" height="300">
<p>　　每个Batch都会包含一个Job，每个Job装了若干S]]>
    </summary>
    
      <category term="Spring Batch" scheme="http://yoursite.com/tags/Spring-Batch/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
</feed>