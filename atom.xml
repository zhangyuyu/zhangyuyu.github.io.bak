<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若见喻笺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-15T10:15:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-JVM-类加载机制</title>
    <link href="http://yoursite.com/2018/07/15/Java-JVM-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/07/15/Java-JVM-类的加载机制/</id>
    <published>2018-07-15T10:38:49.000Z</published>
    <updated>2018-07-15T10:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　本篇对于类加载机制将从以下几个方面展开：</p><ul><li><a href="#什么是类加载机制">什么是类加载机制</a></li><li><a href="#类的生命周期">类的生命周期</a></li><li><a href="#类加载的过程">类加载的过程</a></li><li><a href="#类加载器">类加载器</a><a id="more"></a></li></ul><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　最近准备巩固已学的 Java 知识，同时<a href="https://mp.weixin.qq.com/s/NsPNfNViujmjM_nzcCc0IA" target="_blank" rel="noopener">面试为什么需要了解JVM</a>一文更加坚定了信念。</p><p>　　从<a href="http://zhangyuyu.github.io/2018/07/10/Java-JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-vs-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-vs-Java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">Java - JVM内存结构 vs Java内存模型 vs Java对象模型</a>开始，先准备对JVM相关的知识点进行回顾：</p><ul><li>Java-JVM-类加载机制（本篇）</li><li>Java-JVM-内存结构</li><li>Java-JVM-GC算法</li><li>Java-JVM-GC分析</li></ul><p><span id="什么是类加载机制">## 三、什么是类加载机制</span><br>　　虚拟机把描述类的数据从<code>.class</code>文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java 类型，这就是虚拟机的类加载机制。类加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p><p>　　加载.class文件的方式：</p><ul><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件</li></ul><p><span id="五、类的生命周期">## 四、类的生命周期</span><br>　　类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。它们开始的顺序如下图所示：<br><img src="/imgs/java-class-lifecycle.png" width="600" height="300"></p><p>　　<a href="#类加载的过程">类加载的过程</a>包括了前面五个阶段：加载、验证、准备、解析、初始化。加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。<br>　　<code>连接</code>包括了三个阶段：验证、准备、解析。连接指的是将java类的二进制代码合并到JVM的运行状态之中的过程。换言之，类加载的过程包含了三个部分：加载，连接（验证、准备、解析）和初始化。</p><p>　　注意:<br>　　这里的几个阶段是按顺序<strong>开始</strong>，而<strong>不是</strong>按顺序<strong>进行或完成</strong>，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p><p><span id="类加载的过程">## 五、类加载的过程</span></p><h3 id="1-加载（Loading）"><a href="#1-加载（Loading）" class="headerlink" title="1. 加载（Loading）"></a>1. 加载（Loading）</h3><p>　　<code>加载</code>是<code>类加载</code>（Class Loading）的第一个阶段，在<code>加载</code>阶段，虚拟机需要完成以下三件事情：</p><ul><li>通过一个类的全限定名来获取其定义的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li></ul><p>　　注意：</p><ul><li><p>第1条中的二进制字节流并不只是单纯地从Class文件中获取，比如它还可以从jar包中获取、从网络中获取（最典型的应用便是Applet）、由其他文件生成（JSP应用）等。如果输入数据不是<code>ClassFile</code>的结构，则会抛出<code>ClassFormatError</code>。</p></li><li><p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p></li><li><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</p></li></ul><h3 id="2-验证（Verification）"><a href="#2-验证（Verification）" class="headerlink" title="2. 验证（Verification）"></a>2. 验证（Verification）</h3><p>　　<code>验证</code>，确保被加载的类的正确性。<code>验证</code>是<code>连接</code>阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。<code>验证</code>阶段大致会完成4个阶段的检验动作:</p><ul><li><p>文件格式验证：验证字节流是否符合Class文件格式的规范。<br>　　例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</p></li><li><p>元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求。<br>　　例如：这个类是否有父类，除了java.lang.Object之外。</p></li><li><p>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。<br>　　例如：类型转换是否是有效的。</p></li><li><p>符号引用验证：确保解析动作能正确执行。它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。<br>　　例如：符号引用的类、字段、方法的访问性是否可以被当前的类访问。</p></li></ul><p>　　验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><h3 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h3><p>　　准备阶段是正式<em>为类变量分配内存</em>并<em>设置类变量初始值</em>的阶段，这些内存都将在方法区中分配。</p><p>　　注意：</p><ul><li><p>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p></li><li><p>这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　假设一个类变量的定义为：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">3</span>；</span><br><span class="line"></span><br><span class="line">　　那么变量<span class="keyword">value</span>在准备阶段过后的初始值为<span class="number">0</span>，而不是<span class="number">3</span>，因为这时候尚未开始执行任何Java方法，而把<span class="keyword">value</span>赋值为<span class="number">3</span>的putstatic指令是在程序编译后，存放于类构造器&lt;clinit&gt;（）方法之中的，所以把<span class="keyword">value</span>赋值为<span class="number">3</span>的动作将在**初始化阶段**才会执行。</span><br></pre></td></tr></table></figure><h3 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h3><p>　　解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><ul><li><p>符号引用（Symbol References）<br>　　符号引用就是一组符号来描述目标，可以是任何字面量。符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p></li><li><p>直接引用（Direct References）<br>　　直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局有关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那么引用的目标必定已经在内存中存在。</p></li></ul><p>　　解析动作主要针对以下7类符号引用，其中后三种与java的动态语言支持息息相关：</p><ul><li>类或接口</li><li>字段</li><li>类方法（静态方法）</li><li>接口方法</li><li>方法类型</li><li>方法句柄</li><li>调用点限定符</li></ul><h3 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>　　初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p><ul><li>声明类变量是指定初始值。</li><li>使用静态代码块为类变量指定初始值。</li></ul><h4 id="初始化的时机"><a href="#初始化的时机" class="headerlink" title="初始化的时机"></a>初始化的时机</h4><p>　　什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p><ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射如(Class.forName(“my.xyz.Test”))</li><li>初始化某个类的子类，则其父类也会被初始化</li><li>虚拟机启动时被标明为启动类的类，直接使用java.exe命令来运行某个主类</li></ul><p>　　以上情况称为称对一个类进行“主动引用”。<br>　　除此种情况之外，均不会触发类的初始化，称为“被动引用”，比如：</p><ul><li>子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。。对于静态字段，只有直接定义这个字段的类才会被初始化。</li><li>通过数组定义来引用类，不会触发类的初始化。</li><li>访问类的常量，不会初始化类。</li></ul><h2 id="六、类加载器"><a href="#六、类加载器" class="headerlink" title="六、类加载器"></a><span id="类加载器">六、类加载器</span></h2><h3 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h3><p>　　虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取其定义的二进制字节流”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块成为“类加载器”。</p><p>　　类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。</p><h3 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h3><p>　　站在Java虚拟机的角度来讲，只存在两种不同的类加载器：</p><ul><li>启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分。</li><li>所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类<code>java.lang.ClassLoader</code>，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li></ul><p>　　站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：</p><ul><li>启动类加载器：<code>Bootstrap ClassLoader</code>，跟上面相同。它负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。</li><li>扩展类加载器：<code>Extension ClassLoader</code>，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器：<code>Application ClassLoader</code>，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p>　　应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。这些类加载器之间的层次关系，称为类加载器的双亲委派模型。</p><h3 id="3-双亲委派模型"><a href="#3-双亲委派模型" class="headerlink" title="3. 双亲委派模型"></a>3. 双亲委派模型</h3><img src="/imgs/java-class-loader-parents-delegation-model.png" width="600" height="400"><p>　　双亲委派模型要求除了顶层的启动类加载器外，其余类加载器都应该有自己的父类加载器。注意，这里类加载器之间的父子关系一般不会以继承的关系实现，而是使用组合关系来复用父加载器的代码。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>　　如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><h4 id="双亲委派模型意义"><a href="#双亲委派模型意义" class="headerlink" title="双亲委派模型意义"></a>双亲委派模型意义</h4><ul><li>系统类防止内存中出现多份同样的字节码</li><li>保证Java程序安全稳定运行</li></ul><h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><ul><li><p>第一次破坏：loadClass和 findClass<br>　　双亲委派模型是在JDK1.2之后引入的，而类加载器ClassLoader在 JDK1.0时代就已经存在。为了向前兼容，JDK1.2之后添加了一个新的方法findClass()。<br>　　因此，我们在编写自定义的加载器时候，最好重写findClass()方法。</p></li><li><p>第二次破坏：基础类调用用户的代码<br>　　在Java应用中存在着很多服务提供者接口（Service Provider Interface，SPI），这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等。<br>这些 SPI 的接口属于 Java 核心库，一般存在rt.jar包中，由Bootstrap类加载器加载。<br>而 SPI 的第三方实现代码则是作为Java应用所依赖的 jar 包被存放在classpath路径下，Bootstrap类加载器无法直接加载SPI的实现类，同时由于双亲委派模式的存在，Bootstrap类加载器也无法反向委托AppClassLoader加载器SPI的实现类。<br>　　这种情况下，可以使用线程上下文件类加载器（Thread Context ClassLoader），通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。</p></li><li><p>第三次破坏：程序动态性<br>　　”动态性”指的是当前一些非常“热门”的名词：代码热替换、模块热部署等，简答的说就是机器不用重启，只要部署上就能用。<br>　　OSGi实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块(Bundle)都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。在OSGi幻境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为更加复杂的网状结构，当受到类加载请求时，OSGi将按照下面的顺序进行类搜索：<br>1）将java.＊开头的类委派给父类加载器加载。<br>2）否则，将委派列表名单内的类委派给父类加载器加载。<br>3）否则，将Import列表中的类委派给Export这个类的Bundle的类加载器加载。<br>4）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。<br>5）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载。<br>6）否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。<br>7）否则，类加载器失败。<br>上面的查找顺序中，只有开头两点仍然符合双亲委派模型，其余的都是在平级的类加载器中进行的。</p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇主要是从类的生命周期包含七个阶段（加载、验证、准备、解析、初始化、使用和卸载）说起，然后对于类加载的五个阶段（加载、验证、准备、解析、初始化）进行详细展开，最后了解了类加载器的相关知识。<br>　　下一篇将讲述<a href="">Java-JVM-内存结构</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.ityouknow.com/jvm/2017/08/19/class-loading-principle.html" target="_blank" rel="noopener">java类的加载机制, 纯洁的微笑</a></li><li><a href="https://www.cnblogs.com/z00377750/p/9176891.html" target="_blank" rel="noopener">【JVM】类加载机制, 风动静泉</a></li><li><a href="https://www.jianshu.com/p/166c5360a40b" target="_blank" rel="noopener">破坏双亲委派模型</a></li><li><a href="https://mp.weixin.qq.com/s/NsPNfNViujmjM_nzcCc0IA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NsPNfNViujmjM_nzcCc0IA</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　本篇对于类加载机制将从以下几个方面展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#什么是类加载机制&quot;&gt;什么是类加载机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类的生命周期&quot;&gt;类的生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类加载的过程&quot;&gt;类加载的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#类加载器&quot;&gt;类加载器&lt;/a&gt;
    
    </summary>
    
      <category term="Programmming" scheme="http://yoursite.com/categories/Programmming/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>懒兔子系列 就是想看你笑的样子</title>
    <link href="http://yoursite.com/2018/07/13/%E6%87%92%E5%85%94%E5%AD%90%E7%B3%BB%E5%88%97-%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9C%8B%E4%BD%A0%E7%AC%91%E7%9A%84%E6%A0%B7%E5%AD%90/"/>
    <id>http://yoursite.com/2018/07/13/懒兔子系列-就是想看你笑的样子/</id>
    <published>2018-07-13T17:29:27.000Z</published>
    <updated>2018-07-13T21:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面一篇主要对<a href="http://zhangyuyu.github.io/2018/07/11/%E6%87%92%E5%85%94%E5%AD%90%E7%B3%BB%E5%88%97-%E8%AF%B4%E5%8C%BB%E4%B8%8D%E4%BA%8C/" target="_blank" rel="noopener">懒兔子系列《说医不二》</a>的主要内容进行回顾，以及记录读完之后的感悟。</p><img src="/imgs/懒兔子系列-就是想看你笑的样子-开头.png" width="600" height="400"><p>　　本篇文章主要是记录读完懒兔子系列（《说医不二》、《医学就会》和《就是想看你笑的样子》）之《就是想看你笑的样子》的感悟。</p><p>　内容主要包括：</p><ul><li><a href="#内容回顾">内容回顾</a></li><li><a href="#一些感悟">一些感悟</a></li><li><a href="#经典语句">经典语句</a></li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　看过懒兔子系列《说医不二》之后，原本是想接着看《医学就会》的。无奈微信读书上的金币不够，免费赠一得一得活动里暂时没有《医学就会》，只有《就是想看你笑的样子》。<br>　　于是，翻阅起来了《就是想看你笑的样子》，读完该书也是一气呵成，大概一个小时不到。</p><h2 id="三、内容回顾"><a href="#三、内容回顾" class="headerlink" title="三、内容回顾"></a><span id="内容回顾">三、内容回顾</span></h2><p>　　该书与《说医不二》不一样的是，该书大部分时候都是漫画，围绕着小标题，对生活的小事，进行描绘。主要分为上篇『如果生活不能让你笑，你就笑笑生活』和下篇『那些与中医有关的日子』。</p><p>　　具体的内容，上篇包含了67个小故事，下篇包含了36个小故事，这里就不罗列了。</p><h2 id="四、一些感悟"><a href="#四、一些感悟" class="headerlink" title="四、一些感悟"></a><span id="一些感悟">四、一些感悟</span></h2><h3 id="1-如果生活不能让你笑，你就笑笑生活"><a href="#1-如果生活不能让你笑，你就笑笑生活" class="headerlink" title="1. 如果生活不能让你笑，你就笑笑生活"></a>1. 如果生活不能让你笑，你就笑笑生活</h3><p>　　<img src="/imgs/懒兔子系列-就是想看你笑的样子-笑笑.png" width="600" height="400"><br>　　随着年龄的增长，我们要承担的越来越多，开心也没有小时候那么纯粹了；其实，用心去感受，乐事还是挺多的。生活很难，如果生活不能让你笑，你就笑笑生活。诚然，其实快乐与否，关键看你怎么去看，你的态度决定了你的行为。即便有繁重的工作，琐碎的工作，倘若我们有轻松的生活态度去面对，你就会发现世界还是非常美好的，每天都可以笑一笑。</p><h3 id="2-挣钱是为了什么"><a href="#2-挣钱是为了什么" class="headerlink" title="2. 挣钱是为了什么"></a>2. 挣钱是为了什么</h3><blockquote class="blockquote-center"><p>“老崔，我们为什么要买这么多打折商品？”</p><p>“省钱啊。”</p><p>“可是我们现在并不缺钱，为什么还要这么省？”</p><p>“日子就要省着过呀！”</p><p>“那钱省下来干吗？”</p><p>“有个大病大灾的时候好用啊。”</p><p>“那一直没病没灾的，岂不是很遗憾？</p><p>….</p></blockquote><p>　　我们挣钱的初衷，是为了过上更好的生活，而不是用来等待坏日子。<br>　　同理，你总觉得现在还没有资格休息，你的能力还不够强；你总是想，还是先熬着吧，熬到升职加薪就好了，那时候的自己应该会自由很多…时间就这么过着，当初还未工作时候的愿景，明明已经实现了，却还是持续焦虑着。我们努力的初衷，是为了享受生活，而不是一直焦灼下去。</p><h3 id="3-学霸和学渣都有保质期"><a href="#3-学霸和学渣都有保质期" class="headerlink" title="3. 学霸和学渣都有保质期"></a>3. 学霸和学渣都有保质期</h3><p>　　所谓学霸，只代表一个人在某个阶段学习已知知识和应试能力比较强而已。并不代表在漫长的人生路上，他们其他的能力也比别人强。<br>　　以前的那些学霸不一定能坚持到最后成为社会精英，而相反原来的一些表现淡淡的却反倒成了人才！其实任何时间段都是人生长河中的一部分，在此跌倒没必要灰心丧气自暴自弃，接下来的比赛会比一个更值得你去用尽全力。</p><h3 id="4-旅行是为了在世界中寻找自己"><a href="#4-旅行是为了在世界中寻找自己" class="headerlink" title="4. 旅行是为了在世界中寻找自己"></a>4. 旅行是为了在世界中寻找自己</h3><p>　　与我而言，有时候旅行是为了让自己暂时的抛掉生活的琐事，让自己投入旅行的乐趣中，寻找内心的平静。有时候旅游就是想去玩的。玩是为了什么？当然为了开心。<br>　　旅行最大的好处，不是能见到多少人，见过多美的风景，而是走着走着，在一个际遇下，突然重新认识了自己，找到了真实的自己。旅行也是一个化繁为简的征途：把去时沉甸甸的内心变轻变灵，去除那些无多余的负担，好好地和自己相处，和心在一起；回时虽然身体疲惫，但心却轻松了，因为找到了那个真实而又内心充盈的自己。</p><h2 id="五、经典语句"><a href="#五、经典语句" class="headerlink" title="五、经典语句"></a><span id="经典语句">五、经典语句</span></h2><p>　　上篇文章<a href="http://zhangyuyu.github.io/2018/07/11/%E6%87%92%E5%85%94%E5%AD%90%E7%B3%BB%E5%88%97-%E8%AF%B4%E5%8C%BB%E4%B8%8D%E4%BA%8C/" target="_blank" rel="noopener">懒兔子系列《说医不二》</a>在写的时候，又回去反复翻看了一些经典语句，这次聪明了，边读边记录，边写下当时的感受。</p><img src="/imgs/懒兔子系列-就是想看你笑的样子-经典语录.png" width="600" height="400"><ol><li><p><strong>[每个人心中都有一本漫画书]</strong><br>　　生活很难，如果生活不能让你笑，你就笑笑生活。开心的时候就要笑一笑，不开心的时候等会再笑。</p></li><li><p><strong>[原来以为]</strong><br>　　我们这一生，常常会为“原来以为”付出很多代价</p></li><li><p><strong>[超市特卖会]</strong><br>　　挣钱是为了过上好日子，还是等待坏日子？</p></li><li><p><strong>[所有的“不行”都会变成“没有也行”]</strong><br>　　小时候，没有妈妈不行；少年时，没有朋友不行；青年时，没有爱情不行；现在…没有手机不行。最终，哪些曾经被我们视为生命中“没有不行”的，在漫漫的人生路上，渐渐地变成了“没有也行”。</p></li><li><p><strong>[找到自己]</strong><br>　　旅行，不是为了寻找世界，而是在世界中寻找自己。在校园中找到年少的自己，在海边夕阳找到温暖安静的自己，在路边咖啡馆找到无所事事的自己……原来我已经太久没有和自己一起。</p></li><li><p><strong>[懒是一种心情]</strong><br>　　直到有一天我想明白了一个问题，但凡用“ 忄”旁的字，都和情绪有关。比如：怕、情、忧。所以“懒”，它不是病，它是一种心情！</p></li><li><p><strong>[生活的真相]</strong><br>　　多少生活在华丽的外表下，是无奈的庸俗和苟且。适合别人的良方，也许对你没有什么屁用。所以不要艳羡，无需模仿，适合你的，只有你自己能找到。</p></li><li><p><strong>[人生的幸福]</strong><br>　　人生的顺序，不过从左到右，最多排列第四位就是人生的尽头。所以当你左右都有人时，是最大的幸福。我们都应该，好好珍惜这份幸福。</p></li><li><p><strong>[什么是幸福]</strong><br>　　幸福并不是有没有在你左右，而是在你左右的人，是不是你想要的那个人，所以幸福，才会这么——难。</p></li><li><p><strong>[赤裸的人性]</strong><br>　　这世上，从来就没有感同身受，人性本是如此。勇敢承认没什么不好意思。所以，不管多么轰轰烈烈的社会事件，都会像流星一样快速划过，再无痕迹。</p></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　生活中有很多小事，都蕴含着各种道理，只是我们不曾细心观察。在无聊的闲暇的时光，通过这些配上寥寥数语的简笔画，生活的趣味和蕴含的道理互动立现。也许只是咧开嘴笑一笑，也许只是放松一瞬间，但是“就是想看你笑的样子”的目的，也就达到了。如果有更多感悟，记录下来，偶尔有时间回顾一下，治愈心中的烦闷、压抑，安慰身处焦虑中的你我，也是一件不错的事情。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面一篇主要对&lt;a href=&quot;http://zhangyuyu.github.io/2018/07/11/%E6%87%92%E5%85%94%E5%AD%90%E7%B3%BB%E5%88%97-%E8%AF%B4%E5%8C%BB%E4%B8%8D%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;懒兔子系列《说医不二》&lt;/a&gt;的主要内容进行回顾，以及记录读完之后的感悟。&lt;/p&gt;
&lt;img src=&quot;/imgs/懒兔子系列-就是想看你笑的样子-开头.png&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
&lt;p&gt;　　本篇文章主要是记录读完懒兔子系列（《说医不二》、《医学就会》和《就是想看你笑的样子》）之《就是想看你笑的样子》的感悟。&lt;/p&gt;
&lt;p&gt;　内容主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#内容回顾&quot;&gt;内容回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#一些感悟&quot;&gt;一些感悟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#经典语句&quot;&gt;经典语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Elevator Pitch</title>
    <link href="http://yoursite.com/2018/07/12/Elevator-Pitch/"/>
    <id>http://yoursite.com/2018/07/12/Elevator-Pitch/</id>
    <published>2018-07-12T09:30:59.000Z</published>
    <updated>2018-07-13T15:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　在敏捷项目中，开始一个新项目的第一步，往往是了解客户的愿景（Vision）或者使命宣言（Mission Statement），并创建项目愿景。 本篇文章主要关注于创建愿景的工具之一Elevator Pitch，将从以下几个方面展开：</p><ul><li><a href="#了解项目愿景">了解项目愿景</a></li><li><a href="#理解Elevator Pitch">理解Elevator Pitch</a></li><li><a href="#Elevator Pitch模板">Elevator Pitch模板</a></li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　正如前文<a href="http://zhangyuyu.github.io/2018/07/04/Impact-Mapping/" target="_blank" rel="noopener">Impact Mapping</a>提到，笔者参与了一个项目的初期阶段。在进行kick off 的 workshop中，同事采用了Elevator Pitch的方式找到项目的愿景</p><h2 id="三、了解项目愿景"><a href="#三、了解项目愿景" class="headerlink" title="三、了解项目愿景"></a><span id="了解项目愿景">三、了解项目愿景</span></h2><h3 id="1-什么是项目愿景"><a href="#1-什么是项目愿景" class="headerlink" title="1. 什么是项目愿景"></a>1. 什么是项目愿景</h3><p>　　<img src="/imgs/elevator-pitch-vision.png" width="600" height="250"></p><p>　　愿景，希望看到的情景。项目愿景是将项目的可交付成果描绘为所述需求或问题的解决方案。</p><p>　　愿景（Vision）和使命（Mission）的区别，本文将不做阐述。</p><h3 id="2-为什么要创建项目愿景"><a href="#2-为什么要创建项目愿景" class="headerlink" title="2. 为什么要创建项目愿景"></a>2. 为什么要创建项目愿景</h3><p>　　愿景是你想要创造的，用现在时描绘的未来图像，就好像发生在眼前一样。愿景能够指出我们要去哪里，以及到达目的地以后会是什么样子。项目愿景阐明了项目的目的，消除了混乱，统一了团队，并激励他们尽力而为。 </p><h3 id="3-创建愿景的预期结果"><a href="#3-创建愿景的预期结果" class="headerlink" title="3. 创建愿景的预期结果"></a>3. 创建愿景的预期结果</h3><ul><li>基于愿景，业务非常清晰，并且可以用言语来表述实现愿景的结果</li><li>团队成员对愿景有共同的理解，并可以持续选择支持愿景</li></ul><h3 id="4-创建项目愿景的几种方式"><a href="#4-创建项目愿景的几种方式" class="headerlink" title="4. 创建项目愿景的几种方式"></a>4. 创建项目愿景的几种方式</h3><p>　　有很多种方法可用于创建项目愿景，ThoughtWorks常用的有三种：</p><ul><li><p>Regular Joe Vision<br>　　具有预期结果的常规愿景陈述。最适合下面两种更具创意的方法可能不起作用的情形。</p></li><li><p>The Elevator Pitch<br>　　对项目输出、其主要特征以及它们如何区分的简短结构化描述。<br>　　值得指出的是，Moore本人并不认为Elevator Pitch与完整的项目愿景相同 - 但在此处只是为了描述客户愿景，这一点上，这个工具还是可以适用的。</p></li><li><p>The Product Box<br>　　项目的输出被假想成商店货架上的一个产品，期待被注意到。通过要求客户为你的产品设计产品包装盒，来确定出最令人兴奋的产品的功能。更多参考<a href="https://www.innovationgames.com/product-box/" target="_blank" rel="noopener">Product Box, innovationgames</a></p></li></ul><p>　　本篇文章，主要针对于The Elevator Pitch。</p><h2 id="四、理解Elevator-Pitch"><a href="#四、理解Elevator-Pitch" class="headerlink" title="四、理解Elevator Pitch"></a><span id="理解Elevator Pitch">四、理解Elevator Pitch</span></h2><h3 id="1-什么是Elevator-Pitch"><a href="#1-什么是Elevator-Pitch" class="headerlink" title="1. 什么是Elevator Pitch"></a>1. 什么是Elevator Pitch</h3><p>　　一般情况下，Elevator Pitch（电梯法则），是指“麦肯锡30秒电梯理论”，即用极具吸引力的方式简明扼要地阐述自己的观点，例如你在电梯里，只有30秒的时间来向一位关系公司前途的大客户推广产品且必须成功。</p><p>　　<img src="/imgs/elevator-pitch.png" width="600" height="250"></p><p>　　但是这个规则应用很广泛，比如推销产品、求职自我介绍、职场管理沟通效率提升小工具、吸引投资人注意力等等。因此Elevator Pitch（电梯法则）、Elevator speech（电梯演讲）或者Elevator Statement（电梯声明），是对想法、产品、公司或者个人的简短描述，以使得任何收听者能够在短时间内理解它的方式解释该概念。</p><p>　　目前，我所应用的场景主要是：帮助客户找到他们的项目愿景，帮助ThoughtWork以快速有效的方式说出我们的服务。在创建项目愿景时，Elevator Pitch这个简短的陈述成为向任何受众分享产品愿景的难忘方式。</p><h3 id="2-Elevator-Pitch-101"><a href="#2-Elevator-Pitch-101" class="headerlink" title="2. Elevator Pitch 101"></a>2. Elevator Pitch 101</h3><p>　　本文主要针对新项目初期，在大家还对产品对项目没有清晰认识的时候，让所有参与者对产品或项目的问题域有着清晰 、一致的理解。</p><p>　　更多内容可以参考 Elevator Pitch Essentials中：</p><ul><li>谁需要Elevator Pitch<a href="http://elevatorpitchessentials.com/essays/WhoNeedsAnElevatorPitch.html" target="_blank" rel="noopener">Who Needs An Elevator Pitch?</a></li><li>什么时候使用Elevator Pitch<a href="http://elevatorpitchessentials.com/essays/WhenToUseAnElevatorPitch.html" target="_blank" rel="noopener">When To Use An Elevator Pitch</a></li></ul><h2 id="五、如何使用Elevator-Pitch"><a href="#五、如何使用Elevator-Pitch" class="headerlink" title="五、如何使用Elevator Pitch"></a>五、如何使用Elevator Pitch</h2><h3 id="1-在一张大白纸上写出以下问题："><a href="#1-在一张大白纸上写出以下问题：" class="headerlink" title="1. 在一张大白纸上写出以下问题："></a>1. 在一张大白纸上写出以下问题：</h3><p>a. Who is the <strong>TARGET CUSTOMER</strong>?<br>b. What is the　<strong>CUSTOMER NEED</strong>?<br>c. What is the　<strong>PRODUCT NAME</strong>?<br>d. What is the　<strong>PRODUCT CATEGORY</strong>?<br>e. What is its　<strong>KEY BENEFIT</strong>?<br>f. Who or what is the <strong>COMPETITION</strong>?<br>g. What are the product’s **UNIQUE DIFFERENTIATORS_?</p><h3 id="2-跟参与者过以下问题，确保所有参与者理解每个问题的含义。"><a href="#2-跟参与者过以下问题，确保所有参与者理解每个问题的含义。" class="headerlink" title="2. 跟参与者过以下问题，确保所有参与者理解每个问题的含义。"></a>2. 跟参与者过以下问题，确保所有参与者理解每个问题的含义。</h3><h3 id="3-给大家10-15分钟（视参与者的多少）进行头脑风暴，并把自己对每一个问题想到的答案贴在与每个问题相对应的区域。"><a href="#3-给大家10-15分钟（视参与者的多少）进行头脑风暴，并把自己对每一个问题想到的答案贴在与每个问题相对应的区域。" class="headerlink" title="3. 给大家10-15分钟（视参与者的多少）进行头脑风暴，并把自己对每一个问题想到的答案贴在与每个问题相对应的区域。"></a>3. 给大家10-15分钟（视参与者的多少）进行头脑风暴，并把自己对每一个问题想到的答案贴在与每个问题相对应的区域。</h3><h3 id="4-接下来让大家进行讨论，选出让大家觉得最能认可的答案（可能会多个）。"><a href="#4-接下来让大家进行讨论，选出让大家觉得最能认可的答案（可能会多个）。" class="headerlink" title="4. 接下来让大家进行讨论，选出让大家觉得最能认可的答案（可能会多个）。"></a>4. 接下来让大家进行讨论，选出让大家觉得最能认可的答案（可能会多个）。</h3><h3 id="5-按照模板，一起或分组完成一个“Elevator-Pitch”"><a href="#5-按照模板，一起或分组完成一个“Elevator-Pitch”" class="headerlink" title="5. 按照模板，一起或分组完成一个“Elevator Pitch”"></a>5. 按照模板，一起或分组完成一个“Elevator Pitch”</h3><img src="/imgs/elevator-pitch-template.png" width="600" height="250"><h3 id="6-对照所得到的结果，再进行讨论、提炼，到大家都基本满意为止。"><a href="#6-对照所得到的结果，再进行讨论、提炼，到大家都基本满意为止。" class="headerlink" title="6. 对照所得到的结果，再进行讨论、提炼，到大家都基本满意为止。"></a>6. 对照所得到的结果，再进行讨论、提炼，到大家都基本满意为止。</h3><h2 id="六、Elevator-Pitch模板"><a href="#六、Elevator-Pitch模板" class="headerlink" title="六、Elevator Pitch模板"></a><span id="Elevator Pitch模板">六、Elevator Pitch模板</span></h2><img src="/imgs/elevator-pitch-template-picture.png" width="600" height="250"><h3 id="1-模板"><a href="#1-模板" class="headerlink" title="1. 模板"></a>1. 模板</h3><p>英文：<br>    <strong><font color="#0099ff" size="3">FOR</font></strong> [ target customer ]<br>    <strong><font color="#0099ff" size="3">WHO</font></strong> [ statement of the need or opportunity ]<br>    <strong><font color="#0099ff" size="3">THE</font></strong> [ product name ]<br>    <strong><font color="#0099ff" size="3">IS A</font></strong> [ product category ]<br>    <strong><font color="#0099ff" size="3">THAT</font></strong> [ key benefit, compelling reason to use ]<br>    <strong><font color="#0099ff" size="3">UNLIKE</font></strong> [ primary competitive alternative ]<br>    <strong><font color="#0099ff" size="3">OUR PRODUCT</font></strong> [ statement of primary differentiation ].</p><p>中文：<br>    对于需要<u><font color="#999999" size="3">   陈述用户需求   </font></u>的<br>    <u><font color="#999999" size="3">   陈述对用户形容词      </font></u>用户<br>    我们的<u><font color="#999999" size="3">   产品名      </font></u><br>    是一个<u><font color="#999999" size="3">   产品类型     </font></u><br>    它可以<u><font color="#999999" size="3">   核心价值点   </font></u><br>    与<u><font color="#999999" size="3">   竞争对手   </font></u>不同的是<br>    它<u><font color="#999999" size="3">   描述独特特点   </font></u></p><h3 id="2-模板示例：数字化平台"><a href="#2-模板示例：数字化平台" class="headerlink" title="2. 模板示例：数字化平台"></a>2. 模板示例：数字化平台</h3><p><strong><font color="#0099ff" size="3">For</font></strong> All Digital Channels<br><strong><font color="#0099ff" size="3">Who</font></strong> want a frictionless experience to rapidly innovate<br><strong><font color="#0099ff" size="3">The</font></strong> Digital Platform<br><strong><font color="#0099ff" size="3">Is A</font></strong> set of services supporting a differentiated set of capabilities<br><strong><font color="#0099ff" size="3">That</font></strong> drives change through rapid creation of new customer features<br><strong><font color="#0099ff" size="3">Unlike</font></strong> our channel specific approach<br><strong><font color="#0099ff" size="3">Our product</font></strong> allows the platform customers to test ideas rapidly while<br>supporting high reliability.</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本文从创建项目的愿景开始，引出Elevator Pitch这个工具。Elevator Pitch应用范围很广。但是笔者只是就目前工作中，创建项目愿景这一个方向，指出了Elevator Pitch的模板，并简要的说明了使用的方式，来让团队成员对项目有一个清晰 、一致的理解。</p><ul><li>至于如何创建成功的 Elevator Pitch 未做说明，可以参考<a href="https://community.pinkpetro.com/community/pink-petro-university/blog/2016/11/17/12-tips-for-a-successful-elevator-pitch" target="_blank" rel="noopener">12 Tips for a Successful Elevator Pitch</a>和<a href="https://zhuanlan.zhihu.com/p/26846010" target="_blank" rel="noopener">电梯游说：如何在30秒内完成有效生动的自我介绍</a></li><li>至于 Elevator Pitch 的 WHO、WHY、WHEN 等问题，可以更详细从[Elevator Pitch Essentials(<a href="http://elevatorpitchessentials.com/index.html)中找到。" target="_blank" rel="noopener">http://elevatorpitchessentials.com/index.html)中找到。</a></li><li>至于 Elevator Pitch 更常见的应用场景实例，比如自我推销、职场管理沟通效率提升小工具，可以网上搜索相关资料。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://elevatorpitchessentials.com/index.html" target="_blank" rel="noopener">Elevator Pitch Essentials，Chris O’Leary</a></li><li><a href="https://zhuanlan.zhihu.com/p/35170463" target="_blank" rel="noopener">如何用30秒的电梯游说改变你的人生</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　在敏捷项目中，开始一个新项目的第一步，往往是了解客户的愿景（Vision）或者使命宣言（Mission Statement），并创建项目愿景。 本篇文章主要关注于创建愿景的工具之一Elevator Pitch，将从以下几个方面展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#了解项目愿景&quot;&gt;了解项目愿景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#理解Elevator Pitch&quot;&gt;理解Elevator Pitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Elevator Pitch模板&quot;&gt;Elevator Pitch模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>懒兔子系列-说医不二</title>
    <link href="http://yoursite.com/2018/07/11/%E6%87%92%E5%85%94%E5%AD%90%E7%B3%BB%E5%88%97-%E8%AF%B4%E5%8C%BB%E4%B8%8D%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/07/11/懒兔子系列-说医不二/</id>
    <published>2018-07-11T17:26:20.000Z</published>
    <updated>2018-07-11T20:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　懒兔子系列目前一共有三本：《说医不二》、《医学就会》和《就是想看你笑的样子》。<br>本篇文章主要是阅读完懒兔子系列之《说医不二》之后，对此的一些记录与感慨。</p><img src="/imgs/懒兔子系列-说医不二.png" width="400" height="500"><p>　　内容主要包括：</p><ul><li><a href="#内容回顾">内容回顾</a></li><li><a href="#一些感悟">一些感悟</a></li><li><a href="#经典语句">经典语句</a></li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　在微信图书上，偶然看到懒兔子系列之《说医不二》。抱着打发时间的态度，翻看了两页，没想到竟然一口气读完，总共也就花费了差不多一个半小时的样子。<br>　　笔者并不是对医学感兴趣，纯粹是觉得这本书读起来一气呵成，且从中感受到了一些人生态度和生活方式。之后再找时间把剩下的两本《医学就会》和《就是想看你笑的样子》也看一看。</p><h2 id="三、内容回顾"><a href="#三、内容回顾" class="headerlink" title="三、内容回顾"></a><span id="内容回顾">三、内容回顾</span></h2><h3 id="1-章节"><a href="#1-章节" class="headerlink" title="1. 章节"></a>1. 章节</h3><p>　　全书共5章，分别为：</p><ul><li><p>第一章——只要你进过厨房，你就早已是中医。<br>　　重点讲述了我们日常人和中医的关系。</p></li><li><p>第二章——十二经络的值班表：子午流注。<br>　　主要告诉我们十二经络的值班时间和主要职责。</p></li><li><p>第三章——人生就是一场西游。<br>　　唐三藏代表是的人体的精、气、神；悟空代表我们的”心”，他的成长过程也代表我们心灵的成熟过程；我们的欲望就是猪八戒；沙老三则代表我们非常重要的厚德载物的脾胃。</p></li><li><p>第四章——天空飘来几个字 ：缺津少液是大事儿。<br>　　揭秘了”气、血、津液”的相互关系。</p></li><li><p>第五章——做自己最好的医生。<br>　　重点说说关于脾虚、气虚、阴虚阳虚等问题，以及如何自我诊断、自我疗愈的那些事儿。</p></li></ul><h3 id="2-十二经络的值班表"><a href="#2-十二经络的值班表" class="headerlink" title="2. 十二经络的值班表"></a>2. 十二经络的值班表</h3><p>　　子午流注，简单的记忆方法：</p><ul><li><p>子时(23:00——1:00)，胆经最旺。要想记忆好，此时早睡觉。</p></li><li><p>丑时(1:00——3:00)，肝经最旺。容易精神，难以入睡。</p></li><li><p>寅时(3:00——5:00)，肺经最旺。熬夜到此撑不出了。如果咳嗽，就是有肺病，肺不能很好的肃降。</p></li><li><p>卯时(5:00——7:00)，大肠经最旺。该起床便便了，早上起来，可以喝点盐水，促进排便。</p></li><li><p>辰时(7:00——9:00)，胃经最旺。该吃饭了。</p></li><li><p>巳时(9:00——11:00)，脾经最旺。</p></li><li><p>午时(11:00——13:00)，心经最旺。该吃饭，小憩一会儿比较好。</p></li><li><p>未时(13:00——15:00)，小肠经最旺。</p></li><li><p>申时(15:00——17:00)，膀胱经最旺。比较适合运动。</p></li><li><p>酉时(17:00——19:00点)，肾经最旺。比较适合爱爱。</p></li><li><p>戌时(19:00——21:00)，心包经最旺。阴气较重，不适合大量运动。</p></li><li><p>亥时(21:00——23:00)，三焦经最旺。千万不要生气，否则特别上容颜。</p></li></ul><p>　　简易歌诀：寅时气血注入肺，卯时大肠辰时胃，巳脾午心未小肠，申属膀胱酉肾位，戌时心包亥三焦，子胆丑肝各定位。</p><h3 id="3-气的种类"><a href="#3-气的种类" class="headerlink" title="3. 气的种类"></a>3. 气的种类</h3><ul><li><p>元气<br>　　又叫真“气”，先天的气，爹妈给的。</p></li><li><p>宗气<br>　　积聚在胸中的气，由非吸入的空气和脾胃生化的水谷精气结合而成。宗气主要表现在两方面，一是和肺有关，如说话嗓门大小；二是和心脏有关，比如心脏搏动强弱或节律是否正常。</p></li><li><p>中气<br>　　脾胃之气 脾胃消化水谷精微产生中气，中气又反过来维持脾胃正常功能。</p></li><li><p>营气<br>　　在血脉里，和血一起运行与人体的全身，，由水谷精气中的精华部分所生。营气不足就会血虚，头晕目眩，唇甲无色，经量少，闭经，因为血脉中，在身体里面，所以属性为阴。</p></li><li><p>卫气<br>　　生于水谷，源于脾胃，在人体上下左右流窜，处在皮肤和肌肉之间，就像一道护卫，保护肌体免受外邪干扰，同时营养肌肤和毛发。此外负责开合毛孔。营气和卫气一个在血脉里，一个在血脉外，人体体温是否正常要看营卫两气是否调和，一般感冒发烧即“营卫不和”，意为卫气不能很好地开合毛孔调和营气温度。卫气在血脉外，在体表，属阳，卫阳营阴。</p></li><li><p>五脏之气<br>　　“心、肝、脾、胃、肾”之气，即“脏气”。脾胃是根本，是人体所有气的来源。保护好脾胃，不是为了能吃能喝，而是为了有“气”。</p></li></ul><h2 id="四、一些感悟"><a href="#四、一些感悟" class="headerlink" title="四、一些感悟"></a><span id="一些感悟">四、一些感悟</span></h2><h3 id="1-厨房里的中医"><a href="#1-厨房里的中医" class="headerlink" title="1. 厨房里的中医"></a>1. 厨房里的中医</h3><p>　　手术后的病人吃老祖宗通过智慧留下米粥最好，给大病初愈，身体虚弱的爱的人最好的礼物，养胃补脾推荐：小米粥、大米粥、南瓜、红薯、山药。治疗女性虚劳病、肚子痛，可在羊肉汤里加入当归和生姜。滋阴可在猪肉汤里加入莲藕。</p><h3 id="2-中医的思维方式"><a href="#2-中医的思维方式" class="headerlink" title="2. 中医的思维方式"></a>2. 中医的思维方式</h3><p>　　中医的思维：从根本上进行改变，那些曾经困扰你的表象就会立刻烟消云散。</p><p>　　中医是讲究症状的，症状并不是治病的重点，引发症状的原因才是医生关注的重点。所以，表面上我们大家的生活千姿百态，烦恼万千，工作、学习、爱人、孩子，诸多不如意，百般不顺心，但其实这些不过都是症状，根源在哪里？根源在我们的心。<br>比如你对你的工作诸多抱怨（工作环境差、领导不好等），但最终的根本在于你不喜欢这份工作，钱少活多离家远，没有上升空间。</p><p>　　学会用中医的思维去生活和看病，拨开表面症状的迷雾，寻找本质的答案。</p><h3 id="3-我们的爱有太多的自以为是"><a href="#3-我们的爱有太多的自以为是" class="headerlink" title="3. 我们的爱有太多的自以为是"></a>3. 我们的爱有太多的自以为是</h3><p>　　我们对父母的爱，对子女的爱，对爱人的爱，有太多的自以为是。我们总是喜欢把自己认为好的给他们，却很少想到他们会不会喜欢，甚至还常常因为他们表现得不那么喜欢，而生气和悲伤。</p><h3 id="4-成为有吸引力的人"><a href="#4-成为有吸引力的人" class="headerlink" title="4. 成为有吸引力的人"></a>4. 成为有吸引力的人</h3><p>　　如果你把安全感放在别人身上，那别人随时就能把你撂倒。幸福只能通过自己身上获得，别人无法完全给于。<br>　　当你身上具备了别人可以获取的能量后，靠近你，就完全变成了不自主的事情。当你丰富了，你身上就会流淌出许多能量，这些能量会让你充满魅力和自信，也会填满你生活的所有缝隙。</p><h3 id="5-最好的医生就是我们自己"><a href="#5-最好的医生就是我们自己" class="headerlink" title="5. 最好的医生就是我们自己"></a>5. 最好的医生就是我们自己</h3><p>　　人这一辈子总免不了有生病的时候，当我们的身体出现不适感后，最先的发现者，不是医生，而是我们本人。谁也不可能像自己了解自己身体那样清楚。比如说，你吃到什么程度算八成饱？你喝了多少酒为适量？你每天要睡多长时间才感觉舒服？你运动量多大正好？这些，别人是无法替你把握的，只有靠自己在长期的生活、养生中去体验，去总结，去调整，才能恰到好处。再比如，好多身体不适目前医学上还不能很好地解释清楚，特别是许多心理上的疾病，也只能靠自己来调整。</p><h3 id="6-历练和成熟的人生"><a href="#6-历练和成熟的人生" class="headerlink" title="6. 历练和成熟的人生"></a>6. 历练和成熟的人生</h3><p>　　我们人的心成长、历练的过程中有欢笑、有泪水、有委屈，有成功。不经历磨难，就永远不会成熟。</p><h2 id="五、经典语句"><a href="#五、经典语句" class="headerlink" title="五、经典语句"></a><span id="经典语句">五、经典语句</span></h2><ol><li><p>用中医的思维，拨开纷乱复杂的表面症状，窥视简单而核心的本质，你就会发现：如果你能从根本上进行改变那些曾经困扰你的表象就会立刻烟消云散。</p></li><li><p>当你丰富了，你身上就会流淌出许多能量，这些能量会让你充满魅力和自信，也会填满你生活的所有缝隙。</p></li><li><p>没有任何疾病是从天而降的，不过是我们之间不经意种下的种子发芽了。</p></li><li><p>心情好其实是我们能给予爱的人最好的礼物。</p></li><li><p>别再让我们的爱，成为他们生命不能承受的负担。</p></li><li><p>如果我们一事无成，不要去责怪欲望，而要怪自己没有一颗足够有力量可以克服欲望、努力前行的心。</p></li><li><p>放低自己，低的是姿态，强的是气场。</p></li><li><p>人生没有对错，也没有重来。只是很多时候，我们都不过是用一个错误去弥补另一个错误罢了。</p></li><li><p>身体是非常智慧的，当它感觉到有问题的时候，就会想方设法用症状告诉我们。</p></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　有人认为这是一本漫画书，消磨时间，仅供娱乐；<br>　　有人认为这是一本中医入门书，风格幽默，通俗易懂；<br>　　有人认为这是一本胡诌玄学，不够严谨，插科打诨；<br>　　有人认为这是一本哲学书，中医思维，平民哲学。<br>　　于我而言，黑色幽默，漫画风格，一个半小时读下来，一气呵成。中间涉及的方子没有记住，每味药的原理也没有掌握，但对于十二经络、五脏的相互作用（特别是脾）等都有了最基本的了解，对于日常生活要养成好习惯有了一定的警醒，同时更多的是感受到了其中表达出来的人生态度和生活方式。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jianshu.com/p/40ff7eb75a91" target="_blank" rel="noopener">《说医不二》读后感，感恩日记微幸福</a></li><li><a href="https://www.jianshu.com/p/7b7f16e4869b" target="_blank" rel="noopener">《说医不二》介绍，乐佛仙女_清浊</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　懒兔子系列目前一共有三本：《说医不二》、《医学就会》和《就是想看你笑的样子》。&lt;br&gt;本篇文章主要是阅读完懒兔子系列之《说医不二》之后，对此的一些记录与感慨。&lt;/p&gt;
&lt;img src=&quot;/imgs/懒兔子系列-说医不二.png&quot; width=&quot;400&quot; height=&quot;500&quot;&gt;
&lt;p&gt;　　内容主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#内容回顾&quot;&gt;内容回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#一些感悟&quot;&gt;一些感悟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#经典语句&quot;&gt;经典语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java - JVM内存结构 vs Java内存模型 vs Java对象模型</title>
    <link href="http://yoursite.com/2018/07/10/Java-JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-vs-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-vs-Java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/07/10/Java-JVM内存结构-vs-Java内存模型-vs-Java对象模型/</id>
    <published>2018-07-10T10:57:13.000Z</published>
    <updated>2018-07-15T10:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　本文主要参考于 Hollis 的文章<a href="http://www.cnblogs.com/z00377750/p/9277836.html" target="_blank" rel="noopener">《【JVM】JVM内存结构 VS Java内存模型 VS Java对象模型》</a><br>主要对<em><em>JVM内存结构</em></em>、<em><em>Java内存模型</em></em>、<em><em>Java对象模型</em></em>这三个概念进行概念区分和简单的介绍，之后再补充其他文章进行详细介绍。</p><ul><li><a href="#JVM内存结构">JVM内存结构</a></li><li><a href="#Java内存模型">Java内存模型</a></li><li><a href="#Java对象模型">Java对象模型</a></li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　很久没写 Java 代码了，感觉水平还停留在最初始的那个阶段。<br>一直以来都很想深入学习 Java，了解 JVM，了解并发编程，往往都是看了很多，没有用到，然后就忘记了。<br>最近项目初始阶段，不太忙，所以好好利用下时间，再次回顾一下相关知识，然后记录下来，印象更加深刻一些。</p><h2 id="三、JVM内存结构"><a href="#三、JVM内存结构" class="headerlink" title="三、JVM内存结构"></a><span id="JVM内存结构">三、JVM内存结构</span></h2><p>　　Java 虚拟机在执行Java 程序的过程中，会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建个销毁的时间，有的区域随着虚拟机进程的启动而存在，有的区域则依赖于用户线程的启动和结束而建立和销毁。《Java虚拟机规范（Java SE 8）》中描述了JVM运行时内存区域结构如下：</p><img src="/imgs/java-jvm-memory-structure.png" width="600" height="300"><p>　　具体的各个区域的介绍，会在后续的文章中进行详细阐述。</p><h2 id="四、Java内存模型"><a href="#四、Java内存模型" class="headerlink" title="四、Java内存模型"></a><span id="Java内存模型">四、Java内存模型</span></h2><p>　　在前面的JVM内存结构图中，我们可以看到Java堆和方法区的区域是多个线程共享的数据区域。也就是说，多个线程可能可以操作保存在堆或者方法区中的同一个数据。这也就是我们常说的“Java的线程间通过共享内存进行通信”。</p><p>　　Java内存模型，Java Memory Model，简称JMM。JMM 是一个抽象的概念，并不像JVM内存结构一样真实存在。它描述的是一组规则或规范，通过这组规范定义了程序中各个变量的访问方式。线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了改线程对共享变量的操作副本。</p><img src="/imgs/java-memory-model.png" width="400" height="300"><p>　　由于采用共享内存进行通信，在通信过程中会存在一系列如可见性、原子性、顺序性等问题，而JMM就是围绕着多线程通信以及与其相关的一系列特性而建立的模型。JMM定义了一些语法集，这些语法集映射到<code>Java</code>语言中就是<code>volatile</code>、<code>synchronized</code>等关键字。</p><h2 id="五、-Java对象模型"><a href="#五、-Java对象模型" class="headerlink" title="五、 Java对象模型"></a><span id="Java对象模型">五、 Java对象模型</span></h2><p>　　在JVM的内存结构中，对象保存在堆内存中，而我们在对对象进行操作时，其实操作的是对象的引用。<br>　　Java对象在JVM中的存储也是有一定的结构的，这个就是Java 对象模型。对象在堆内存的布局分为三个区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）.</p><img src="/imgs/java-object-layout.png" width="600" height="400"><ul><li>对象头（Header）<br>　　包括Mark Word和元数据指针。如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度。<br>　　Mark Word用于存储对象自身的运行时数据，例如HashCode、GC分代年龄等信息。<br>　　元数据指针用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。</li><li>实例数据（Instance Data）<br>　　实例数据部分是对象真正存储有效信息的区域，存储了代码中定义的各种字段的内容，包括从父类继承下来的字段和子类中定义的字段。</li><li>对齐填充（Padding）<br>　　对齐填充这部分不是必须存在的，这部分仅仅是起着占位符的作用。由于HotSpot虚拟机的自动内存管理系统要求对象的起始地址必须是8字节的整数倍，因此当对象实例部分数据没有对齐时，就需要对剩余的部分进行填充。</li></ul><p>　　HotSpot虚拟机中，设计了一个OOP-Klass Model。OOP（Ordinary Object Pointer）指的是普通对象指针，而Klass用来描述对象实例的具体类型。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　JVM内存结构，和Java虚拟机的运行时区域有关；<br>　　Java内存模型，和Java并发编程有关；<br>　　Java对象模型，和Java对象在虚拟机中的表现形式有关。</p><p>　　这三个概念，很多时候会被人混淆。先初步了解清楚这些概念，便于后面的深入的学习。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.cnblogs.com/z00377750/p/9277836.html" target="_blank" rel="noopener">【JVM】JVM内存结构 VS Java内存模型 VS Java对象模型</a></li><li><a href="http://www.cnblogs.com/zhengbin/p/5617023.html" target="_blank" rel="noopener">JVM内存结构——运行时数据区</a></li><li><a href="https://blog.csdn.net/calledwww/article/details/79368966" target="_blank" rel="noopener">Java内存区域与Java内存模型</a></li><li><a href="http://www.infoq.com/cn/articles/java-memory-model-1" target="_blank" rel="noopener">深入理解Java内存模型（一）——基础， 程晓明</a></li><li><a href="https://segmentfault.com/a/1190000007652363" target="_blank" rel="noopener">Java对象内存布局解析</a></li><li><a href="http://www.cnblogs.com/qingshanli/p/9250491.html" target="_blank" rel="noopener">Java对象模型, 张小凡</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　本文主要参考于 Hollis 的文章&lt;a href=&quot;http://www.cnblogs.com/z00377750/p/9277836.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《【JVM】JVM内存结构 VS Java内存模型 VS Java对象模型》&lt;/a&gt;&lt;br&gt;主要对&lt;em&gt;&lt;em&gt;JVM内存结构&lt;/em&gt;&lt;/em&gt;、&lt;em&gt;&lt;em&gt;Java内存模型&lt;/em&gt;&lt;/em&gt;、&lt;em&gt;&lt;em&gt;Java对象模型&lt;/em&gt;&lt;/em&gt;这三个概念进行概念区分和简单的介绍，之后再补充其他文章进行详细介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#JVM内存结构&quot;&gt;JVM内存结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Java内存模型&quot;&gt;Java内存模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Java对象模型&quot;&gt;Java对象模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programmming" scheme="http://yoursite.com/categories/Programmming/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Portal 和 Portlet</title>
    <link href="http://yoursite.com/2018/07/07/Portal-Portlet/"/>
    <id>http://yoursite.com/2018/07/07/Portal-Portlet/</id>
    <published>2018-07-07T07:32:04.000Z</published>
    <updated>2018-07-10T15:36:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　本文是初识Portal 和Portlet，并对相关的概念进行扫盲，主要包括：</p><ul><li><a href="#Portal">Portal</a></li><li><a href="#Portlet">Portlet</a></li><li><a href="#Portlet容器">Portlet容器</a></li><li><a href="#JSR168">JSR168</a></li><li><a href="#认识Portal和Portlet">认识 Portal 和 Portlet</a></li><li><a href="#Widget">Portlet和Widget</a>、<a href="#Servlet">Servlet的对比</a></li><li><a href="#Portlet的生命周期">Portlet的生命周期</a></li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　最近加入敏捷咨询的团队，客户是一个保险公司，我们的任务是对他们现有的技术架构进行分析，了解他们的痛点，对应做出敏捷转型的方案。<br>　　了解到他们目前是采用 IBM 的 Websphere服务器，采用Portal的架构模式。各个 portlet 之间相互调用，相互依赖，并不是完全的独立。因此他们的主要痛点在于，每次部署都需要很长时间的准备，此外，很难进行集成测试。当然，还有其他一些问题，但是经过小组讨论之后，进行敏捷转型，第一步是要帮助其构建持续集成、持续交付。<br>　　在此之前，笔者对Portal 这一套门户系统，并不了解，因此特意先做点准备工作。</p><h2 id="三、一些概念"><a href="#三、一些概念" class="headerlink" title="三、一些概念"></a>三、一些概念</h2><p>　　先简单解释下<code>Portal</code>、<code>Portlet</code>、<code>Portlet 容器</code>和<code>JSR168</code>，然后再详细展开：</p><img src="/imgs/portal-portlet-architecture.png" width="600" height="300"><p>　　<code>Portal</code>是一种web应用，<code>Portlet</code>是一种Web组件。通俗来说，<code>Portlet</code>就是一个<code>Portal</code>上的子窗口。<code>Portlet容器</code>是<code>Portlet</code>的运行时环境。<code>JSR168</code>是规范，为创建Portlet建立标准的API。</p><h3 id="1-什么是Portal？"><a href="#1-什么是Portal？" class="headerlink" title="1. 什么是Portal？"></a><span id="Portal">1. 什么是Portal？</span></h3><p>　　Portal，英文直译是“大门、入口”，这里指“门户”，现多用于互联网的门户网站和企业应用系统的门户系统。</p><p>　　狭义上，门户网站，指通向某类综合性互联网信息资源并提供有关信息服务的应用系统。门户网站最初提供搜索引擎、目录服务，后来由于市场竞争日益激烈，门户网站不得不快速地拓展各种新的业务类型，希望通过门类众多的业务吸引和留驻互联网用户。在全球范围中，最为著名的门户网站则是谷歌以及雅虎，而在中国，最著名的门户网站有中国四大门户网站（新浪、网易、搜狐、腾讯），其他也有百度、新华网、人民网、凤凰网等也较为著名。</p><p>　　广义上，这里是一个Web应用框架，它将各种应用系统、数据资源和互联网资源集成到一个信息管理平台之上，并以统一的用户界面提供给用户，并建立企业对客户、企业对内部员工和企业对企业的信息通道，使企业能够释放存储在企业内部和外部的各种信息。</p><p>　　本文的Portal主要指广义上的概念，更多解释，可以查看<a href="https://baike.baidu.com/item/%E9%97%A8%E6%88%B7%E7%BD%91%E7%AB%99#2" target="_blank" rel="noopener">门户网站的百度百科</a></p><h3 id="2-什么是Portlet？"><a href="#2-什么是Portlet？" class="headerlink" title="2. 什么是Portlet？"></a><span id="Portlet">2. 什么是Portlet？</span></h3><p>　　Portlet，门户组件，它是基于Java的Web组件，由Portlet容器管理，并由容器处理请求，生产动态内容。Portals使用Portlets作为可插拔用户接口组件，提供信息系统的表示层。Portlets实现了Web应用的模块化和用户中心化。</p><p>　　从用户的角度来看，<code>Portlet</code>是门户网站站点中提供特定服务或信息（例如，新闻、广告）的窗口；<br>从应用程序开发者的角度来看，Portlet 是可插入的模块，它们被设计成在门户网站服务器的<code>Portlet 容器</code>中运行。</p><p>　　更多解释，可以查看<a href="https://baike.baidu.com/item/Portlet/1069487?fr=aladdin" target="_blank" rel="noopener">Portlet的百度百科</a></p><h3 id="3-什么是Portlet容器"><a href="#3-什么是Portlet容器" class="headerlink" title="3. 什么是Portlet容器?"></a><span id="Portlet容器">3. 什么是Portlet容器?</span></h3><p>　　Portlet容器提供Portlet需求的运行时环境并运行Portlet。它包含Portlets并控制它们的生命周期。容器提供Portlet参数的持久存储机制，它接受来自Portal的request，并在其持有的Portlet上执行request。容器不负责Portlet产生内容的聚合，Portal自己处理内容聚合。</p><h3 id="4-什么是JSR168？"><a href="#4-什么是JSR168？" class="headerlink" title="4. 什么是JSR168？"></a><span id="JSR168">4. 什么是JSR168？</span></h3><p>　　JSR168是Java规范要求（Java Specification Request，JSR）的缩写，开发符合JSR168规范的Portlet将可以顺利移植到符合该规范的不同Portal平台上！</p><p>　　随着企业级Portal的大量涌现，不同提供商创建了不同的Portal组件API，即Portlet。不同的不兼容给应用服务商，Portal用户和Portal Server提供商都造成了问题。为了消除这些问题，JSR168，即Portlet规范提出，从而提供Portlet和Portal间的互操作性。</p><img src="/imgs/portal-portlet-protocol.png" width="600" height="200"> <p>　　JSR168的目标:</p><ul><li>定义了portlet运行环境 - portlet容器 </li><li>定义了portlet容器和portlet之间的API </li><li>提供了portlet存储持久性和非持久性数据的机制 </li><li>提供了portlet包含servlet和JSP的机制 </li><li>定义了portlet打包，方便部署 </li><li>保证了portlet在JSR 168门户中的二进制移植 </li><li>能够以WSRP（Web Service for Remote Portlet）协议把JSR 168 portlet作为远程portlet运行。</li></ul><h2 id="三、认识-Portal-和-Portlet"><a href="#三、认识-Portal-和-Portlet" class="headerlink" title="三、认识 Portal 和 Portlet"></a><span id="认识Portal和Portlet">三、认识 Portal 和 Portlet</span></h2><p>　　<code>Portlet</code> 在 <code>Portlet 容器</code>中运行，容器接收<code>Porlet</code>生成的内容，并传递给<code>Portal</code>。由 <code>Portal</code>服务器组织成<code>Portal 页面</code>，并送交客户端设备（如浏览器）显示。</p><h3 id="1-Portal页面"><a href="#1-Portal页面" class="headerlink" title="1. Portal页面"></a>1. Portal页面</h3><p>　　<code>Portal</code>可以被视为一系列具有不同区域的网页。这些区域包含不同的窗口，每个窗口包含一个<code>Portlet</code>：<br><img src="/imgs/portal-portlet-page.png" width="600" height="300"></p><p>　　Portlet 生成片段（Fragment），而 Portal 通常要添加上标题（Title）、控制按钮和其他装饰性元素（Decorations and Controls），而得到 Portlet 窗口（Portlet Window）。最后 Portal 将多个 Portlet 窗口聚合而成一个完整的文档，即 Portal 页面（Portal Page）。</p><h3 id="2-Portlet-Rendering-Modes"><a href="#2-Portlet-Rendering-Modes" class="headerlink" title="2. Portlet Rendering Modes"></a>2. Portlet Rendering Modes</h3><p>　　<code>Portlet</code>有不同的视图模式，规范定义了3种模式：</p><ul><li>VIEW（查看）: 生成反映Portlet当前状态的标记。</li><li>EDIT（编辑）: 应该允许用户自定义Portlet的行为。</li><li>HELP（帮助）: 应该向用户提供有关如何使用Portlet的一些信息。</li></ul><h3 id="3-Window-States（窗口状态）"><a href="#3-Window-States（窗口状态）" class="headerlink" title="3. Window States（窗口状态）"></a>3. Window States（窗口状态）</h3><p>　　窗口状态是指示Portlet在任何给定页面上应占用多少页面空间的指示器。规范定义了3种状态：</p><ul><li>NORMAL（正常）</li><li>MINIMIZED（最小化）</li><li>MAXIMIZED（最大化）</li></ul><h2 id="四、对比"><a href="#四、对比" class="headerlink" title="四、对比"></a>四、对比</h2><h3 id="1-Portlet-和-Widget"><a href="#1-Portlet-和-Widget" class="headerlink" title="1. Portlet 和 Widget"></a><span id="Widget">1. <code>Portlet</code> 和 <code>Widget</code></span></h3><p>　　<code>Widget</code>是嵌入在较大网页中的网页，通常使用iFrame——内容来自单独的HTTP连接，并具有自己的CSS样式表，cookie等。最终合成发生在用户的浏览器中。<br>　　<code>Portlet</code>是软件模块，用来生成组合HTML页面的标记片段（Markup Fragment），这些Fragment共享通用的CSS样式表，cookie等。最终组合在<code>Portlet Server</code>上进行，然后页面再被传递到客户端浏览器。</p><p>　　<code>Portlet</code>和<code>Widget</code>都提供了UI组件模型，因此具有很多相似之处:</p><ul><li>它们都提供用户和后端服务的交互;</li><li>都可以将信息和上下文传递给其他的<code>Portlet</code>或者<code>Widget</code>;</li><li>最终用户和管理员可以将<code>Portlet</code>或<code>Widget</code>放到页面上并在页面上重新排列它们。</li></ul><p>　　上述可以看出<code>Portlet</code> 和 <code>Widget</code>最终合成页面的地方不一样，因此主要不同之处也是围绕这个展开：</p><ul><li><code>Portlet</code>是服务端组件模型，<code>Widget</code>是客户端组件模型;</li><li><code>Widget</code>的源码是已经下载了的，所以在浏览器中是可见的;</li><li><code>Widget</code>比标准的<code>Portlet</code>更具响应式，因为<code>Widget</code> 对服务器的调用是独立的浏览器调用。但是，也许有时候呈现页面的某一个部分并不是期望行为。</li><li><code>Widget</code>通常直接与信息系统交互，来获取它们需要的内容，<code>Portal</code>则是聚合很多<code>Portlet</code>生成的内容</li></ul><img src="/imgs/portal-portlet-widget.png" width="600" height="300"><h3 id="2-Portlet-和-Servlet"><a href="#2-Portlet-和-Servlet" class="headerlink" title="2. Portlet 和 Servlet"></a><span id="Servlet">2. <code>Portlet</code> 和 <code>Servlet</code></span></h3><img src="/imgs/portal-portlet-servlet.png" width="400" height="250"><p>　　相似之处：</p><ul><li>都是基于Java技术的web组件</li><li>都是被专门的容器管理，<code>Portlet</code>被<code>portlet 容器</code>管理，<code>Servlet</code>被<code>Servlet容器</code>管理</li><li>都可以使用 客户端/服务器端 模式</li><li>都是与web客户端通过request/response方式交互</li></ul><p>　　不同之处：</p><ul><li><code>Servlet</code>生成整个web页面，而<code>Portlet</code>只生成内容片断，而<code>Portal</code>来负责将这些片断组装到同一个页面</li><li><code>Servlet</code>可以被映射为url，但是<code>Portlet</code>不可以被直接映射为url</li><li>Web客户端可以直接同<code>Servlet</code>交互，但是如果Web客户端要和<code>Portlet</code>交互需要通过<code>Portal</code> 系统</li><li><code>Portlet</code>定义了<code>Portlet Mode</code>和<code>Window State</code></li><li><code>Portlet</code>可以持久化存储和访问数据</li><li><code>Portlet</code>可以在两种范围上存/取数据到session里: Portlet私有域和application域上</li><li><code>Portlet</code>的response都无法设置字符编码，而Servlet 可以。</li></ul><h2 id="五、Portlet的生命周期"><a href="#五、Portlet的生命周期" class="headerlink" title="五、Portlet的生命周期"></a><span id="Portlet的生命周期">五、Portlet的生命周期</span></h2><p>　　<code>Portlet API</code>包含一个<code>GenericPortlet</code>类，它实现<code>Portlet</code>，<code>EventPortlet</code>和<code>ResourceServingPortlet</code>接口并提供默认功能。开发人员通常应直接或间接扩展<code>GenericPortlet</code>类以实现其portlet。<br><img src="/imgs/portal-portlet-interface-diagram.png" width="600" height="300"></p><p>　　基本的<code>Portlet接口</code>，生命周期包括下面四个方法：</p><ul><li>init</li><li>processAction</li><li>render</li><li>destroy</li></ul><p>　　使用<code>EventPortlet接口</code>时，额外的生命周期操作：</p><ul><li>processEvent，当事件被触发的时候，该方法会被调用</li></ul><p>　　使用<code>ResourceServingPortlet</code>时，额外的生命周期操作：</p><ul><li>serveResource，由portlet容器调用，以允许portlet根据其当前状态生成资源内容。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　下图是基于IBM WebSphere Portal的企业门户示例，选择门户平台产品将帮助企业更好的建立各种企业级的集成标准。<br><img src="/imgs/portal-portlet-ibm.png" width="600" height="300"></p><p>　　本文只是对Portal门户系统的初步了解，至于它的优势劣势、以及它的具体使用场景、使用的注意事项，甚至portlet的开发，不在此做过多描述。要有实际使用过之后，才有更深刻的体会。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.ibm.com/developerworks/community/files/basic/anonymous/api/library/c144a765-c982-4ab5-93ff-cfdcb9140298/document/1ae8a0f1-e5e8-4430-9b55-73c1f6e72e91/media" target="_blank" rel="noopener">IBM门户部署与管理简明教程</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/WebSpherePortal/entry/making_sense_of_portlets_and_widgets1?lang=en" target="_blank" rel="noopener">Making Sense of Portlets and Widgets - IBM WebSphere Portal Blog</a></li><li><a href="http://jsr286tutorial.blogspot.com/p/portlet-and-servlet.html" target="_blank" rel="noopener">Portlet and Servlet</a></li><li><a href="https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_Portal/6.2/html/Development_Guide/chap-Portlet_Development_Resources.html" target="_blank" rel="noopener">Portlet Development Resources - Red Hat</a></li><li><a href="https://github.com/jboss-developer/jboss-portal-quickstarts" target="_blank" rel="noopener">Jboss Portal Quickstarts</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　本文是初识Portal 和Portlet，并对相关的概念进行扫盲，主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Portal&quot;&gt;Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Portlet&quot;&gt;Portlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Portlet容器&quot;&gt;Portlet容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#JSR168&quot;&gt;JSR168&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#认识Portal和Portlet&quot;&gt;认识 Portal 和 Portlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Widget&quot;&gt;Portlet和Widget&lt;/a&gt;、&lt;a href=&quot;#Servlet&quot;&gt;Servlet的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Portlet的生命周期&quot;&gt;Portlet的生命周期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programmming" scheme="http://yoursite.com/categories/Programmming/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>Impact Mapping</title>
    <link href="http://yoursite.com/2018/07/04/Impact-Mapping/"/>
    <id>http://yoursite.com/2018/07/04/Impact-Mapping/</id>
    <published>2018-07-04T06:36:55.000Z</published>
    <updated>2018-07-05T19:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　 Impact Mapping（影响地图）多用于分析产品愿景，分解用户故事，分析内部策略，创建和排序需求清单。本文主要从以下几个方面讲述 Impact Mapping：</p><ul><li>理解Impact Mapping</li><li>结构</li><li>如何使用</li><li>下一步</li><li>简单示例</li></ul><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　有幸参与到一个项目的初期阶段，初期是指项目基本还没形成，team 还未组建，只有一个非常 high level 的愿景。<br>　　进行项目kick off的workshop之前，项目组的 BA/QA 在准备Init Client Meeting 的 Agenda 时候，跟我介绍了Impact Mapping 这个工具，它给了一个全新的视角和方式来进行需求（目标）的分析，是一种可协作、可视化、快速的思维分析模式。</p><h2 id="三、理解Impact-Mapping"><a href="#三、理解Impact-Mapping" class="headerlink" title="三、理解Impact Mapping"></a>三、理解Impact Mapping</h2><h3 id="1-什么是Impact-Mapping"><a href="#1-什么是Impact-Mapping" class="headerlink" title="1. 什么是Impact Mapping"></a>1. 什么是Impact Mapping</h3><blockquote class="blockquote-center"><p>Impact mapping is a strategic planning technique. It prevents organisations from getting lost while building products and delivering projects, by clearly communicating assumptions, helping teams align their activities with overall business objectives and make better roadmap decisions.</p></blockquote><p>　　Impact Mapping(影响地图)，是一种战略规划技术，通过明确传达假设，以防止组织在构建产品、交付项目时迷失方向，从而帮助团队将其活动与整体业务目标保持一致，并制定更好的路线图决策。</p><img src="/imgs/impact-mapping-assumptions.png" width="400" height="200"><p>　　简言之，Impact Mapping是一种非常简单的可视化思维分析模式，用于规划从目标到可交付成果的路径。</p><h3 id="2-Impact-Mapping-的目标对象"><a href="#2-Impact-Mapping-的目标对象" class="headerlink" title="2. Impact Mapping 的目标对象"></a>2. Impact Mapping 的目标对象</h3><ul><li>制定决策的人，The people defining the direction</li><li>实施决策的人，The people consuming the direction</li></ul><h3 id="3-什么时候使用-Impact-Mapping？"><a href="#3-什么时候使用-Impact-Mapping？" class="headerlink" title="3. 什么时候使用 Impact Mapping？"></a>3. 什么时候使用 Impact Mapping？</h3><ul><li>项目开始之前：定义目标（Goal）和认知假设（Acknowledge<br>assumptions）；</li><li>项目过程之中：当scope变化时候评估决定，验证工作是否获得了期望的影响；</li></ul><h3 id="4-为什么使用Impact-Mapping？"><a href="#4-为什么使用Impact-Mapping？" class="headerlink" title="4. 为什么使用Impact Mapping？"></a>4. 为什么使用Impact Mapping？</h3><ul><li>战略规划（Strategic Planning）：通过可测量的指标，帮助团队专注于可交付成果。</li><li>质量保证（Define Quality）：通过优先级排列，减少当产品功能和业务目标之间的不一致时候，出现的分歧。</li><li>增强合作：通过创建蓝图，增加业务职能和开发职能之间的理解、沟通和协作。</li></ul><h2 id="四、结构"><a href="#四、结构" class="headerlink" title="四、结构"></a>四、结构</h2><img src="/imgs/impact-mapping-structure.png" width="500" height="350"><p>　　Impact Mapping包含四个层次，WHY、WHO、HOW和WHAT，分别对应了Goal、Actors、Impacts、Deliverables。</p><h2 id="五、如何使用"><a href="#五、如何使用" class="headerlink" title="五、如何使用"></a>五、如何使用</h2><p>　　我们的目标是什么（WHY），为了达成目标需要哪些人（WHO）去怎样（HOW）影响，为此我们需要做什么（WHAT）。</p><h3 id="1-WHY"><a href="#1-WHY" class="headerlink" title="1. WHY"></a>1. WHY</h3><p>　　第一个问题：Why are we doing this?</p><p>　　Impact Mapping应该是从上到下的进行。有一个非常普遍的现象：在构建解决方案之前，人们往往心里有解决方案的想法，但是并没有真正考虑过该问题或者不知道怎样才算问题解决了。为了确保我们不浪费时间和精力，我们可以从目标开始，也就是“我们为什么要做这个？”</p><p>　　“我们为什么做这个？”的答案，就是我们的目标。一方面，快速响应市场的变化；另外一方面，专注在我们真实的需求上。一旦目标得到了验证，我们就可以开始下面的第二步了。</p><p>　　Note：目标应该采用SMART 原则（Specific, Measurable, Achievable, Realistic, Timely）</p><h3 id="2-WHO"><a href="#2-WHO" class="headerlink" title="2. WHO"></a>2. WHO</h3><p>　　第二个问题：Who will help us?</p><p>　　没有其他人的帮助，我们不可能完成目标，这些人我们称之为Actor。Actor，可以是顾客、用户、职员、其他组织机构、当局或者其他人。为了找到不同类型的关键人物，我们可以问自己：谁是用户？谁会受到影响？谁会阻挠目标？</p><p>　　重要的参与者是那些直接影响产品成功的人，这些人可以分为：主要（Primary）、次要（Secondary）、非现阶段（Off-stage ）的参与者。</p><ul><li>主要参与者，实现目标的人。</li><li>次要参与者，服务提供者。</li><li>非现阶段参与者，有利益涉及但不直接的人。</li></ul><h3 id="3-HOW"><a href="#3-HOW" class="headerlink" title="3. HOW"></a>3. HOW</h3><p>　　第三个问题：How will they be impacted?</p><p>　　Actor将如何影响我们的目标？这里既包含促进目标实现的正面行为，也包含消除阻碍目标实现的负面行为。我们Actor的行为将如何改变？哪些行为最有可能帮助我们实现目标？这些问题的答案就是我们想创造出来的impact。</p><p>　　Note: 关注在Actor 对目标有帮助的那些impact上，而不是Actor能够做的所有事情。比如购买更多的产品，向其他人推荐该产品。Impact是Actor的活动，是业务活动而不是产品功能。理想情况下应展现Actor行为的变化，而不仅仅是行为本身。</p><h3 id="4-WHAT"><a href="#4-WHAT" class="headerlink" title="4. WHAT"></a>4. WHAT</h3><p>　　第四个问题：What will we do?</p><p>　　我们可以做什么来鼓励Actor帮我们实现Goal。这里关注的是可交付的产品或者是更加详细的解决办法。包括交付内容，软件功能以及组织的活动。</p><p>　　如果我们是开发技术产品或服务，那么“可交付成果”是系统和系统相关的功能。<br>　　如果我们是设计或者改进业务目标，那么“可交付成果”是一些小型实验，我们将尝试一些有助于我们解决问题的行为或方式。</p><h2 id="六、下一步"><a href="#六、下一步" class="headerlink" title="六、下一步"></a>六、下一步</h2><h3 id="1-优先级"><a href="#1-优先级" class="headerlink" title="1. 优先级"></a>1. 优先级</h3><p>　　当我们画出了Impact Mapping 之后，发现最后一步的Deliverables可能有很多，这时候我们需要进行优先级的划分。<br>优先级的划分，取决的是业务目标而不是产品功能，因此在Impact Mapping 上，我们可以找到该成果对应的Goal，从而列出优先级。</p><h3 id="2-Story"><a href="#2-Story" class="headerlink" title="2. Story"></a>2. Story</h3><p>　　优先级列出来之后，我们就可以对应建卡了。建卡的模板如下：</p><p align="center"><font color="#0099ff" size="3">As an <b>ACTOR</b> I want <b>ACTION</b>, so I get <b>VALUE.</b></font></p><h2 id="七、示例"><a href="#七、示例" class="headerlink" title="七、示例"></a>七、示例</h2><p>　　以一个在线零售商店为例：</p><ol><li><p>WHY<br>Goal: 增加在线商品的购买量。<br>Measure:</p><ul><li>WHAT: 接下来的三个月内，在线销售量翻倍</li><li>WHERE: 收入</li><li>CURRENT: $250,000</li><li>MIN: $375,000</li><li>MAX: $500,000</li></ul></li><li><p>WHO</p><ul><li>Primary: 顾客</li><li>Secondary: 营销人员、广告商，保证我们有稳定的顾客人流</li><li>Off-stage: 一些分析人员，通过分析来确定下一阶段的目标</li></ul></li><li><p>HOW</p><ul><li>顾客: 买更多的商品、买高质量的商品</li><li>营销人员: 吸引更多的新顾客和老顾客</li></ul></li><li><p>WHAT</p><ul><li>顾客购买了该产品也会购买其他产品</li><li>根据顾客的偏好设置进行推荐</li><li>排序高质量产品</li><li>目标网站进行数字广告</li><li>发送电子邮件通知新产品</li></ul></li></ol><p>　　汇总画处Impact Mapping 的图如下：<br>　　<img src="/imgs/impact-mapping-example.png" width="700" height="400"></p><ol start="5"><li>STORY<br>　　接下来就可以按照模板写story 了，比如：</li></ol><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">As a 顾客，</span><br><span class="line"><span class="literal">I</span> want the 在线零售商店具有一个功能：顾客购买了该产品之后也会购买其他产品</span><br><span class="line">so <span class="literal">I</span> can 购买更多的商品</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">As a 营销人员，</span><br><span class="line"><span class="literal">I</span> want 目标网站进行数字广告</span><br><span class="line">so <span class="literal">I</span> can 吸引更多的新顾客</span><br></pre></td></tr></table></figure><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>　　Impact Mapping 尝试用WHY WHO HOW WHAT四个问题，回答某人（WHO）可以用某种不同的方式（HOW），来实现某个目标（WHY）的方法（WHAT）。</p><p>　　Impact Mapping 不应该专属于某个职能，也不应该是某一时刻的静态规划。开发过程中，团队持续交付功能，获得反馈及其它信息输入，深化对产品的认知。随着认知的深化，Impact Mapping 不断地被修正、拓展。这一过程需要各个职能的共同参与，Impact Mapping 是管理人员、业务人员、开发和测试人员共享的完整图景。</p><p>　　对于业务人员，他们不再是简单的把需求列表扔给开发团队，并等着最后的结果。通过Impact Mapping，业务人员和开发人员一同完成从目标到产品功能的映射，明确其中的假设，并在迭代交付中验证这些假设，当假设被证明或否定后，应该对 Impact Mapping 做出调整，如继续加强或停止在某个方向上的投入，或调整投入的方式。</p><p>　　对于开发人员，他们的目标不再限定于交付功能，而是拓展至交付业务目标。开发者除了知道交付什么功能，也了解为谁开发，为什么要开发。这样就可以更加主动和创新地思考，有依据的做出决策和调整。</p><p>　　对于测试人员，除了参与上面的规划和验证活动外，测试的责任不再局限于检查产品是否符预定的功能，而是验证产品是否产生了预期的影响。如果没有对用户产生期望的影响，即便完美符合功能定义，也不是高质量的产品。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　在绘制 Impact Mapping 的时候，一定要确保参会人员有决策者（Decision Maker）参与，包括高级技术人员和业务人员，否则会因为缺乏合适的参与人员，导致问题导论很久都没有决定。此外，设置合理的timebox，同时确保每一步（WHY、WHO、HOW、WHAT）都有输出对应的清单，这样才能高效的产出合适的Impact Mapping。<br>　　个人认为影响地图的思维方法和逻辑结构是普遍适用的，因此可以应用到很多领域，不仅是战略目标、营销战略、商业分析，也适用于自身的事情，比如旅行，健身，减肥，教育，学习计划等。因为，这个方法是以实用出发，以价值为导向，以目标为导向，结果为导向，从而保持简洁的。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://modernux.se/docs/impactmapping/" target="_blank" rel="noopener">The Effect Backlog, by Martin Christensen</a></li><li><a href="https://www.impactmapping.org/book.html" target="_blank" rel="noopener">Impact Mapping: Making a big impact with software products and projects</a></li><li><a href="https://www.impactmapping.org/index.html" target="_blank" rel="noopener">Impact Mapping官网</a></li><li><a href="https://devopshub.cn/2016/02/24/impact-mapping-practise/" target="_blank" rel="noopener">Impact Mapping 影响地图 读书与演练心得</a></li><li><a href="http://www.infoq.com/cn/articles/value-in-product-development?utm_source=articles_about_influence_map&amp;utm_medium=link&amp;utm_campaign=influence_map" target="_blank" rel="noopener">解析精益产品开发（二）—— 产品开发中的价值</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　 Impact Mapping（影响地图）多用于分析产品愿景，分解用户故事，分析内部策略，创建和排序需求清单。本文主要从以下几个方面讲述 Impact Mapping：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解Impact Mapping&lt;/li&gt;
&lt;li&gt;结构&lt;/li&gt;
&lt;li&gt;如何使用&lt;/li&gt;
&lt;li&gt;下一步&lt;/li&gt;
&lt;li&gt;简单示例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>我的第一个IoT项目</title>
    <link href="http://yoursite.com/2018/06/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAIoT%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/06/25/我的第一个IoT项目/</id>
    <published>2018-06-25T07:12:00.000Z</published>
    <updated>2018-07-05T19:12:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>无关技术，无关客户，无关生活，记录而已。<br>诸多小点，诸多思绪，诸多体验，纯粹感受。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　刚开始听到要去一个 IoT 相关项目的时候，内心是激动的，也许是最近 IoT 大火的缘故，也许是至少能够运用大学相关知识的兴奋，也许是不在熟悉的领域体验不一样事物的新奇，也许可能只是终于上项目了…</p><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="关于客户"><a href="#关于客户" class="headerlink" title="关于客户"></a>关于客户</h4><p>　　Client 是世界顶尖的工业车辆(主要是物料搬运设备Material handling equipment）、仓储技术（Warehousing）以及物流技术（Logistics technology）的供应商之一。</p><p>产业： 内部物流（Intralogistics），机械工程（Mechanical engineering）<br>产品： 叉车（Forklift truck）</p><h4 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h4><p>　　项目的前两周，我一直在一张 Story Card 上 pair，以至于当有人问我的项目具体是干什么的，我惊讶的发现，我竟然无法概括。</p><p>　　而后才明确，我们项目的主要内容是构建一个IoT 系统和平台，其他组基于该平台开发相关应用，最终实现通过网络（Mobile Data 或者 WLAN）来连接设备（Forklift）和应用的目的。</p><h4 id="关于技术栈"><a href="#关于技术栈" class="headerlink" title="关于技术栈"></a>关于技术栈</h4><ul><li>语言<ul><li>C++</li><li>Java</li><li>Scala</li><li>Ruby</li><li>Lua</li></ul></li><li>框架<ul><li>Dropwizard</li></ul></li><li>持续集成工具<ul><li>GO CD</li><li>Docker</li><li>Terraform</li><li>AWS</li></ul></li><li>基础交付工具<ul><li>Jia 及其 Confluence</li></ul></li><li>构建工具<ul><li>CMake</li><li>Gradle</li></ul></li><li>其他第三方工具<ul><li>Consul</li><li>Vault</li></ul></li><li>内部沟通工具<ul><li>Riot</li><li>Outlook web 版</li></ul></li><li>涉及知识<ul><li>嵌入式</li><li>CAN</li><li>MQTT协议</li><li>FreeRTOS</li></ul></li><li>其他有用的链接<ul><li>GOCD 用来找sad 或者happy gif的网站：<a href="https://giphy.com/" target="_blank" rel="noopener">https://giphy.com/</a></li><li>C++编程标准：<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/2+Rules" target="_blank" rel="noopener">https://wiki.sei.cmu.edu/confluence/display/cplusplus/2+Rules</a></li><li>C++参考文档：<a href="https://en.cppreference.com/w/cpp" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp</a></li><li>ARM Developer: <a href="http://infocenter.arm.com/help/index.jsp" target="_blank" rel="noopener">http://infocenter.arm.com/help/index.jsp</a></li><li>Freertos手册: <a href="https://www.freertos.org/uxTaskGetStackHighWaterMark.html" target="_blank" rel="noopener">https://www.freertos.org/uxTaskGetStackHighWaterMark.html</a></li><li>CANopen solution: <a href="http://www.canopensolutions.com/" target="_blank" rel="noopener">http://www.canopensolutions.com/</a></li><li>CANopen byteme: <a href="http://www.byteme.org.uk/canopenparent/canopen/" target="_blank" rel="noopener">http://www.byteme.org.uk/canopenparent/canopen/</a></li><li>Managing Team Secrets Effectively: <a href="https://holderbaum.io/articles/SharedSecrets/" target="_blank" rel="noopener">https://holderbaum.io/articles/SharedSecrets/</a></li><li>Getting Started with GNU Privacy Guard: <a href="https://spin.atomicobject.com/2013/09/25/gpg-gnu-privacy-guard/" target="_blank" rel="noopener">https://spin.atomicobject.com/2013/09/25/gpg-gnu-privacy-guard/</a></li></ul></li></ul><h4 id="关于组织结构"><a href="#关于组织结构" class="headerlink" title="关于组织结构"></a>关于组织结构</h4><p>　　我们是在Digital Solutions (又叫 “Digital Factory”)的部门工作。<br>该 Account 下有好几个项目组，其中我们组最大，人员配备大致如下：</p><ul><li>来源比例上，由客户内部的7个人和 TW 的7个人组成；</li><li>角色分布上，一个 BA；一个 Devops，是 Tech lead；剩下的全部是 Devopler；没有 QA；</li><li>性别比例上，BA 是女生，而且她还是DP（Delivery Priciple），是 CST 的成员；Dev 只有我一个女生。</li><li>国籍分布上，有两个出差的英国人，有一个希腊人，我中国的 LTA，其余人都是德国人。</li><li>技术分布上，客户内部的都只 foucs 在C++的代码上；TW 的基本上都是从头学起 C++，但是有几个学的很不错的，有对 Scala 和 Ruby非常熟悉的，有对 Java 熟悉的人。</li></ul><h3 id="二、沟通"><a href="#二、沟通" class="headerlink" title="二、沟通"></a>二、沟通</h3><p>　　这里的很多人，平常都说德语，但是他们的英文也很好，随时切换成英文。大部分时候，只要有English speaking 的人在，他们都会选择用英文交流。</p><h3 id="三、文化"><a href="#三、文化" class="headerlink" title="三、文化"></a>三、文化</h3><p>　　在德国的第一个项目，感受有很多，不知道是所有德国项目的典型特征，还是只是这一个客户现场的氛围，总之，多记录多发现，以后回想起来才会知道当初经历的一切是必然还是偶然，</p><ul><li><p>咖啡文化<br>　　客户现场办公室的喝的，就是咖啡、气泡水、各种果茶包。<br>看到很多同事一天会喝4-5杯咖啡，早上来一杯，站会后一杯，中饭之后一杯，下午1-2杯。希望找你catch up 的时候，会提议一起喝杯咖啡，马上要开会的时候，带杯咖啡，总之，很多杯咖啡。<br>当然也有人会倒一大瓶气泡水，然后拿个杯子，慢慢倒着喝。</p></li><li><p>吃饭文化<br>　　大家吃饭都不会走很远，基本在同一栋楼里，下去买了就拿上来，通常是面包、pasta、沙拉、pizza，很少有人带。<br>　　拿到楼上之后，大家会一起坐着聊天(详见下面的聊天文化)，度过中午的时间，中午不会休息，吃饭就是休息了。<br>起初，不太好意思只跟中国同事坐在一起，觉得会显得太小群化，但是后来发现他们自己也小群化，比如内部员工经常坐在一起，其他一个国家的坐在一起（只是我们看不出来）。</p></li><li><p>聊天文化<br>　　一个字形容——“尬”。很多东西不太好聊，比如敏感的政治，敏感的私人生活，敏感的各种信息。<br>聊的最多的是天气、各种旅游、各种技术实践、各种工作相关、或者吃的东西或者 P3文化。尝试着问他们附近的好玩的地方，发现大部分不是本地人，他们也不知道（尴尬）。</p></li><li><p>博士文化<br>　　发现那些是博士的人，往往邮件上或者称呼上都会加上Dr.，而且大家对博士会显得特别尊重。</p></li><li><p>开会文化<br>　　时间上：本来以为德国，特别注重准时，但是我却个人感觉，他们注重的是准时结束会议，而不是准时开始会议。<br>比如10：00的会议，其实都是10：05分大家陆陆续续走过去，然后开始setup机器，然后时间就过去了，可能事情没有讨论完，那就定下一次会议。<br>想起来之前的开会，一定会提前几分钟去把环境setup 好，准时开始会议，避免浪费大家的时间，也许这个有待改进。<br>　　形式上：还是和之前遇到的差不多，比较随意，可以吃、喝东西，往往不会随意打断，一般先举手，如果多个人举手，则一个一个的说自己的观点。</p></li><li><p>工作文化<br>　　态度上，非常认真，工作期间，拿手机的次数很少，基本不会看手机、玩手机。<br>　　时间上，实事求是，午饭都不会花太久，break的时间也不会很久，一起工作起来有一种一整天全神贯注在工作的感受。每周填timecard 的时候，工作了7.5小时就填7.5小时，工作10小时就填10小时。<br>　　工作与生活上，以前听说他们下班了就下班了，不再管工作的事情。是的，他们工作生活分的很开，下班了确实不管工作的事情，但是他们也会写代码，是真心的喜欢写代码，会研究项目上可以改进的地方（不是工作的Story 卡）。此外，工作上的同事，很少看到他们约起来，成为很好的朋友。</p></li><li><p>Pair文化<br>　　之前的项目，虽然会Pair，但是不是所有的时候都Pair，更多的时候是遇到需要share knowledge 的时候或者需要帮助的时候再去Pair。<br>　　这个项目组，基本上一定会Pair，每天早上站会的时候都会问是否有人rotate pair，来确保知识的传递，此外由于没有QA，所以Pair 也是保证代码质量的途径了。<br>有一个现象，内部员工不太喜欢Pair，每次有人问“要Pair 吗”的时候，他们大概都会说“这个太boring 了”或者“这个快做完了”之类的话，或者他们会内部员工pair，Twer和Twer Pair。</p></li><li><p>Cake文化<br>　　经常有人放蛋糕在厨房，往往是自己的生日，自己就要负责提供蛋糕，或者一些纪念日之类的。这些蛋糕很多时候都是自己烘焙的，带到公司。后来发现他们也会买超市的速成的，然后重新加工一下。</p><img src="/imgs/team-cake1.png" width="300" height="250"><img src="/imgs/team-cake2.png" width="300" height="250"></li><li><p>喝酒文化<br>　　客户现场，并没有其他吃的喝的，一般都是私人的。但是，有活动的时候，各种鸡尾酒调起来；看世界杯的时候，各种啤酒喝起来；难得team building的时候，约在酒吧喝起来。<br>　　在TW内部，冰箱里放满了啤酒，平常随意喝都可以，去参加awayday 的时候，火车上买了一箱啤酒喝着。</p><img src="/imgs/team-drink.png" width="600" height="350"><p>上图是 TW 的照片，但是客户现场组织活动的时候，也差不多如上所示的各种酒水。</p></li></ul><h3 id="四、实践"><a href="#四、实践" class="headerlink" title="四、实践"></a>四、实践</h3><h4 id="1-On-boarding"><a href="#1-On-boarding" class="headerlink" title="1. On boarding"></a>1. On boarding</h4><h5 id="Team-内部"><a href="#Team-内部" class="headerlink" title="Team 内部"></a>Team 内部</h5><p>　　虽然在 Confluence 上，有一个 On boarding 的 Checklist，列举了新人需要的一些权限（e.g. PGP， Riot账号，GoCD账号，客户邮箱账号，WIFI 账号 ），但是始终觉得不够。</p><p>　　笔者个人觉得，如果还包含以下条目，就能更快的帮助新人快速了解项目：</p><ul><li>环境搭建，e.g.开发环境</li><li>关于team，e.g.Team 介绍与定义，Team 相关的Concept，Jira 链接、GoCD链接、代码库链接等</li><li>Assert，项目Assert相关的架构图，能够帮助了解整个项目技术相关的东西</li><li>技术栈List，如同上文我列出的技术栈一样，包含语言、工具、理论等，这个可以参考TW 技术雷达。</li></ul><h5 id="TW总结的Account的On-boarding"><a href="#TW总结的Account的On-boarding" class="headerlink" title="TW总结的Account的On boarding"></a>TW总结的Account的On boarding</h5><p>　　该On boarding Slide是我加入了大概一个多月之后，才创建的，主要是 High level 的帮你了解客户。里面包括：</p><ul><li>客户的介绍</li><li>客户组织架构及 CST团队的介绍</li><li>TW各个团队的介绍</li><li>Timecard 的填写</li><li>交通及差旅</li><li>TW内部群组，邮件组，Google drive组</li></ul><h4 id="2-活动"><a href="#2-活动" class="headerlink" title="2. 活动"></a>2. 活动</h4><ul><li><p>Team Huddle<br>　　这个在之前的一篇文章<a href="http://zhangyuyu.github.io/2018/05/27/Team-Event/#more" target="_blank" rel="noopener">Team Huddle</a>有详细的介绍，主要是对日常Team的相关Event进行总结，里面包含基本上所有相关的活动。</p></li><li><p>Team Outing<br>　　就是我们常说的 Team building，不一样的是这样的Team building是包含客户的人和我们 TW 的人。一般情况下，会采用<a href="https://doodle.com/" target="_blank" rel="noopener">doodle</a>这个工具进行投票选择时间。</p></li></ul><p>　　我在 Team 的这段时间，有过一次 Outing，但是这次是去酒吧喝酒，作为唯一一个女生，大晚上跑到红灯区喝酒，我犹豫了，最后没去。这边人更喜欢的酒吧，不是那种灯红酒绿的酒吧，而是带有古典气息或者文化气息的酒馆，纯粹喝酒聊天。</p><ul><li>Hacknight<br>　　带着好奇，和想融入客户的想法报名参加了这个所谓的Hacknight。我们主要是玩的fischertechnik，用他们给我解释的话说，就是一种Technical 的乐高。<img src="/imgs/team-hacknight1.png" width="400" height="250"><img src="/imgs/team-hacknight2.png" width="400" height="250"></li></ul><p>附上往期的视频，<a href="https://youtu.be/vRFGdXRym8w" target="_blank" rel="noopener">https://youtu.be/vRFGdXRym8w</a></p><ul><li>Barbeque<br>　　这边的烤肉闻名遐迩，有幸跟着整个Account和客户们一起参与了BBQ。主要食物是：香肠、面包、芝士、番茄酱、烤肉酱、各种酒。大口吃肉才是这边的风格，他们并不烤素菜，素菜是用来拌沙拉的。<img src="/imgs/team-bbq1.png" width="400" height="250"><img src="/imgs/team-bbq2.png" width="250" height="300"></li></ul><h4 id="3-物理环境与硬件"><a href="#3-物理环境与硬件" class="headerlink" title="3. 物理环境与硬件"></a>3. 物理环境与硬件</h4><ul><li>办公区域<img src="/imgs/team-office.png" width="300" height="150"></li></ul><p>　　左边的A区域是一个大厨房，右边的B区域是工作区域，中间的部分是一些会议室。<br>大厨房：大家中午吃饭一般都是带上来在大厨房坐着吃，此外，Weekly全体会议，各种其他活动（比如烧烤、世界杯、HackNight）。<br>　　工作区域：各个项目组都在这边，划分了组的开放区域，每个组都有对应的墙可以setup 物理story 墙。<br>　　中间区域：这里有一个小厨房，放了咖啡机，小冰箱。此外，很多小组的定期 review 也会在这个开放区域进行，方便大家随时加入。</p><ul><li><p>办公桌<br>　　最喜欢的莫过于这个办公桌了，可以升降，想站着办公的时候，就升起桌子，不用自己额外买小桌子或者把电脑垫的高高的。<br><img src="/imgs/team-adjustable-table.png" width="400" height="300">img</p></li><li><p>编程设备（显示屏、鼠标、键盘）<br>　　对于一个以pair为主的 team 来说，鼠标和键盘显然不够，虽然retro 上提过好几次，但是我离开这个组的时候，还是只有一个Apple的鼠标和键盘。<br>德语的键盘倒是有几个，但是我和几个其他国家的人不太适应。<br>显示屏，倒是每个桌子都有一个，只要pair，都会接显示屏。想起以前一个人两个屏幕的时候了，一个显示屏写代码， 一个显示屏放terminal 的输出等。</p></li><li><p>调试模块<br>　　起初的时候，各个模块都散放着，大家各取所需，比如radio module，relay module，peakcan，uart，jlink，power 等，但是有一段时间，每对pair 都需要硬件进行调试，这就需要所有的模块都能组成一整套环境。<br>于是，后来大家就把一整套环境所需要的模块组装起来放在一个盒子里，每次要用的时候都拿一整个盒子，不能随意拆卸，保证每套环境的模块完整性。</p></li><li><p>Frank<br>　　前面的调试模块是我们开发的平台，但是并没有和真实的物理设备关联。为了模拟IoT 的测试，我们需要真实的传感器，传送信号。于是，为了让开发们最快的测试自己的功能，模块连接了一些传感器，比如Shock Sensor、Crash Sensor、Card Reader、Corporate Display 等等，组装好之后，我们给其取了一个名字Frank。<br>Frank是几个组share 的，只有一个，大家平常用的时候，都是事先准备好自己的调试模块，然后再去连接Frank。   </p></li><li><p>Forklift<br>　　有了Frank 的测试，还是不是很够，比如 Forklift 是否能够正常驾驶，是否能够正常举起货物，不会突然停在路上。于是在客户的basement 有一个专门用来测试的Forklift，偶尔会下楼测试一些功能。<br>只下楼过一次，进行测试，还是看着内部员工操作，没有自己试过。</p></li><li><p>Factory<br>　　上线之前， 几个内部员工会带着最近做的story，去Forklift factory，那里有更多的车可供测试。（笔者从来没有去过）</p></li></ul><h4 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h4><ul><li><p>技术文档</p><ul><li>代码相关，很多是直接放在了各个代码库的README里面，有如何运行应用的各种说明；</li><li>硬件相关，放在了Confluence 里面，包含了很多硬件配置文档，比如Prodrive文档；</li><li>软件相关，也是放在了Conflence 里面，主要是第三方软件的说明文档；</li></ul></li><li><p>帮助文档，比如《如何使用DGB 进行对hardfault 的调试》、《如何发送CAN Frame》等等；</p></li><li>硬件购买，比如ARM JTAG、UART、RALY 的相关型号及其链接</li><li>业务文档，比如Process（e.g.Definition of Done、Team Huddle、Sprint 等）</li></ul><p>还有一些缺失的，或者是正在建立/改进的文档：</p><ul><li>GuideLine，比如C++ Style Guide</li><li>ADR（Architecture Decision Records）</li><li>Concepts，对 team 涉及到相关的概念的说明，比如Agent、Behaviour</li><li>Retro记录</li><li>Show &amp; Tell 记录</li><li>一些过程文档，比如Release的checklist、创建一个新的service的checklist</li><li>一些Template的整理归纳，比如globus-service-template、aws-template 等等</li></ul><h3 id="五、落幕"><a href="#五、落幕" class="headerlink" title="五、落幕"></a>五、落幕</h3><p>　　当第一时间知道要离开的时候，内心是欣喜的，而后却非常沮丧。欣喜的是，终于可以离开自己并不是很适应的组，沮丧的是因为为什么离开。对于离开的原因，纠结了很久；对于是否留下来在另外的小组，也纠结了很久。最终还是决定离开这个组，去体验其他不一样的风格。</p><p>　　周五是我最后在项目的最后一天，想象中，站会时候跟大家交代一下今天的任务并且及时handover 出去；大家中午一起吃个饭，或者拍个照留念一下；下班会早点走，跟大家say goodbye。</p><p>　　现实是，周五有几个同事请假了，站会人很少，承诺自己尽量把手上的这张story 做完；吃饭和往常一样，大家各自小组的去吃饭；下班的时候，一直留到最后，送走一个一个同事，跟他们一个个说goodbye，然后继续尝试努力把手头的工作做完。</p><p>　　听着他们每个人一样的台词“It’s my pleasure to work with you”，看着金数据“Feedback for Yu”里的空空如也，心情复杂不已。相遇便注定了离别，也许在他们的眼里，这个中国女孩不过是一瞬，可是我却莫名的有种不舍，叹一口气，也许是文化不同而已吧。</p><h3 id="六、思考"><a href="#六、思考" class="headerlink" title="六、思考"></a>六、思考</h3><p>　　本来这个部分应该包含一些反思和未来，本来应该是积极向上的总结与展望，但是想那么多，还是要做的不是么？于是，重新给自己建了一个trello 墙，列一些具体的可做的，Record &amp; Track。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　虽然我很想在一个项目上待的时间略长，等待稍有积淀，稍有输出，稍有总结的时候。但是作为一个 LTA，只有一年的时间，更多的时候，我不想以偏概全，多多体验不一样的项目，不一样的客户，不一样的文化，才能站的更高，视野更广，才不足以局限于自己狭窄的看法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无关技术，无关客户，无关生活，记录而已。&lt;br&gt;诸多小点，诸多思绪，诸多体验，纯粹感受。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Team" scheme="http://yoursite.com/tags/Team/"/>
    
  </entry>
  
  <entry>
    <title>CMake初识</title>
    <link href="http://yoursite.com/2018/06/24/%E8%AE%A4%E8%AF%86Cmake/"/>
    <id>http://yoursite.com/2018/06/24/认识Cmake/</id>
    <published>2018-06-24T12:34:14.000Z</published>
    <updated>2018-07-05T19:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文的主要观点、代码片段、图片均源自《The Hitchhiker’s Guide to the CMake》教程的Overview 章节。</p></blockquote><p>主要包含以下方面：</p><ul><li>认识 CMake</li><li>CMake可以做什么？</li><li>CMake 的特点</li><li>CMake 的 Workflow</li><li>CMake 的组成？</li><li>make 与 ninja</li></ul><a id="more"></a><h3 id="一、认识-Cmake"><a href="#一、认识-Cmake" class="headerlink" title="一、认识 Cmake"></a>一、认识 Cmake</h3><p>　　CMake，是<code>Cross Platform Make</code>的缩写，是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。</p><p>　　CMake 自己本身并不是构建工具（build tool），它不直接建构出最终的软件。它的职责是从抽象配置代码生成原生构建工具（native build tool）文件。</p><blockquote><p>原生构建工具比如：</p><ul><li>Xcode</li><li>Visual Studio</li><li>Ninja</li><li>Make</li></ul></blockquote><p>　　CMake使用指定名为<code>CMakeLists.txt</code>的配置文件可以控制软件的构建、测试和打包等流程。同时，通过编写平台无关的<code>CMakeLists.txt</code>文件和需要简单的配置，CMake就能生成对应目标平台的构建文件，例如：类Unix系统的<code>makefile</code>文件、Windows的<code>Visual Studio</code>工程或者Mac的<code>Xcode</code>工程，大大简化了跨平台和交叉编译方面的工作。</p><h3 id="二、Cmake可以做什么？"><a href="#二、Cmake可以做什么？" class="headerlink" title="二、Cmake可以做什么？"></a>二、Cmake可以做什么？</h3><h4 id="1-跨平台开发"><a href="#1-跨平台开发" class="headerlink" title="1. 跨平台开发"></a>1. 跨平台开发</h4><p>　　假设你有C++的跨平台项目，其代码在不同的平台/IDE共享。比如，Windows的<code>Visual Studio</code>、 OSX的<code>XCode</code>和 Linux 的<code>Makefile</code>：<br><img src="/imgs/cmake-native-build.png" width="500" height="250"></p><p>　　如果要添加一个<code>bar.cpp</code>源文件，你会怎么做？你不得不将该文件添加到你所使用的每个工具中：<br><img src="/imgs/cmake-native-build-add.png" width="500" height="250"></p><p>　　为了保证环境的一致性，你不得不将类似的更新操作好几次。更重要的是，你还得手动进行操作（如下图红色的箭头）。当然这种方式很容易出错，而且很不灵活。</p><p>　　CMake 通过在开发过程中增加额外的步骤来解决这一设计缺陷。你可以在<code>CMakeList.txt</code>文件中描述项目，并使用 CMake 通过跨平台的 CMake 代码来生成你感兴趣的构建工具。<br><img src="/imgs/cmake-generate-native-files.png" width="500" height="250"></p><p>　　同样地，当要添加<code>bar.cpp</code>源文件的时候，就只需要一个步骤了：<br><img src="/imgs/cmake-generate-native-files-add.png" width="500" height="250"></p><p>　　注意，上述图表的底部并没有发生变化，你仍然可以使用你喜欢的工具，比如<code>Visual Studio/msbuild</code>, <code>Xcode/xcodebuild</code> 和 <code>Makefile/make</code>。</p><h4 id="2-VCS-友好"><a href="#2-VCS-友好" class="headerlink" title="2. VCS 友好"></a>2. VCS 友好</h4><p>　　当你在团队工作时候，你可能想共享、保存更改的历史记录，这就是通常版本控制（VCS）做的事情。在实践中，对于IDE 的文件（比如*.sln ）该怎么存储呢？<br>下面是将<code>bar.cpp</code>文件加入到<code>Visual Studio</code>解决方案之后，可执行文件的差异：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--- /overview/snippets/foo-old.sln</span><br><span class="line">+++ /overview/snippets/foo-new.sln</span><br><span class="line">@@ <span class="number">-4</span>,<span class="number">6</span> +<span class="number">4</span>,<span class="number">8</span> @@</span><br><span class="line"> VisualStudioVersion = <span class="number">14.0</span><span class="number">.25123</span><span class="number">.0</span></span><br><span class="line"> MinimumVisualStudioVersion = <span class="number">10.0</span><span class="number">.40219</span><span class="number">.1</span></span><br><span class="line"> Project(<span class="string">"&#123;8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942&#125;"</span>) = <span class="string">"foo"</span>, <span class="string">"foo.vcxproj"</span>, <span class="string">"&#123;C8F8C325-ACF3-460E-81DF-8515C72B334A&#125;"</span></span><br><span class="line">+EndProject</span><br><span class="line">+Project(<span class="string">"&#123;8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942&#125;"</span>) = <span class="string">"bar"</span>, <span class="string">"..\bar\bar.vcxproj"</span>, <span class="string">"&#123;D14B78EA-1ADA-487F-B1ED-42C2B919C000&#125;"</span></span><br><span class="line"> EndProject</span><br><span class="line"> Global</span><br><span class="line">    GlobalSection(SolutionConfigurationPlatforms) = preSolution</span><br><span class="line">@@ <span class="number">-21</span>,<span class="number">6</span> +<span class="number">23</span>,<span class="number">14</span> @@</span><br><span class="line">        &#123;C8F8C325-ACF3<span class="number">-460E-81</span>DF<span class="number">-8515</span>C72B334A&#125;.Release|x64.Build<span class="number">.0</span> = Release|x64</span><br><span class="line">        &#123;C8F8C325-ACF3<span class="number">-460E-81</span>DF<span class="number">-8515</span>C72B334A&#125;.Release|x86.ActiveCfg = Release|Win32</span><br><span class="line">        &#123;C8F8C325-ACF3<span class="number">-460E-81</span>DF<span class="number">-8515</span>C72B334A&#125;.Release|x86.Build<span class="number">.0</span> = Release|Win32</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Debug|x64.ActiveCfg = Debug|x64</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Debug|x64.Build<span class="number">.0</span> = Debug|x64</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Debug|x86.ActiveCfg = Debug|Win32</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Debug|x86.Build<span class="number">.0</span> = Debug|Win32</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Release|x64.ActiveCfg = Release|x64</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Release|x64.Build<span class="number">.0</span> = Release|x64</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Release|x86.ActiveCfg = Release|Win32</span><br><span class="line">+       &#123;D14B78EA<span class="number">-1</span>ADA<span class="number">-487</span>F-B1ED<span class="number">-42</span>C2B919C000&#125;.Release|x86.Build<span class="number">.0</span> = Release|Win32</span><br><span class="line">    EndGlobalSection</span><br><span class="line">    GlobalSection(SolutionProperties) = preSolution</span><br><span class="line">        HideSolutionNode = <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p>　　同时还增加了一个<code>bar.vcxproj</code>文件，大概有150行代码，此处省略该代码。当使用<code>Xcode</code>的时候，类似地，在<code>.pbxproj</code>文件也有很多更改。</p><p>　　我们只是简单的添加了一个源文件，就有上述如此多的改动，于是你不禁会问几个问题：</p><ul><li>你确定所有 XML 代码是有意添加的，而不是不小心点击造成的？</li><li>你确定所有这些<code>x86/x64/Win32</code>，<code>Debug/Release</code>配置是以正确的顺序连接到一起，并且你没有破坏一些东西吗？</li><li>你确定上面所有的magic number 不是在你执行重要脚本之后从你的环境变量中读取的，或者事实上是一些密钥、令牌或者密码？</li><li>你认为这个文件的冲突很容易解决吗？</li></ul><p>　　幸运地是，我们有 CMake，它可以以一种整洁的方式帮助我们。我们还没涉及任何 CMake 的语法，但是我很确定你能一眼看出改变是什么：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- /overview/snippets/CMakeLists-old.txt</span></span><br><span class="line"><span class="comment">+++ /overview/snippets/CMakeLists-new.txt</span></span><br><span class="line"><span class="meta">@@ -2,3 +2,4 @@</span></span><br><span class="line"> project(foo)</span><br><span class="line"> </span><br><span class="line"> add_executable(foo foo.cpp)</span><br><span class="line"><span class="addition">+add_executable(bar bar.cpp)</span></span><br></pre></td></tr></table></figure><h4 id="3-试验"><a href="#3-试验" class="headerlink" title="3. 试验"></a>3. 试验</h4><p>　　即使你的团队开始并没有计划使用一些原生工具，但是将来可能会发生变化。比如，你之前在使用<code>Makefile</code>，现在想尝试<code>Ninja</code>。你会怎么办？手动转换？找到转换工具？从头开始写一个转换工具？还是从头开始写<code>Ninja</code>的配置？使用 CMake，你可以将<code>cmake -G &#39;Unix Makefiles</code>改成<code>cmake -G Ninja</code>，完成！</p><p>　　这也有助于新 IDE 的开发人员。当开发人员决定使用你的<code>SuperDuperIDE</code>而不是他们最喜欢的 IDE时候，他们可能编写了无数的<code>SuperDuperIDE &lt;-&gt; Xcode</code>, <code>SuperDuperIDE &lt;-&gt; Visual Studio</code>等转换器，相比于让你的IDE用户陷入该境地，你所需要做的就是将一个新的生成器<code>-G SuperDuperIDE</code>添加到 CMake 即可。</p><h4 id="4-工具包"><a href="#4-工具包" class="headerlink" title="4. 工具包"></a>4. 工具包</h4><p>　　Cmake 是一个工具包（Family of tools），可以在开发者的所有阶段（<code>sources for developers</code> -&gt; <code>quality control</code> -&gt; <code>installers for users</code>）提供帮助。下面的行为图展示了<code>CMake</code>、<code>CTest</code>和<code>CPack</code>的连接。</p><img src="/imgs/cmake-native-build-add.png" width="600" height="800"><h3 id="三、CMake的特点"><a href="#三、CMake的特点" class="headerlink" title="三、CMake的特点"></a>三、CMake的特点</h3><p>　　通过上述 CMake 可以做什么的理解，可以总结CMake的特点如下：</p><ul><li>人类可读的配置</li><li>兼容所有工具的单一配置</li><li>跨平台跨工具的友好开发</li><li>不强制改变你最喜欢的构建工具/IDE</li><li>VCS 友好的开发</li><li>简单的试验</li><li>轻松开发新的 IDE</li></ul><h3 id="四、CMake的-Workflow"><a href="#四、CMake的-Workflow" class="headerlink" title="四、CMake的 Workflow"></a>四、CMake的 Workflow</h3><h4 id="1-从-Hello-World-说起"><a href="#1-从-Hello-World-说起" class="headerlink" title="1. 从 Hello World 说起"></a>1. 从 Hello World 说起</h4><p>　　先引入一个<code>Hello World</code>，对应 CMake 的 Workflow。编写 CMakeList.txt 文件如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">project</span>(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(foo foo.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">"Processing CMakeLists.txt"</span>)</span><br></pre></td></tr></table></figure><p>执行<code>cmake -H. -B_builds</code>命令：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -H. -B_builds</span><br><span class="line">-<span class="ruby">- The C compiler identification is GNU <span class="number">4.8</span>.<span class="number">4</span></span></span><br><span class="line"><span class="ruby">-- The CXX compiler identification is GNU <span class="number">4.8</span>.<span class="number">4</span></span></span><br><span class="line"><span class="ruby">-- Check <span class="keyword">for</span> working C <span class="symbol">compiler:</span> /usr/bin/cc</span></span><br><span class="line"><span class="ruby">-- Check <span class="keyword">for</span> working C <span class="symbol">compiler:</span> /usr/bin/cc -- works</span></span><br><span class="line"><span class="ruby">-- Detecting C compiler ABI info</span></span><br><span class="line"><span class="ruby">-- Detecting C compiler ABI info - done</span></span><br><span class="line"><span class="ruby">-- Detecting C compile features</span></span><br><span class="line"><span class="ruby">-- Detecting C compile features - done</span></span><br><span class="line"><span class="ruby">-- Check <span class="keyword">for</span> working CXX <span class="symbol">compiler:</span> /usr/bin/c++</span></span><br><span class="line"><span class="ruby">-- Check <span class="keyword">for</span> working CXX <span class="symbol">compiler:</span> /usr/bin/c++ -- works</span></span><br><span class="line"><span class="ruby">-- Detecting CXX compiler ABI info</span></span><br><span class="line"><span class="ruby">-- Detecting CXX compiler ABI info - done</span></span><br><span class="line"><span class="ruby">-- Detecting CXX compile features</span></span><br><span class="line"><span class="ruby">-- Detecting CXX compile features - done</span></span><br><span class="line"><span class="ruby">Processing CMakeLists.txt</span></span><br><span class="line"><span class="ruby">-- Configuring done</span></span><br><span class="line"><span class="ruby">-- Generating done</span></span><br><span class="line"><span class="ruby">-- Build files have been written <span class="symbol">to:</span> /.../minimal-with-message/_builds</span></span><br></pre></td></tr></table></figure><p>　　可以看到上面命令行输出有几个关键字<code>Processing</code>，<code>Configuring</code>，<code>Generating</code>，<code>Build</code>，这便是 CMake 的执行过程了。</p><h4 id="2-Workflow"><a href="#2-Workflow" class="headerlink" title="2. Workflow"></a>2. Workflow</h4><img src="/imgs/cmake-workflow.png" width="500" height="800"><p>　　从上图中，可看出每一步的输出，<code>Configurting</code>阶段生成了<code>CMakeCache.txt</code>文件，<code>generating</code>阶段生成了构建文件（比如<code>Makefile</code>），而后，在<code>Build</code>阶段构建工具则可根据构建文件，生成二进制文件。</p><h4 id="3-外部构建和内部构建"><a href="#3-外部构建和内部构建" class="headerlink" title="3. 外部构建和内部构建"></a>3. 外部构建和内部构建</h4><ul><li><p>外部构建<br>　　注意上述的命令指定了<code>-B_builds</code>，生成的文件全部都在<code>_builds</code>下。<code>out-of-source build</code>，分离了源文件和生成的二进制文件，也是比较推荐的做法。</p></li><li><p>内部构建<br>　　<code>in-source build</code>，如果不指定输出目录，默认情况下会将生成的文件防到和源文件目录下，如果有多个子模块，则每个子模块的二进制文件都在自己的子模块下，和源文件一起。</p></li></ul><p>Note:<br>　　外部构建不仅仅是指定<code>-B_builds</code>，同时记得要将任何自动生成的文件放到<code>_builds</code>里面。比如，C++模板文件<code>myproject.h.in</code>，该文件用于生成<code>myproject.h</code>，因此记得要将<code>myproject.h.in</code>放至源文件下，而将<code>myproject.h</code>放至二进制文件下。</p><h3 id="五、一些概念"><a href="#五、一些概念" class="headerlink" title="五、一些概念"></a>五、一些概念</h3><p>　　在了解 CMake 之前，我经常听到<code>make</code> ，<code>ninja</code>，<code>makefile</code>,<code>CMakeList.txt</code>，<code>CMake</code>，<code>CMakeCache.txt</code>这些词，下面统一说明一下：</p><p>　　<code>CMakeList.txt</code>是一个列表文件，它是当前源目录的入口。<code>CMake</code>会从源代码树的顶层<code>CMamkeList.txt</code>文件读起，并继续读取通过<code>add_subdirectory</code>指令添加的其他子依赖的<code>CMamkeList.txt</code>文件。</p><p>　　为了优化，存在有一种特殊的变量，它的生命周期不限于一个CMake运行（可能含有子模块）。该变量保存在<code>CMakeCache.txt</code>文件中，并保存在项目构建树的多个运行中。</p><ol><li>CMake生成器<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cmake --help</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Generators</span><br><span class="line">  Unix Makefiles               = Generates standard UNIX makefiles.</span><br><span class="line">  Ninja                        = Generates build.ninja files.</span><br><span class="line">  Xcode                        = Generate Xcode project files.</span><br><span class="line">  CodeBlocks - Ninja           = Generates CodeBlocks project files.</span><br><span class="line">  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.</span><br><span class="line">  CodeLite - Ninja             = Generates CodeLite project files.</span><br><span class="line">  CodeLite - Unix Makefiles    = Generates CodeLite project files.</span><br><span class="line">  Sublime Text <span class="number">2</span> - Ninja       = Generates Sublime Text <span class="number">2</span> project files.</span><br><span class="line">  Sublime Text <span class="number">2</span> - Unix Makefiles</span><br><span class="line">                               = Generates Sublime Text <span class="number">2</span> project files.</span><br><span class="line">  Kate - Ninja                 = Generates Kate project files.</span><br><span class="line">  Kate - Unix Makefiles        = Generates Kate project files.</span><br><span class="line">  Eclipse CDT4 - Ninja         = Generates Eclipse CDT <span class="number">4.0</span> project files.</span><br><span class="line">  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT <span class="number">4.0</span> project files.</span><br><span class="line">  KDevelop3                    = Generates KDevelop <span class="number">3</span> project files.</span><br><span class="line">  KDevelop3 - Unix Makefiles   = Generates KDevelop <span class="number">3</span> project files.</span><br></pre></td></tr></table></figure></li></ol><p>　　可以看到，最上面的三个分别是<code>Unix Makefiles</code>、<code>ninja</code>和<code>Xcode</code>。</p><ul><li>当生成器选择的是<code>Unix Makefiles</code>时候，CMake会生成<code>Makefile</code>文件，<code>make</code> 是与 <code>Makefile</code> 对应的，<code>make</code>读取<code>Makefile</code>文件，根据源代码自动生成可执行的程序或者库。</li><li>当生成器选择的是<code>ninjas</code>时候，CMake会生成<code>build.ninja</code>文件，<code>ninja</code>是与<code>build.ninja</code>对应的，<code>ninjia</code>读取<code>build.ninja</code>文件里的构建规则进行构建。</li></ul><ol start="2"><li>编译器</li></ol><p>　　原生构建工具只会编排我们的构建，我们还需要有编译器才能从我们的C++源中生成二进制文件。</p><ul><li>Visual Studio<br>　　<code>Visual Studio</code>的编译器compiler (也就是cl.exe)伴随着 IDE 一起被安装，无其他额外操作。</li><li>Ubuntu GCC<br>　　<code>gcc</code>编译器通常是<code>Linux OS</code>上使用的</li><li>OSX Clang<br>　　<code>Clang</code>编译器通常伴随着<code>Xcode</code>一起安装的，或者是在安装<code>make</code>的时候被安装。</li></ul><ol start="3"><li>生成原生构建工具文件</li></ol><p>　　我们可以使用 GUI 或者 CMake的命令行版本生成原生文件：</p><ul><li>GUI: Visual Studio</li><li>GUI: Xcode</li><li>GUI: cmake-gui</li><li>CLI: Visual Studio<br>　　<code>cmake -H. -B_builds -G &quot;Visual Studio 14 2015 Win64&quot;</code></li><li>CLI: Xcode<br>　　<code>cmake -H. -B_builds -GXcode</code></li><li>CLI: Cake<br>　　<code>cmake -H. -B_builds -G &quot;Unix Makefiles&quot;</code></li></ul><p>Note:</p><ul><li><code>-H</code>, <code>-H&lt;path-to-source-tree&gt;</code>，无空格，必须和<code>-B</code>一起使用，该路径会被存在变量<code>CMAKE_SOURCE_DIR</code>里</li><li><code>-B</code> , <code>-B&lt;path-to-binary-tree&gt;</code>，无空格，必须和<code>-H</code>一起使用，该路径会被存在变量<code>CMAKE_BINARY_DIR</code>里</li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　本篇文章不在于教你如何使用 CMake，CMake 是一个工具，相应的教程，手册可以很容易找到。因此，本文主要在于理解 CMake 的特点及其 workflow，这对于之后使用 CMake 的时候很有帮助。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://cgold.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">CGold: The Hitchhiker’s Guide to the CMake</a></li><li><a href="https://cmake.org/cmake-tutorial/" target="_blank" rel="noopener">Cmake 官网教程</a></li><li><a href="http://devdocs.io/cmake~3.6/manual/cmake-buildsystem.7#introduction" target="_blank" rel="noopener">Cmake 参考手册 - devdocs.io</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文的主要观点、代码片段、图片均源自《The Hitchhiker’s Guide to the CMake》教程的Overview 章节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要包含以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认识 CMake&lt;/li&gt;
&lt;li&gt;CMake可以做什么？&lt;/li&gt;
&lt;li&gt;CMake 的特点&lt;/li&gt;
&lt;li&gt;CMake 的 Workflow&lt;/li&gt;
&lt;li&gt;CMake 的组成？&lt;/li&gt;
&lt;li&gt;make 与 ninja&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://yoursite.com/categories/Tool/"/>
    
    
      <category term="CMake" scheme="http://yoursite.com/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>Test Double</title>
    <link href="http://yoursite.com/2018/06/24/Test-Double/"/>
    <id>http://yoursite.com/2018/06/24/Test-Double/</id>
    <published>2018-06-24T05:42:53.000Z</published>
    <updated>2018-06-24T12:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文的主要观点、代码片段、图片均源自《Test Double – xUnit Test Patterns》书的<em>Test Double</em>章节</p></blockquote><p>　　很多时候，在执行单元测试时，待测对象依赖于其他模块，我们经常听到的有 Mock、Stub、Fake、Spy之类的词。xUnit Test Patterns一书中对此进行了统称<code>Test Double</code>，并清晰的说明了各个术语的区别与应用场景。下面主要从以下几个方面进行阐述：</p><ul><li>Four-Phase Test</li><li>理解Test Double</li><li>Test Double的分类</li><li>实现方式</li><li>对比总结</li></ul><a id="more"></a><h3 id="一、Four-Phase-Test"><a href="#一、Four-Phase-Test" class="headerlink" title="一、Four-Phase Test"></a>一、Four-Phase Test</h3><p>　　在开始步入正题 Test Double 之前，我们先大致看一下测试的 Four Phrase，以便我们可以on same page，不至于因为术语不同产生歧义。</p><p>　　<img src="/imgs/test-double-four-phase-test.png" width="500" height="250"></p><ul><li>第一阶段，可以理解为做<code>GIVEN</code>，做一些准备工作，其中可以包括创建test fixture以及设置 expectation。</li><li>第二阶段，可以理解为<code>WHEN</code>，即和 SUT 进行交互。</li><li>第三阶段，可以理解为<code>TEHN</code>，判断是否获取到了期望的输出或者行为。</li><li>第四阶段，做一些善后和清理操作，将系统还原成初始的样子。</li></ul><h3 id="二、理解Test-Double"><a href="#二、理解Test-Double" class="headerlink" title="二、理解Test Double"></a>二、理解Test Double</h3><p>　　有时候，测试被测系统（System under test, SUT）非常困难，因为它依赖于其他组件，而这些组件在测试环境中无法使用。这可能是因为这些组件不可用，亦或者是执行它们会产生副作用。在其他情况下，我们的测试策略要求我们对SUT的内部行为有更多的控制权或可见性。</p><p>　　<img src="/imgs/test-double-for-sut.png" width="400" height="200"></p><p>　　在编写测试时候，我们不能（或者不选择）使用一个真正的依赖组件（ Depended-On Component，DOC），我们会用 Test Double代替它。Test Double 不用有像真正的 DOC 一样的行为，只需要提供和真实的 API 相同的 API即可，这样SUT可以认为该 Test Double 就是真正的 API。</p><h4 id="1-WHAT"><a href="#1-WHAT" class="headerlink" title="1. WHAT"></a>1. WHAT</h4><blockquote class="blockquote-center"><p>　　在计算机编程和计算机科学中，程序员和开发人员使用称为自动化单元测试的技术来提高软件的质量。 通常情况下，最终版本软件由一组复杂的对象或过程相互作用组成以创建最终结果。 在自动化单元测试中，可能有必要使用外观和行为与其发布相对应的对象或过程，但实际上用的却是简化版本的对象和过程，以降低复杂性并促进测试。Test Double是这些对象或过程的通用术语。</p></blockquote><p>　　一句话介绍的话， Test Double是一个通用术语，用于在任何情况下，为了测试目的而替换生产对象。</p><h4 id="2-WHY"><a href="#2-WHY" class="headerlink" title="2. WHY"></a>2. WHY</h4><ul><li>减少对被测对象的依赖，使得测试更加单一</li><li>让测试案例执行的时间更短，运行更加稳定</li><li>对SUT（待测系统）内部的输入输出进行验证，让测试更加彻底深入</li></ul><h3 id="三、Test-Double的分类"><a href="#三、Test-Double的分类" class="headerlink" title="三、Test Double的分类"></a>三、Test Double的分类</h3><p>　　Test Double可以进一步细化为以下5种：</p><ul><li>Test Stub，桩,在测试中为每个调用提供一个封装好的响应，通常不会对测试之外的请求进行响应，只用于测试。</li><li>Test Spy，是一种记录一些关于它们如何被调用的信息的桩。这种形式的桩可能是记录它发出去了多少个消息的一个电子邮件服务。</li><li>Mock Object，模拟对象，是一种在编程时就设定了它预期要接收到调用。如果收到了为预期的调用，它会抛出异常，并且还会在验证时被检查是否收到了它们所预期的所有调用。</li><li>Fake Object，假对象，可以真正使用的实现，通常利用一些捷径，不适合在生产环境中使用，比如内存数据库（InMemoryTestDatabase）。</li><li>Dummy Object，哑对象，是指那些被传递但不被真正使用的对象。通常用于添充参数列表。</li></ul><p>　　<img src="/imgs/test-double-type.png" width="500" height="200"></p><h4 id="1-Stub"><a href="#1-Stub" class="headerlink" title="1. Stub"></a>1. Stub</h4><p>　　Test Stub是指一个完全代替待测系统依赖组件的对象，这个对象按照我们设计的输出与待测系统进行交互。这个桩既不会与测试用例(代码)交互，也不会在待测系统内部进行验证。</p><p>　　<img src="/imgs/test-double-stub.png" width="400" height="200"></p><h5 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h5><ul><li>完全代替待测系统依赖组件的对象</li><li>不会对 SUT 内部的输入进行验证</li></ul><h5 id="1-2-场景"><a href="#1-2-场景" class="headerlink" title="1.2 场景"></a>1.2 场景</h5><ul><li>依赖组件无法使用，影响测试结果</li><li>依赖组件运行太慢，影响测试速度</li><li>成为Responder响应者，当需要给待测系统注入特定数据，从而对待测系统产生影响</li><li>成为Saboteur破坏者，当需要给待测系统注入无效数据，从而对待测系统产生异常影响，观察待测系统如何处理错误情况</li></ul><h5 id="1-3-示例"><a href="#1-3-示例" class="headerlink" title="1.3 示例"></a>1.3 示例</h5><ul><li><p>初始测试 - 依赖组件无法使用<br>　　下面的代码只是测试了基本功能–格式化含有时间的 HTML 字符串，但是它依赖于真正的系统时钟。所以测试不会通过。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testDisplayCurrentTime_AtMidnight() &#123;</span><br><span class="line">      <span class="comment">// fixture setup</span></span><br><span class="line">      TimeDisplay sut = <span class="keyword">new</span> TimeDisplay();</span><br><span class="line">      <span class="comment">// exercise sut</span></span><br><span class="line">      <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">      <span class="comment">// verify direct output</span></span><br><span class="line">      <span class="keyword">String</span> expectedTimeString = <span class="string">"&lt;span class=\"tinyBoldText\"&gt;Midnight&lt;/span&gt;"</span>;</span><br><span class="line">      assertEquals( expectedTimeString, result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用真正的系统时钟之后的测试<br>　　下面的代码引入了当前系统的时钟，但是又带来了两个问题：其一，有些测试条件永远不会执行（比如测试Midnight 的部分，你可能需要大晚上爬起来运行测试）；其二，这个测试部分的逻辑和真正的实现代码逻辑重复了。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testDisplayCurrentTime_whenever() &#123;</span><br><span class="line">  <span class="comment">// fixture setup</span></span><br><span class="line">  TimeDisplay sut = <span class="keyword">new</span> TimeDisplay();</span><br><span class="line">  <span class="comment">// exercise sut</span></span><br><span class="line">  <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">  <span class="comment">// verify outcome</span></span><br><span class="line">  Calendar</span><br><span class="line">  time = <span class="keyword">new</span> DefaultTimeProvider().getTime();</span><br><span class="line">  StringBuffer expectedTime = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  expectedTime.<span class="built_in">append</span>(<span class="string">"&lt;span class=\"tinyBoldText\"&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span> ((time.<span class="built_in">get</span>(Calendar.HOUR_OF_DAY) == <span class="number">0</span>)</span><br><span class="line">      &amp;&amp; (time.<span class="built_in">get</span>(Calendar.MINUTE) &lt;= <span class="number">1</span>)) &#123;</span><br><span class="line">    expectedTime.<span class="built_in">append</span>(<span class="string">"Midnight"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((time.<span class="built_in">get</span>(Calendar.HOUR_OF_DAY) == <span class="number">12</span>)</span><br><span class="line">             &amp;&amp; (time.<span class="built_in">get</span>(Calendar.MINUTE) == <span class="number">0</span>)) &#123; <span class="comment">// noon</span></span><br><span class="line">    expectedTime.<span class="built_in">append</span>(<span class="string">"Noon"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    SimpleDateFormat fr = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"h:mm a"</span>);</span><br><span class="line">    expectedTime.<span class="built_in">append</span>(fr.format(time.getTime()));</span><br><span class="line">  &#125;</span><br><span class="line">  expectedTime.<span class="built_in">append</span>(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">  assertEquals(expectedTime, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Test Stub 之后的测试<br>　　下面的Stub用来注入有效的间接输入，被称为<code>Resnponder</code>，是一个 Happy Path。如果是注入无效的间接输入，则会是<code>Saboteur</code>。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testDisplayCurrentTime_AtMidnight() throws Exception &#123;</span><br><span class="line">  <span class="comment">// Fixture setup:</span></span><br><span class="line">  <span class="comment">//      Test Double configuration</span></span><br><span class="line">  TimeProviderTestStub tpStub = <span class="keyword">new</span> <span class="type">TimeProviderTestStub</span>();</span><br><span class="line">  tpStub.setHours(<span class="number">0</span>);</span><br><span class="line">  tpStub.setMinutes(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//   Instantiate SUT:</span></span><br><span class="line">  TimeDisplay sut = <span class="keyword">new</span> <span class="type">TimeDisplay</span>();</span><br><span class="line">  <span class="comment">//      Test Double installation</span></span><br><span class="line">  sut.setTimeProvider(tpStub);</span><br><span class="line">  <span class="comment">// exercise sut</span></span><br><span class="line">  <span class="keyword">String</span> result = sut.getCurrentTimeAsHtmlFragment();</span><br><span class="line">  <span class="comment">// verify outcome</span></span><br><span class="line">  <span class="keyword">String</span> expectedTimeString = <span class="string">"&lt;span class=\"tinyBoldText\"&gt;Midnight&lt;/span&gt;"</span>;</span><br><span class="line">  assertEquals(<span class="string">"Midnight"</span>, expectedTimeString, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TimeProviderTestStub的具体实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Calendar myTime = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The complete constructor for the TimeProviderTestStub</span></span><br><span class="line"><span class="comment">* @param hours specify the hours using a 24 hour clock</span></span><br><span class="line"><span class="comment">*    (e.g. 10 = 10 AM, 12 = noon, 22 = 10 PM, 0 = midnight)</span></span><br><span class="line"><span class="comment">* @param minutes specify the minutes after the hour</span></span><br><span class="line"><span class="comment">*   (e.g. 0 = exactly on the hour, 1 = 1 min after the hour)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimeProviderTestStub</span><span class="params">(<span class="keyword">int</span> hours, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   setTime(hours, minutes);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> hours, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   setHours(hours);</span><br><span class="line">   setMinutes(minutes);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Configuration Interface:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHours</span><span class="params">(<span class="keyword">int</span> hours)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 0 is midnight; 12 is noon</span></span><br><span class="line">   myTime.<span class="built_in">set</span>(Calendar.HOUR_OF_DAY, hours);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinutes</span><span class="params">(<span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">   myTime.<span class="built_in">set</span>(Calendar.MINUTE, minutes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Interface used by SUT</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Calendar <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// @return The last time that was set:</span></span><br><span class="line">   <span class="keyword">return</span> myTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Spy"><a href="#2-Spy" class="headerlink" title="2. Spy"></a>2. Spy</h4><p>　　Test Spy是指一个待测系统依赖组件的替身，并且会捕捉和保存待测对象对依赖系统的输出，这个输出会用于测试代码中的验证。Test Spy主要用于记录和验证待测对象对依赖系统的输出。</p><img src="/imgs/test-double-spy.png" width="400" height="200"><h5 id="2-1-特点："><a href="#2-1-特点：" class="headerlink" title="2.1 特点："></a>2.1 特点：</h5><ul><li>会将 Spy 内部的间接输出返回给测试用例，由测试用例进行验证</li><li>只负责获取内部信息，并把这些信息发出去，不负责验证信息的正确性</li></ul><h5 id="2-2-示例："><a href="#2-2-示例：" class="headerlink" title="2.2 示例："></a>2.2 示例：</h5><ul><li><p>初始测试<br>　　下面的代码只是测试了基本的remove flight 的功能，不能验证SUT的间接输出，也就是每次 flight 被删除之后的请求日志，包括数据、时间和用户。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testRemoveFlight</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// setup</span></span><br><span class="line">   FlightDto expectedFlightDto = createARegisteredFlight();</span><br><span class="line">   FlightManagementFacade facade = <span class="keyword">new</span> FlightManagementFacadeImpl();</span><br><span class="line">   <span class="comment">// exercise</span></span><br><span class="line">   facade.removeFlight(expectedFlightDto.getFlightNumber());</span><br><span class="line">   <span class="comment">// verify</span></span><br><span class="line">   assertFalse(<span class="string">"flight should not exist after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Test Spy 之后的测试<br>　　下面的代码中，logSpy 就是 Test Spy，<code>facade.setAuditLog(logSpy)</code>安装了 Test Spy，<code>getDate</code>, <code>getActionCode</code>等是Retrieval Interface（也称 Loopback）。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> public void testRemoveFlightLogging_recordingTestStub() throws Exception &#123;</span><br><span class="line">   // fixture setup</span><br><span class="line">   FlightD<span class="keyword">to</span> expectedFlightD<span class="keyword">to</span> = createAnUnregFlight();</span><br><span class="line">   FlightManagementFacade facade = new FlightManagementFacadeImpl();</span><br><span class="line">   //    Test Double setup</span><br><span class="line">   AuditLogSpy <span class="keyword">log</span>Spy = new AuditLogSpy();</span><br><span class="line">   facade.<span class="built_in">set</span>AuditLog(<span class="keyword">log</span>Spy);</span><br><span class="line">   // exercise</span><br><span class="line">   facade.removeFlight(expectedFlightD<span class="keyword">to</span>.getFlightNumber());</span><br><span class="line">   // verify</span><br><span class="line">   assertFalse(<span class="string">"flight still exists after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightD<span class="keyword">to</span>.getFlightNumber()));</span><br><span class="line">   assertEquals(<span class="string">"number of calls"</span>, <span class="number">1</span>, <span class="keyword">log</span>Spy.getNumberOfCalls());</span><br><span class="line">   assertEquals(<span class="string">"action code"</span>, Helper.REMOVE_FLIGHT_ACTION_CODE,</span><br><span class="line">                <span class="keyword">log</span>Spy.getActionCode());</span><br><span class="line">   assertEquals(<span class="string">"date"</span>, helper.getTodaysDateWithoutTime(), <span class="keyword">log</span>Spy.getDate());</span><br><span class="line">   assertEquals(<span class="string">"user"</span>, Helper.TEST_USER_NAME, <span class="keyword">log</span>Spy.getUser());</span><br><span class="line">   assertEquals(<span class="string">"detail"</span>, expectedFlightD<span class="keyword">to</span>.getFlightNumber(),</span><br><span class="line">                <span class="keyword">log</span>Spy.getDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spy 的具体实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AuditLogSpy <span class="keyword">implements</span> AuditLog &#123;</span><br><span class="line">   <span class="comment">// Fields into which we record actual usage info</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">Date</span> date;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">String</span> user;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">String</span> actionCode;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">Object</span> detail;</span><br><span class="line">   <span class="keyword">private</span> int numberOfCalls = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// Recording implementation of real AuditLog interface:</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">void</span> logMessage(<span class="built_in">Date</span> date, <span class="built_in">String</span> user,</span><br><span class="line">                          <span class="built_in">String</span> actionCode,</span><br><span class="line">                          <span class="built_in">Object</span> detail) &#123;</span><br><span class="line">      <span class="keyword">this</span>.date = date;</span><br><span class="line">      <span class="keyword">this</span>.user = user;</span><br><span class="line">      <span class="keyword">this</span>.actionCode = actionCode;</span><br><span class="line">      <span class="keyword">this</span>.detail = detail;</span><br><span class="line">      numberOfCalls++;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// Retrieval Interface:</span></span><br><span class="line">   <span class="keyword">public</span> int getNumberOfCalls() &#123;</span><br><span class="line">      <span class="keyword">return</span> numberOfCalls;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">Date</span> getDate() &#123;</span><br><span class="line">      <span class="keyword">return</span> date;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">String</span> getUser() &#123;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">String</span> getActionCode() &#123;</span><br><span class="line">      <span class="keyword">return</span> actionCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">Object</span> getDetail() &#123;</span><br><span class="line">      <span class="keyword">return</span> detail;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Mock"><a href="#3-Mock" class="headerlink" title="3. Mock"></a>3. Mock</h4><p>　　它类似于Test Spy，安插在待测系统内部，获取到待测系统内部的间接输出，一般根据调用者输入，按照约定执行操作，然后返回调用者事先编码写好的预期结果。<br><img src="/imgs/test-double-mock.png" width="400" height="200"></p><h5 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h5><ul><li>Mock还会对调用进行验证（verify），若碰到不在预期范围的调用还会抛出异常。</li><li>Mock需要设置 expectation，而且必须要在 SUT的 exercise这一阶段之前进行设置。</li></ul><p>　　Mock 的相应操作对应到Four Phrase如下：</p><ul><li>Fixture set up<ul><li>构建 Mock Object</li><li>配置 Mock Object</li><li>安装 Mock Objct 到 SUT</li></ul></li><li>Exercise SUT<ul><li>SUT 调用 Mock Object，Mock Object 进行断言</li></ul></li><li>Result verification<ul><li>测试调用最后的 verify 方法</li></ul></li><li>Fixture tear down<ul><li>没有影响</li></ul></li></ul><h5 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h5><ul><li><p>初始测试</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testRemoveFlight</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// setup</span></span><br><span class="line">   FlightDto expectedFlightDto = createARegisteredFlight();</span><br><span class="line">   FlightManagementFacade facade = <span class="keyword">new</span> FlightManagementFacadeImpl();</span><br><span class="line">   <span class="comment">// exercise</span></span><br><span class="line">   facade.removeFlight(expectedFlightDto.getFlightNumber());</span><br><span class="line">   <span class="comment">// verify</span></span><br><span class="line">   assertFalse(<span class="string">"flight should not exist after being removed"</span>,</span><br><span class="line">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Mock Object 之后的测试</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void testRemoveFlight_Mock() throws <span class="type">Exception</span> &#123;</span><br><span class="line">   <span class="comment">// fixture setup</span></span><br><span class="line">   <span class="type">FlightDto</span> expectedFlightDto = createAnonRegFlight();</span><br><span class="line">   <span class="comment">// mock configuration</span></span><br><span class="line">   <span class="type">ConfigurableMockAuditLog</span> mockLog = <span class="function"><span class="keyword">new</span> <span class="title">ConfigurableMockAuditLog</span>();</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">setExpectedLogMessage</span>( helper.getTodaysDateWithoutTime(),</span></span><br><span class="line"><span class="function">                        <span class="title">Helper</span>.<span class="title">TEST_USER_NAME</span>,</span></span><br><span class="line"><span class="function">                        <span class="title">Helper</span>.<span class="title">REMOVE_FLIGHT_ACTION_CODE</span>,</span></span><br><span class="line"><span class="function">                        <span class="title">expectedFlightDto</span>.<span class="title">getFlightNumber</span>());</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">setExpectedNumberCalls</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="function">   <span class="comment">// mock installation</span></span></span><br><span class="line"><span class="function">   <span class="title">FlightManagementFacade</span> <span class="title">facade</span> = <span class="title">new</span> <span class="title">FlightManagementFacadeImpl</span>();</span></span><br><span class="line"><span class="function">   <span class="title">facade</span>.<span class="title">setAuditLog</span>(mockLog);</span></span><br><span class="line"><span class="function">   <span class="comment">// exercise</span></span></span><br><span class="line"><span class="function">   <span class="title">facade</span>.<span class="title">removeFlight</span>(expectedFlightDto.getFlightNumber());</span></span><br><span class="line"><span class="function">   <span class="comment">// verify</span></span></span><br><span class="line"><span class="function">   <span class="title">assertFalse</span>("flight still exists after being removed",</span></span><br><span class="line"><span class="function">               facade.flightExists( expectedFlightDto.getFlightNumber()));</span></span><br><span class="line"><span class="function">   <span class="title">mockLog</span>.<span class="title">verify</span>();</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-Fake"><a href="#4-Fake" class="headerlink" title="4. Fake"></a>4. Fake</h4><p>　　Fake Object 和 Test Stub 很类似，都是依赖组件的代替，区别就在于Fake Object 更“轻量级”。“轻量级”是指Fake Object 仅仅提供和依赖组件一样的功能接口保证待测系统正常工作，让待测系统认为 Fake Object 就是“真的”依赖组件，实现细节可以非常简单，不需要具有真实依赖组件的很多特性，也不需要像Test Stub那样接受测试的需求，返回特定response给待测系统。</p><p>　　<img src="/imgs/test-double-fake.png" width="400" height="200"></p><h5 id="4-1-特点"><a href="#4-1-特点" class="headerlink" title="4.1 特点"></a>4.1 特点</h5><ul><li>轻量级、简单实现</li><li>不适合生产环境</li></ul><h5 id="4-2-场景"><a href="#4-2-场景" class="headerlink" title="4.2 场景"></a>4.2 场景</h5><ul><li>实际对象还未实现出来，先用一个简单的Fake Object代替它。</li><li>实际对象执行需要太长的时间</li><li>实际对象在实际环境下可能会有不稳定的情况。比如，网络发送数据包，不能保证每次都能成功发送。</li><li>实际对象在实际系统环境下不可用，或者很难让它变得可用。比如，使用一个依赖实际数据库的数据库访问层对象，必须安装数据库，并且进行大量的配置，才能生效。</li></ul><p>　　通常Fake Object用于构造下面的对象：</p><ul><li>Fake Database</li><li>In-Memory Database</li><li>Fake Web Service</li><li>Fake Service Layer</li></ul><h5 id="4-3-示例"><a href="#4-3-示例" class="headerlink" title="4.3 示例"></a>4.3 示例</h5><ul><li><p>初始测试</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testReadWrite() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// Setup:</span></span><br><span class="line">   FlightMngtFacade facade = <span class="keyword">new</span> FlightMgmtFacadeImpl();</span><br><span class="line">   <span class="comment">// Exercise:</span></span><br><span class="line">   BigDecimal yyc = facade.createAirport(<span class="string">"YYC"</span>, <span class="string">"Calgary"</span>, <span class="string">"Calgary"</span>);</span><br><span class="line">   BigDecimal lax = facade.createAirport(<span class="string">"LAX"</span>, <span class="string">"LAX Intl"</span>, <span class="string">"LA"</span>);</span><br><span class="line">   facade.createFlight(yyc, lax);</span><br><span class="line">   List flights = facade.getFlightsByOriginAirport(yyc);</span><br><span class="line">   <span class="comment">// Verify:</span></span><br><span class="line">   assertEquals( <span class="string">"# of flights"</span>, <span class="number">1</span>, flights.<span class="built_in">size</span>());</span><br><span class="line">   Flight flight = (Flight) flights.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertEquals( <span class="string">"origin"</span>, yyc,</span><br><span class="line">                 flight.getOrigin().getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Service真实实现</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal createAirport( String airportCode, String name,</span><br><span class="line">                                 String nearbyCity)</span><br><span class="line"><span class="keyword">throws</span> FlightBookingException&#123;</span><br><span class="line">   TransactionManager.beginTransaction();</span><br><span class="line">   Airport airport = dataAccess.createAirport(airportCode, name, nearbyCity);</span><br><span class="line">   logMessage(<span class="string">"Wrong Action Code"</span>, airport.getCode());<span class="comment">//bug</span></span><br><span class="line">   TransactionManager.commitTransaction();</span><br><span class="line">   <span class="function"><span class="keyword">return</span> airport.<span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> List getFlightsByOriginAirport( BigDecimal originAirportId)</span><br><span class="line">      <span class="keyword">throws</span> FlightBookingException &#123;</span><br><span class="line">   <span class="keyword">if</span> (originAirportId == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException( <span class="string">"Origin Airport Id has not been provided"</span>,</span><br><span class="line">              <span class="string">"originAirportId"</span>, <span class="keyword">null</span>);     </span><br><span class="line">   Airport origin = dataAccess.getAirportByPrimaryKey(originAirportId);</span><br><span class="line">   List flights = dataAccess.getFlightsByOriginAirport(origin);</span><br><span class="line">   <span class="keyword">return</span> flights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDao</span><span class="params">(Database dao)</span> </span>&#123;</span><br><span class="line">   dataAccess = dao;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Fake Object 之后的示例<br>　　下面的代码，将Fake Object InMemoryDatabase注入到了真实的 Service facade中，测试并没有更改太多，只是会调用 Fake 的 Database，整个测试执行会变快很多。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testReadWrite_inMemory() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// Setup:</span></span><br><span class="line">   FlightMgmtFacadeImpl facade = <span class="keyword">new</span> FlightMgmtFacadeImpl();</span><br><span class="line">   facade.setDao(<span class="keyword">new</span> InMemoryDatabase());</span><br><span class="line">   <span class="comment">// Exercise:</span></span><br><span class="line">   BigDecimal yyc = facade.createAirport(<span class="string">"YYC"</span>, <span class="string">"Calgary"</span>, <span class="string">"Calgary"</span>);</span><br><span class="line">   BigDecimal lax = facade.createAirport(<span class="string">"LAX"</span>, <span class="string">"LAX Intl"</span>, <span class="string">"LA"</span>);</span><br><span class="line">   facade.createFlight(yyc, lax);</span><br><span class="line">   List flights = facade.getFlightsByOriginAirport(yyc);</span><br><span class="line">   <span class="comment">// Verify:</span></span><br><span class="line">   assertEquals( <span class="string">"# of flights"</span>, <span class="number">1</span>, flights.<span class="built_in">size</span>());</span><br><span class="line">   Flight flight = (Flight) flights.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertEquals( <span class="string">"origin"</span>, yyc,</span><br><span class="line">                 flight.getOrigin().getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fake Object 的实现</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryDatabase</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">FlightDao</span></span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List airports = <span class="keyword">new</span> <span class="type">Vector</span>();</span><br><span class="line">    <span class="keyword">public</span> Airport createAirport(<span class="keyword">String</span> airportCode, <span class="keyword">String</span> name, <span class="keyword">String</span> nearbyCity)</span><br><span class="line">             throws DataException, InvalidArgumentException &#123;|------<span class="number">-10</span>-------<span class="number">-20</span>-------<span class="number">-30</span>-------<span class="number">-40</span>-------<span class="number">-50</span>-------<span class="number">-60</span>-----|</span><br><span class="line"></span><br><span class="line">       assertParamtersAreValid( airportCode, name, nearbyCity);     </span><br><span class="line">       assertAirportDoesntExist( airportCode); </span><br><span class="line">       Airport result = <span class="keyword">new</span> <span class="type">Airport</span>(getNextAirportId(),</span><br><span class="line">             airportCode, name, createCity(nearbyCity));</span><br><span class="line">       airports.add(result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Airport getAirportByPrimaryKey(BigDecimal airportId)</span><br><span class="line">             throws DataException, InvalidArgumentException &#123;</span><br><span class="line">       assertAirportNotNull(airportId);</span><br><span class="line">    Airport result = <span class="literal">null</span>;</span><br><span class="line">       Iterator i = airports.iterator();</span><br><span class="line">       <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">          Airport airport = (Airport) i.next();</span><br><span class="line">          <span class="keyword">if</span> (airport.getId().equals(airportId)) &#123;</span><br><span class="line">             <span class="keyword">return</span> airport;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">DataException</span>(<span class="string">"Airport not found:"</span>+airportId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-Dummy"><a href="#5-Dummy" class="headerlink" title="5. Dummy"></a>5. Dummy</h4><p>　　Dummy Object对象是指为了调用被测试方法而传入的假参数，为什么说是假参数呢？实际上这些传入的Dummy对象并不会对测试有任何作用，仅仅是为了成功调用被测试方法。所以，Dummy Object又被称为Dummy parameter或placeholder。</p><h5 id="5-1-特点"><a href="#5-1-特点" class="headerlink" title="5.1 特点"></a>5.1 特点</h5><ul><li>测试中须传入的对象</li><li>测试中实际并不使用Dummy Object</li></ul><h5 id="5-2-场景"><a href="#5-2-场景" class="headerlink" title="5.2 场景"></a>5.2 场景</h5><ul><li>Dummy Argument</li><li>Dummy Attribute</li></ul><h5 id="5-3-示例"><a href="#5-3-示例" class="headerlink" title="5.3 示例"></a>5.3 示例</h5><ul><li><p>初始测试<br>下面的代码中，Invoice需要 Product 和 Customer 信息，但是 Customer的依赖信息为 Customer -&gt;Address -&gt; City -&gt; State，这就需要我们构造很多对象，让 Test setup 变得复杂起来。此外，测试只测试了 Invoice 相关的功能，并不关心 Address -&gt; City -&gt; State，因此冗余的代码会在某种程度上误导读者（该例子可能太简单，不足以说明）。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testInvoice_addLineItem_noECS() &#123;</span><br><span class="line">   final int QUANTITY = <span class="number">1</span>;</span><br><span class="line">   Product product = <span class="keyword">new</span> <span class="type">Product</span>(getUniqueNumberAsString(), getUniqueNumber());</span><br><span class="line">   State state = <span class="keyword">new</span> <span class="type">State</span>(<span class="string">"West Dakota"</span>, <span class="string">"WD"</span>);</span><br><span class="line">   City city = <span class="keyword">new</span> <span class="type">City</span>(<span class="string">"Centreville"</span>, state);</span><br><span class="line">   Address address = <span class="keyword">new</span> <span class="type">Address</span>(<span class="string">"123 Blake St."</span>, city, <span class="string">"12345"</span>);</span><br><span class="line">   Customer customer= <span class="keyword">new</span> <span class="type">Customer</span>(getUniqueNumberAsString(), getUniqueNumberAsString(), address);</span><br><span class="line">   Invoice inv = <span class="keyword">new</span> <span class="type">Invoice</span>(customer);</span><br><span class="line">   <span class="comment">// Exercise</span></span><br><span class="line">   inv.addItemQuantity(product, QUANTITY);</span><br><span class="line">   <span class="comment">// Verify</span></span><br><span class="line">   List lineItems = inv.getLineItems();</span><br><span class="line">   assertEquals(<span class="string">"number of items"</span>, lineItems.size(), <span class="number">1</span>);</span><br><span class="line">   LineItem actual = (LineItem)lineItems.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">   LineItem expItem = <span class="keyword">new</span> <span class="type">LineItem</span>(inv, product, QUANTITY);</span><br><span class="line">   assertLineItemsEqual(<span class="string">""</span>,expItem, actual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入 Dummy Object之后的测试<br>　　我们用 DummyCustomer 代替了实际的 Customer，而我们并不关系具体的实现，因为我们只是需要这个 Customer 对象作为一个参数输入。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void testInvoice_addLineItem_DO() &#123;</span><br><span class="line">   final int QUANTITY = <span class="number">1</span>;</span><br><span class="line">   Product product = <span class="keyword">new</span> <span class="type">Product</span>(<span class="string">"Dummy Product Name"</span>, getUniqueNumber());</span><br><span class="line">   Invoice inv = <span class="keyword">new</span> <span class="type">Invoice</span>( <span class="keyword">new</span> <span class="type">DummyCustomer</span>() );</span><br><span class="line">   LineItem expItem = <span class="keyword">new</span> <span class="type">LineItem</span>(inv, product, QUANTITY);</span><br><span class="line">   <span class="comment">// Exercise</span></span><br><span class="line">   inv.addItemQuantity(product, QUANTITY);</span><br><span class="line">   <span class="comment">// Verify</span></span><br><span class="line">   List lineItems = inv.getLineItems();</span><br><span class="line">   assertEquals(<span class="string">"number of items"</span>, lineItems.size(), <span class="number">1</span>);</span><br><span class="line">   LineItem actual = (LineItem)lineItems.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">   assertLineItemsEqual(<span class="string">""</span>, expItem, actual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dummy Object 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyCustomer</span> <span class="keyword">implements</span> <span class="title">ICustomer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DummyCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Real simple; nothing to initialize!</span></span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This should never be called!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、实现方式"><a href="#四、实现方式" class="headerlink" title="四、实现方式"></a>四、实现方式</h3><ul><li>Hard-Coded Test Double - 会返回固定response的Test Double</li><li>Configurable Test Double - 会根据测试需求返回相应response的Test Double</li></ul><h3 id="五、对比总结"><a href="#五、对比总结" class="headerlink" title="五、对比总结"></a>五、对比总结</h3><table><thead><tr><th>Pattern</th><th style="text-align:center">Purpose</th><th style="text-align:center">Has Behavior</th><th style="text-align:center">Injects indirect inputs into SUT</th><th style="text-align:center">Handles indirect outputs of SUT</th><th style="text-align:center">Values provided by test(er)</th><th style="text-align:center">Examples</th></tr></thead><tbody><tr><td>Test Double</td><td style="text-align:center">Generic name for family</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Dummy Object</td><td style="text-align:center">Attribute or Method Parameter</td><td style="text-align:center">no</td><td style="text-align:center">no, never called</td><td style="text-align:center">no, never called</td><td style="text-align:center">no</td><td style="text-align:center">Null, “Ignored String”, new Object()</td></tr><tr><td>Test Stub</td><td style="text-align:center">Verify indirect inputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">ignores them</td><td style="text-align:center">inputs</td><td style="text-align:center"></td></tr><tr><td>Test Spy</td><td style="text-align:center">Verify indirect outputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">optional</td><td style="text-align:center">captures them for later verification</td><td style="text-align:center">inputs (optional)</td><td style="text-align:center"></td></tr><tr><td>Mock Object</td><td style="text-align:center">Verify indirect outputs of SUT</td><td style="text-align:center">yes</td><td style="text-align:center">optional</td><td style="text-align:center">verifies correctness against expectations</td><td style="text-align:center">outputs &amp; inputs (optional)</td><td style="text-align:center"></td></tr><tr><td>Fake Object</td><td style="text-align:center">Run (unrunnable) tests (faster)</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">uses them</td><td style="text-align:center">none</td><td style="text-align:center">In-memory database emulator</td></tr><tr><td>Temporary Test Stub</td><td style="text-align:center">Stand in for procedural code not yet written</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">uses them</td><td style="text-align:center">none</td><td style="text-align:center">In-memory database emulator</td></tr></tbody></table><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　有些开源框架中可能名字叫法不一样，比如 Junit 中使用<code>Dummy Object</code>代表本文中的<code>Fake Object</code>等。因此，本篇文章主要是弄清楚一些形式，并不局限于概念的名称，理解才是关键。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" rel="noopener">Test Double – Martin Fowler</a></li><li><a href="http://xunitpatterns.com/Test%20Double.html" target="_blank" rel="noopener">Test Double – xUnit Test Patterns</a></li><li><a href="https://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="noopener">Mocks Aren’t Stubs -— Martin Fowler</a></li><li><a href="http://www.softwaretestingmagazine.com/knowledge/unit-testing-fakes-mocks-and-stubs/" target="_blank" rel="noopener">Unit Testing: Fakes, Mocks and Stubs</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文的主要观点、代码片段、图片均源自《Test Double – xUnit Test Patterns》书的&lt;em&gt;Test Double&lt;/em&gt;章节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　很多时候，在执行单元测试时，待测对象依赖于其他模块，我们经常听到的有 Mock、Stub、Fake、Spy之类的词。xUnit Test Patterns一书中对此进行了统称&lt;code&gt;Test Double&lt;/code&gt;，并清晰的说明了各个术语的区别与应用场景。下面主要从以下几个方面进行阐述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Four-Phase Test&lt;/li&gt;
&lt;li&gt;理解Test Double&lt;/li&gt;
&lt;li&gt;Test Double的分类&lt;/li&gt;
&lt;li&gt;实现方式&lt;/li&gt;
&lt;li&gt;对比总结&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Test" scheme="http://yoursite.com/categories/Test/"/>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>IoT初识</title>
    <link href="http://yoursite.com/2018/06/23/%E8%AE%A4%E8%AF%86IoT/"/>
    <id>http://yoursite.com/2018/06/23/认识IoT/</id>
    <published>2018-06-23T12:32:04.000Z</published>
    <updated>2018-06-24T15:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文的主要内容是翻译自《Internet of Things with Raspberry Pi 3 —— Maneesh Rao》一书的第一章<em>Introduction to IoT</em></p></blockquote><p>　　本篇文章中，我们将认识物联网 (IoT)相关内容。了解 IoT 生态系统的体系架构、其在不同领域的应用与优势、背景、当前场景以及未来。主要包含以下方面：</p><ul><li>理解 IoT</li><li>IoT生态系统的体系架构</li><li>历史与发展</li><li>IoT应用和未来前景</li></ul><a id="more"></a><h3 id="一、理解-IoT"><a href="#一、理解-IoT" class="headerlink" title="一、理解 IoT"></a>一、理解 IoT</h3><p>　　回顾过去几年，可以看到，IoT已经成为研发最具革命性的技术之一。它给即将到来的众多商业模式打开了大门，并帮助重塑现有的业务。<br>　　但是什么是物联网呢？ 为什么被称为新技术革命？ 谁发明了它，什么时候发生？ 它的应用有哪些？ 它真的具有改变我们生活的潜力吗？ </p><p>　　IoT 不仅仅是技术，它是一个全新世界的概念，在这个世界里，像汽车、住宅、建筑物和城市其他组成部分这样的物理事物，有能力连接到互联网并与人类互动。简而言之，它是一个智能和互联的世界。<br>　　IoT是一种只能被描述和不能被定义的现象，因为它是一种没有边界的包容性技术。<br>　　IoT生态系统中的物理设备也被称为事物（Thing）或智能事物（smart thing）。一件事物可以是具有一个或多个以下特征的任何设备：</p><ul><li>传感器 Sensors（温度，湿度，运动检测器）</li><li>通信 Communication（有线或无线）</li><li>执行器 Actuators（电机，继电器，显示器）</li><li>控制器或处理器Controller or processor（用于计算，运行软件）</li></ul><p>　　比如：</p><ul><li>Tags<br>　　NFC、RFID 和 QR code是计算机可读的，可用于识别物体</li><li>设备<br>　　iBeacon、Arduino、Raspberry Pi等设备内置控制器/处理器和通信通道，如蓝牙、Wi-Fi、以太网等</li><li>机器<br>　　汽车，自行车，空调机组和可以自主工作的洗衣机</li><li>基础设施<br>　　智能连接工厂，智能连接建筑和智能城市等</li></ul><h3 id="二、IoT生态系统的体系架构"><a href="#二、IoT生态系统的体系架构" class="headerlink" title="二、IoT生态系统的体系架构"></a>二、IoT生态系统的体系架构</h3><p>　　让我们通过一个示例来了解物联网生态系统的工作原理吧！</p><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>　　Ghanshyam先生是一家货运公司的所有者，该公司拥有大量卡车作为其机队的一部分。 他们为全国各地的其他企业提供运输服务。最近，由于各种原因，他一直在业务上遭受损失，然而他无法识别和纠正这些损失。</p><h4 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h4><p>　　他的儿子Shyam作为物联网工程师，了解他父亲的商业情况，并决定协助他。 Shyam在接下来的几个月里与他合作，并观察到了一些遭受损失的重大问题。 这里列出了一些问题：</p><ul><li>高燃油消耗</li><li>高维护成本</li><li>交货延迟</li><li>事故率高</li></ul><h4 id="3-措施"><a href="#3-措施" class="headerlink" title="3.措施"></a>3.措施</h4><p>　　作为物联网工程师的Shyam知道需要采取哪些措施才能使业务盈利并易于管理。我们来看看他到底执行了做了那些事情：</p><h5 id="3-1-转换车型"><a href="#3-1-转换车型" class="headerlink" title="3.1 转换车型"></a>3.1 转换车型</h5><p>　　Shyam将所有车队的卡车转换为智能车型，并通过配备各种传感器来连接车辆，以测量诸如燃油油位，轮胎压力，发动机状态，温度等重要数据。控制器用于根据要求执行操作，例如在太阳落山时打开灯光，下雨时打开雨刷，提醒驾驶员，并在Wi-Fi / GPRS / GPS模块的帮助下通过互联网向云端发送重要信息。摄像头和其他类似的设备用来密切注视驾驶员的表现，来从卡车获取实时数据，如下图所示：</p><img src="/imgs/iot-trunk-component.png" width="600" height="350"><h5 id="3-2-开发移动应用"><a href="#3-2-开发移动应用" class="headerlink" title="3.2 开发移动应用"></a>3.2 开发移动应用</h5><p>　　公司团队开发了一款移动应用程序，可帮助司机实时监控卡车的状况、通过最佳路线导航、接收警报通知、分配工作/任务。<br>　　此外，公司还开发了一个管理员/控制面板应用程序，该应用由管理人员和操作员在指挥中心使用，以监控所有正在通过互联网发送实时数据的卡车。 这通过以下方式促进了更好的车队管理：</p><ul><li>监控卡车到达目的地的路线; 如果驾驶员进入可疑位置，则可以远程关闭发动机。</li><li>借助机舱内的摄像头监控驾驶员的行为。这可以避免在驾车时睡觉或打电话的事件，并立即发送警报。</li><li>如遇故障，可导航至附近的服务站。</li></ul><h4 id="4-影响"><a href="#4-影响" class="headerlink" title="4.影响"></a>4.影响</h4><p>　　在采取了上述所有措施后，车队现在已经被改造成智能和联网的车队了，下图可以帮助理解Shyam的IoT解决方案架构：<br><img src="/imgs/iot-trunk-solution.png" width="600" height="350"></p><p>　　我们可以分析一下智能和联网车队是如何Ghanshyam先生的业务盈利的：</p><ul><li>燃油效率：收到的关于制动、换档和速度的数据，有助于建立和改善每位驾驶员的驾驶风格，从而提高燃油效率。此外，定期检查油位有助于遏制偷油事件，从而降低整体燃油成本。</li><li>维护成本和交货延迟：安装在每辆卡车上的传感器发送有关发动机健康状况、刹车、电气系统和油位的重要信息。这有助于操作员通过及时和预防性维护保持车辆的整体健康状况，从而减少频繁的故障和延误，从而节省大量成本。</li><li>改进的安全性：使用摄像头和其他传感器数据监控驾驶员的行为，有助于检测哪些对驾驶员和车辆安全构成威胁的激进、粗心和不当驾驶，这些数据可用于提醒司机、让他更负责的开车，并为未来的改进提供适当的培训。</li><li>路线优化：通过使用GPS跟踪车辆的当前位置和交通状况，可以建议最短和最佳的路线，从而使车辆在最短时间内到达目的地、降低燃料成本、节省时间以促进更多交付，从而反过来增加利润。</li><li>环境影响：通过改善车辆状况并采取优化路线，使用较少的燃料，从而减少有害气体的排放。</li></ul><h4 id="5-总结架构"><a href="#5-总结架构" class="headerlink" title="5.总结架构"></a>5.总结架构</h4><img src="/imgs/iot-ecosystem-architecture.png" width="800" height="350"><ul><li>传感器（Sensors）、标签（Tags）和微芯片（Microchips）系统中的终端设备（END Devices），可以观察环境并提供相关信息。</li><li>连接管理（Connection Management）负责通过互联网上的各种协议（如HTTP，MQTT和AQMP）以及蓝牙和射频来维护终端设备与用户/平台之间的连接。</li><li>实时数据管理（Data Management）有助于收集和存储从数据库中的终端设备接收的数据，这些数据可能是基于数据类型的关系数据库或NoSQL数据库。</li><li>安全和访问控制（Security &amp; Access Control）可防止未经授权的用户访问系统，然后可能会被滥用。安全是物联网生态系统中最重要的组成部分之一;忽视它可能会给企业和个人造成巨大的损失。</li><li>云平台（Cloud platforms）以最小的停机时间促进整个系统的可扩展性，可用性和可访问性，这对于连接系统非常重要。</li><li>管理和分析（Administration &amp; analytics）组件使用设备提供的所有数据来了解设备和最终用户的行为，从而进一步帮助改进服务，执行预防性维护并提供必要的警报和通知。</li><li>与社交媒体，BI和CMS等其他平台以及企业和供应链的整合（3th Party Integration），有助于缩小不同业务部门之间的差距。</li><li>开发人员工具（Developer tools）可帮助第三方无缝集成现有系统。</li></ul><h3 id="三、历史与发展"><a href="#三、历史与发展" class="headerlink" title="三、历史与发展"></a>三、历史与发展</h3><p>　　几十年前，人类互相联系的唯一途径就是通过私人交流、邮政服务和固定电话。 谁会想到机器之间的交流、机器与人类的交流？但随着互联网的引入，以及硬件和通信技术的进步，这已成为现实。<br>IoT对我们许多人来说可能是一个新话题，但是它最初是由麻省理工学院（MIT）的AutoID实验室的凯文阿什顿（Kevin Ashton）在1999年提出的，当时他在宝洁公司做了演讲时创造了IoT这个词。</p><p>　　今天，IoT已经成为互联网世界的下一场革命；它利用数十亿传感器和连接物的只能，收集大数据，从而作出决定。 请参阅下图了解过去几十年物联网的发展历程：</p><img src="/imgs/iot-history-and-evolution.png" width="800" height="300"><h3 id="四、IoT应用和未来前景"><a href="#四、IoT应用和未来前景" class="headerlink" title="四、IoT应用和未来前景"></a>四、IoT应用和未来前景</h3><p>　　下图显示了不同行业物联网应用的详细视图：<br><img src="/imgs/iot-applications-and-future-prospects.png" width="400" height="200"></p><ul><li>冰箱，照明，洗衣机和恒温器等家用设备（Household devices）可以通过任何地方的移动应用进行控制。</li><li>可穿戴设备（Wearable devices），比如追踪身体运动和卡路里消耗的Fitbit等，已经成为主流。</li><li>联网汽车（Connected vehicles）已经从本田，大众和特斯拉等大型汽车市场进入市场，而这些汽车正在引领这一领域。纵观最近自动驾驶技术的发展，自动驾驶汽车已不再是不可想象的。</li><li>制造工厂（Manufacturing plants）和工厂（Factories）将能够在适当的时间监控自己的健康状况并预测维护情况，这将延长使用寿命并缩短停机时间。</li><li>电网（Power grids）和太阳能电站（solar plants）将连接到互联网，这将有助于分销商更有效地向终端用户供电，跟踪实际使用情况并防止盗窃等。</li><li>受益于物联网增长的行业包括：<ul><li>互联设备制造商（Connected device manufactures）：可穿戴设备，智能电表和家用电器的制造者。</li><li>网络提供商（Network providers）：IoT需要设备和系统的快速、安全和可靠的网络互连。</li><li>半导体（Semi-conductor）：微控制器（Microcontrollers），闪存设备（Flash devices）和传感器（Sensors）的需求将非常大。</li></ul></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　WHAT：简而言之，IoT，Internet of Things是一个将任何设备（只要具有开/关切换）连接到因特网和其他连接的设备的概念。<br>　　HOW：IoT 系统由一些带有传感器的设备和对象构成，这些设备通过嵌入式传感器、处理器和通信硬件，收集、发送和处理从周围环境中获得的数据。这些“联网”或“智能”设备可以和云平台进行交流发送数据、并接收对应的行为。<br>　　WHY：当平台集成了来自不同设备的数据后，可以对其进行应用分析，作出相应的回应行为；此外，共享最有价值的信息，可以帮助作出合适的决定。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.ibm.com/blogs/internet-of-things/what-is-the-iot/" target="_blank" rel="noopener">What is the Internet of Things?</a></li><li><a href="https://medium.com/iotforall/iot-explained-how-does-an-iot-system-actually-work-e90e2c435fe7" target="_blank" rel="noopener">IoT Explained — How Does an IoT System Actually Work?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文的主要内容是翻译自《Internet of Things with Raspberry Pi 3 —— Maneesh Rao》一书的第一章&lt;em&gt;Introduction to IoT&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　本篇文章中，我们将认识物联网 (IoT)相关内容。了解 IoT 生态系统的体系架构、其在不同领域的应用与优势、背景、当前场景以及未来。主要包含以下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解 IoT&lt;/li&gt;
&lt;li&gt;IoT生态系统的体系架构&lt;/li&gt;
&lt;li&gt;历史与发展&lt;/li&gt;
&lt;li&gt;IoT应用和未来前景&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IoT" scheme="http://yoursite.com/categories/IoT/"/>
    
    
      <category term="IoT" scheme="http://yoursite.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Team Event</title>
    <link href="http://yoursite.com/2018/05/27/Team-Event/"/>
    <id>http://yoursite.com/2018/05/27/Team-Event/</id>
    <published>2018-05-27T09:20:27.000Z</published>
    <updated>2018-06-24T15:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　处于Team之中，也许你知道如何去做一件事，也许你习以为常，觉得这就是常态。<br>　　当你猛不丁地回过头看时，你会发现，这些流程与步骤是一次次的尝试与实践之后，最适合 Team 的方法措施；<br>　　抑或着，当你尝试给新人或者其他组的人描述时候，你会恍然大悟，为什么有些事情没有做，为什么有些事情会是这样发生的。</p><a id="more"></a><h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>　　现在是笔者参与的第三个项目了，第一个是国外某大型传统金融保险行业的项目，第二个是国内电商零售行业项目，现在的是德国某制造生产行业的 IOT 项目。<br>　　当你只参与了一个项目的时候，更多的是接受；当开始不同的项目时候，开始学会比较，但是层次还是不够抽象层面还不够高。<br>　　最近刚好有一个 Team Event 机会，来对目前的项目组进行回顾与总结，在对不同的维度进行划分的过程中，可以清晰的理解不同项目采取不同的方法和措施的背景与原因。</p><h2 id="三、内容"><a href="#三、内容" class="headerlink" title="三、内容"></a>三、内容</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>　　首先提前将日常的 Team Event 按照下述的维度进行横向纵向划分：<br>　　<img src="/imgs/team-event.png" width="800" height="600"></p><h3 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2. 讲解"></a>2. 讲解</h3><p>　　向 Team 讲解各个维度，不同的颜色代表不同的维度。</p><h3 id="3-头脑风暴"><a href="#3-头脑风暴" class="headerlink" title="3. 头脑风暴"></a>3. 头脑风暴</h3><p>　　对有疑问的部分，写在便利贴上面，然后贴到对应的 item 处。该过程需要 Time-Box。</p><h3 id="4-分类-amp-解释"><a href="#4-分类-amp-解释" class="headerlink" title="4. 分类 &amp; 解释"></a>4. 分类 &amp; 解释</h3><p>　　Go through 所有的便利贴，并进行快速的分类，遇到不明确的，可以让贴该便利贴的人解释一下。</p><h3 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h3><p>　　如果讨论所有的便利贴，肯定花费大家不少的时间，所以列优先级就非常重要。让大家投票选出优先级最高的3-5个。根据每个类别上的票数决定下一个阶段要讨论的item。</p><h3 id="6-讨论"><a href="#6-讨论" class="headerlink" title="6. 讨论"></a>6. 讨论</h3><p>　　从票数最多的 item 开始讨论，并且Time-Box十分钟，时间到的时候，如果还没有讨论完，就征询一下大家是否还要继续10分钟讨论。</p><h3 id="7-Actions"><a href="#7-Actions" class="headerlink" title="7. Actions"></a>7. Actions</h3><p>　　当讨论的时候，描述了问题，大家要积极的想解决办法，帮助提高或者改进，同时将 action 分配给相关的人。</p><p>Notes:</p><ul><li>平常的工作全部以 Pairing 进行，进一步解释了该项目目前没有 QA，没有 code review。</li><li>采用 T-shirt 方式而不是斐波那契数列进行估点</li><li>虽然物理墙和 Jira 电子墙都有，但是主要以物理墙为主。（之前的 Team 以电子墙为主，主要是因为 Team 是分布式的）</li><li>Show &amp; Tell这个活动的发生，不仅仅是内部的技术分享，还包括业务分享以及平常遇到比较好的技术小问题分享。（主要是没有 code review，所以可以分享的全部在这个里面）</li><li>物理墙上有一栏专门是 Inbox，每天早上都会过一遍，里面包括你任何想说的，比如你做的一些事情可能会潜在的影响，或者你的休假计划等等。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　在第一个项目时候，团队定期进行讨论，当时笔者参与很少，私下觉得这种会议很浪费时间，直到现在全程当场参与，才觉得效果颇佳。<br>　　在第二个项目时候，团队也有定期讨论，逐个逐个的说出自己某段时间的感受，但是形式不是非常 formal，所以当时笔者只是感受，并没有联系到一起。<br>　　现在第三个项目，特此记录一下该 Team event 做法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　处于Team之中，也许你知道如何去做一件事，也许你习以为常，觉得这就是常态。&lt;br&gt;　　当你猛不丁地回过头看时，你会发现，这些流程与步骤是一次次的尝试与实践之后，最适合 Team 的方法措施；&lt;br&gt;　　抑或着，当你尝试给新人或者其他组的人描述时候，你会恍然大悟，为什么有些事情没有做，为什么有些事情会是这样发生的。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Team" scheme="http://yoursite.com/tags/Team/"/>
    
  </entry>
  
  <entry>
    <title>Life in Germany 开篇</title>
    <link href="http://yoursite.com/2018/03/31/Life-in-Germany-%E5%BC%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/03/31/Life-in-Germany-开篇/</id>
    <published>2018-03-31T13:51:01.000Z</published>
    <updated>2018-07-10T15:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>回想过往，时光匆匆，转眼就是本命年。<br>追忆过去，平淡如水，光阴葱茏不失真。 </p><a id="more"></a><p>毕业之后，去过印度，五周，别具特色的TWU生活；<br>启程工作，出差成都，一年，刻进记忆的初始工作；<br>项目衔接，旅游泰国，七天，心情畅快的海边美景；<br>正式回归，融入武汉，一年，OTR紧迫的工作；<br>海外深造，来到德国，一年，体会不一样的LTA工作；<br>德国期间，开启旅行，一周，三个国家三个城市的旅行…</p><p>未来，不知道会怎么样；<br>但是，未知的世界更令人向往。</p><h3 id="关于准备"><a href="#关于准备" class="headerlink" title="关于准备"></a>关于准备</h3><h3 id="关于期待"><a href="#关于期待" class="headerlink" title="关于期待"></a>关于期待</h3><h3 id="关于交流"><a href="#关于交流" class="headerlink" title="关于交流"></a>关于交流</h3><h3 id="关于饮食"><a href="#关于饮食" class="headerlink" title="关于饮食"></a>关于饮食</h3><h3 id="关于住宿"><a href="#关于住宿" class="headerlink" title="关于住宿"></a>关于住宿</h3><h3 id="关于交通"><a href="#关于交通" class="headerlink" title="关于交通"></a>关于交通</h3><h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><h3 id="关于感受"><a href="#关于感受" class="headerlink" title="关于感受"></a>关于感受</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回想过往，时光匆匆，转眼就是本命年。&lt;br&gt;追忆过去，平淡如水，光阴葱茏不失真。 &lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Germany" scheme="http://yoursite.com/tags/Germany/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Jenkins pipeline Job构建、上传、部署</title>
    <link href="http://yoursite.com/2018/01/13/Nexus-Jenkins-pipeline-Job%E6%9E%84%E5%BB%BA%E3%80%81%E4%B8%8A%E4%BC%A0%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/01/13/Nexus-Jenkins-pipeline-Job构建、上传、部署/</id>
    <published>2018-01-13T12:56:23.000Z</published>
    <updated>2018-05-27T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　上一篇里面，在Jenkins容器里面，创建了一个简单的gradle job，进行构建产物。<br>本篇则构建多个stage：构建、上传、形成一个stage view。</p><a id="more"></a><p>　　本打算把build docker image，publish docker image的stage加上，但是中间出现了一些问题，主要是在jenkins的docker容器里运行docker，就形成了docker in docker 的局面。这部分问题查阅了相关的资料，没找到非常满意的做法，因此暂不在本文涉及。</p><p>　　下面暂时列举一些参考链接：</p><ul><li>[katacoda上关于Jenkins - Building Docker Images using Jenkins的实验课程]<br>(<a href="https://www.katacoda.com/courses/jenkins/build-docker-images" target="_blank" rel="noopener">https://www.katacoda.com/courses/jenkins/build-docker-images</a>)</li><li><a href="http://container-solutions.com/running-docker-in-jenkins-in-docker/" target="_blank" rel="noopener">Running Docker in Jenkins (in Docker)</a></li><li><a href="https://getintodevops.com/blog/the-simple-way-to-run-docker-in-docker-for-ci" target="_blank" rel="noopener">The simple way to run Docker-in-Docker for CI</a></li></ul><h2 id="二、安装Pipeline插件"><a href="#二、安装Pipeline插件" class="headerlink" title="二、安装Pipeline插件"></a>二、安装Pipeline插件</h2><p>　　如果你是新建一个jenkins容器，只需要在安装的时候勾选Pipeline插件即可。</p><p>　　如果你是已经存在的jenkins容器，则进入Jenkins -&gt; Plugin Manager -&gt; <a href="http://localhost:51001/pluginManager/available" target="_blank" rel="noopener">available</a>，找到Pipeline插件，选择install without restart等待安装完成即可。</p><h2 id="三、新建pipeline工程"><a href="#三、新建pipeline工程" class="headerlink" title="三、新建pipeline工程"></a>三、新建pipeline工程</h2><h3 id="1-新建item，选择pipeline工程"><a href="#1-新建item，选择pipeline工程" class="headerlink" title="1. 新建item，选择pipeline工程"></a>1. 新建item，选择pipeline工程</h3><p>　　<img src="/imgs/nexus-jenkins-new-item-pipeline.png" width="800" height="400"></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>General，去一个项目名称</li><li>Pipeline，选择Pipeline Script；在Script里面写下如下脚本：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   stage <span class="string">'Checkout'</span></span><br><span class="line">   git([ur<span class="variable">l:</span> <span class="string">'https://github.com/zhangyuyu/Simple-web.git'</span>, branch: <span class="string">'master'</span>])</span><br><span class="line">   </span><br><span class="line">   stage <span class="string">'Build'</span></span><br><span class="line">   <span class="keyword">sh</span> <span class="string">'./gradlew clean build'</span></span><br><span class="line">   </span><br><span class="line">   stage <span class="string">'Upload'</span></span><br><span class="line">   <span class="keyword">sh</span> <span class="string">'./gradlew uploadArchives'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Build-Now"><a href="#3-Build-Now" class="headerlink" title="3. Build Now"></a>3. Build Now</h3><p>　　配置完成之后，即可手动触发了。<br>　　<img src="/imgs/nexus-jenkins-pipeline-build.png" width="500" height="300"></p><h2 id="四、jenkins中涉及到的术语"><a href="#四、jenkins中涉及到的术语" class="headerlink" title="四、jenkins中涉及到的术语"></a>四、jenkins中涉及到的术语</h2><ol><li><p>Master<br>　　Master是Jenkins安装和运行的地方，它负责解析job脚本，处理任务，调度计算资源。</p></li><li><p>Agent<br>　　Agent是负责处理从Master分发的任务。</p></li><li><p>Executor<br>　　Executor是执行任务的计算资源，它可以在Master或者Agent上运行。多个Executor也可以合作执行一些任务。</p></li><li><p>Job 任务<br>　　job用来定义具体的构建过程。一个新的job及时一个新的item（这一点区别于另外一个CI CD工具——GO CD，在Go里面，一个job只是一个pipeline的一个步骤）</p></li><li><p>Groovy<br>　　Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy代码能够与Java代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy可以使用其他Java语言编写的库。Jenkins用Groovy作为DSL。</p></li><li><p>Pipeline<br>　　流水线即代码（Pipeline as Code），通过编码而非配置持续集成/持续交付（CI/CD）运行工具的方式定义部署。流水线使得部署是可重现、可重复的。<br>　　流水线包括节点（Node）、阶段（Stage）和步骤（Step）。流水线执行在节点上。节点是Jenkins安装的一部分。流水线通常包含多个阶段。一个阶段包含多个步骤。</p><ul><li><p>node在Pipeline中的context中，node是job运行的地方。 node会给job创建一个工作空间。工作空间就是一个文件目录，这是为了避免跟资源相关的处理互相产生影响。工作空间是node创建的，在node里的所有step都执行完毕后会自动删除。</p></li><li><p>stage阶段，stage是一个任务执行过程的独立的并且唯一的逻辑块，Pipeline定义在语法上就是由一系列的stage组成的。 每一个stage逻辑都包含一个或多个step。</p></li><li><p>step步骤，一个step是整个流程中的一系列事情中的一个独立的任务，step是用来告诉Jenkins如何做。</p></li></ul></li><li><p>Jenkinfile<br>　　Jenkins支持创建流水线。它使用一种基于Groovy的流水线领域特定语言（Pipeline DSL）的简单脚。而这些脚本，通常名字叫Jenkinsfile。它定义了一些根据指定参数执行简单或复杂的任务的步骤。流水线创建好后，可以用来构建代码，或者编排从代码提交到交付过程中所需的工作。Jenkins中的Jenkinsfile有点类似Docker中的Dockfile的感觉。</p></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章只是基础的记录了一下运用jenkins构建pipeline工程的做法，关于docker的复杂步骤，以后将会更新。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/wzy5223/p/5554935.html" target="_blank" rel="noopener">试用Jenkins 2 的 Pipeline 项目</a></li><li><a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/" target="_blank" rel="noopener">Using a Jenkinsfile</a></li><li><a href="http://dockone.io/article/2594" target="_blank" rel="noopener">Jenkins与Docker的持续集成实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　上一篇里面，在Jenkins容器里面，创建了一个简单的gradle job，进行构建产物。&lt;br&gt;本篇则构建多个stage：构建、上传、形成一个stage view。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - 构建jenkins容器、配置gradle job从nexus获取依赖</title>
    <link href="http://yoursite.com/2018/01/12/Nexus-%E6%9E%84%E5%BB%BAjenkins%E5%AE%B9%E5%99%A8%E3%80%81%E9%85%8D%E7%BD%AEgradle-job%E4%BB%8Enexus%E8%8E%B7%E5%8F%96%E4%BE%9D%E8%B5%96/"/>
    <id>http://yoursite.com/2018/01/12/Nexus-构建jenkins容器、配置gradle-job从nexus获取依赖/</id>
    <published>2018-01-12T11:04:13.000Z</published>
    <updated>2018-05-27T09:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面都是在手动的构建、上传，那么接下来我们会熟悉持续集成与持续交付的相关过程：利用jenkins生成并上传构建产物、构建并上传应用程序的docker image以及部署应用。<br>　　本篇文章主要是先构建一个jenkins容器，然后基本实现利用jenkins生成构建产物。<br><a id="more"></a></p><h2 id="二、构建jenkins容器"><a href="#二、构建jenkins容器" class="headerlink" title="二、构建jenkins容器"></a>二、构建jenkins容器</h2><h3 id="1-通过nexus获取jenkins-jenkins-lts镜像"><a href="#1-通过nexus获取jenkins-jenkins-lts镜像" class="headerlink" title="1. 通过nexus获取jenkins/jenkins:lts镜像"></a>1. 通过nexus获取jenkins/jenkins:lts镜像</h3><h4 id="1-1-启动nexus-container"><a href="#1-1-启动nexus-container" class="headerlink" title="1.1 启动nexus container"></a>1.1 启动nexus container</h4><p>　　创建container的部分，可以参考前文<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">Nexus - Sonatype Nexus搭建maven私服</a>。<br>启动nexus container，可直接在docker for mac里面，点击start即可。</p><h4 id="1-2-获取镜像"><a href="#1-2-获取镜像" class="headerlink" title="1.2 获取镜像"></a>1.2 获取镜像</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull <span class="string">localhost:</span><span class="number">50000</span><span class="regexp">/jenkins/</span><span class="string">jenkins:</span>lts</span><br></pre></td></tr></table></figure><h4 id="1-3-运行容器"><a href="#1-3-运行容器" class="headerlink" title="1.3 运行容器"></a>1.3 运行容器</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name jenkins-container -p <span class="number">51001</span>:<span class="number">8080</span> -p <span class="number">51002</span>:<span class="number">50000</span> -v <span class="regexp">~/Documents/</span><span class="string">jenkins_home:</span><span class="regexp">/var/</span>jenkins_home <span class="string">localhost:</span><span class="number">50000</span><span class="regexp">/jenkins/</span><span class="string">jenkins:</span>lts</span><br></pre></td></tr></table></figure><h4 id="1-4-初始化jenkins配置"><a href="#1-4-初始化jenkins配置" class="headerlink" title="1.4 初始化jenkins配置"></a>1.4 初始化jenkins配置</h4><ul><li><p>上述运行容器的命令执行之后，会出现如下信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">97b8f494cbc340c4818083XXXXXXXXXX</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br></pre></td></tr></table></figure></li><li><p>kitematic的右侧也会出现如下页面：<br>　　<img src="/imgs/nexus-jenkins-kitematic-web-view.png" width="400" height="200"></p></li><li><p>浏览器访问<code>http://localhost:51001/</code>，输入上述命令行的password<br>　　<img src="/imgs/nexus-jenkins-unlock.png" width="400" height="200"></p></li><li><p>自定义安装插件<br>　　建议在下图中，选择“select plugins to install”，然后不要选择太多的插件，等到要用的时候再去安装。笔者在本次使用中只选择了<code>Git plugin</code>和<code>Gradle Plugin</code>。</p><ul><li>Git插件:用于从git仓库获取代码</li><li>Gradle插件:用于打包gradle项目</li></ul></li></ul><img src="/imgs/nexus-jenkins-customize-plugins.png" width="400" height="200"><ul><li>创建admin user<br>　　为了不忘记，笔者设置的是<code>admin/admin</code>。</li></ul><img src="/imgs/nexus-jenkins-admin-user.png" width="400" height="200"><ul><li>配置插件<br>　　依次选择Jenkins -&gt; Manage Jenkins -&gt; Global Tool Configuration：</li></ul><img src="/imgs/nexus-jenkins-configure-tools.png" width="800" height="500"><h2 id="三、配置gradle-job"><a href="#三、配置gradle-job" class="headerlink" title="三、配置gradle job"></a>三、配置gradle job</h2><h3 id="1-新建Freestyle-project"><a href="#1-新建Freestyle-project" class="headerlink" title="1. 新建Freestyle project"></a>1. 新建Freestyle project</h3><p>　　<img src="/imgs/nexus-jenkins-new-item.png" width="800" height="500"></p><h3 id="2-配置source-code-management"><a href="#2-配置source-code-management" class="headerlink" title="2. 配置source code management"></a>2. 配置source code management</h3><p>　　<img src="/imgs/nexus-jenkins-configure-source-code.png" width="800" height="500"></p><p>　　选择Git：</p><ul><li>Repository URL 填写你的项目的git地址</li><li>Credentials 选择你的git仓库的账户密码(如果没有，请点击Add)</li><li>Branches to build =&gt; Branch Specifier (blank for ‘any’) 这里填写构建项目时将要拉取的分支的名称 例如(*/master)</li></ul><h3 id="3-配置build"><a href="#3-配置build" class="headerlink" title="3. 配置build"></a>3. 配置build</h3><p>　　<img src="/imgs/nexus-jenkins-configure-build.png" width="800" height="500"></p><p>　　选择Invoke Gradle script：</p><ul><li>选择 Invoke Gradle , Gradle Version 中选择前面自动安装的gradle</li><li>Tasks 填写 <code>clean build</code></li><li>点击高级，勾上Force GRADLE_USER_HOME to use workspace</li></ul><h3 id="4-手动在容器里进行build"><a href="#4-手动在容器里进行build" class="headerlink" title="4. 手动在容器里进行build"></a>4. 手动在容器里进行build</h3><h4 id="4-1-登录到jenkins-container"><a href="#4-1-登录到jenkins-container" class="headerlink" title="4.1 登录到jenkins container"></a>4.1 登录到jenkins container</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bash -c <span class="string">"clear &amp;&amp; docker exec -it jenkins-container sh"</span></span></span><br></pre></td></tr></table></figure><h4 id="4-2-在jenkins-container里面"><a href="#4-2-在jenkins-container里面" class="headerlink" title="4.2 在jenkins container里面"></a>4.2 在jenkins container里面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/jenkins_home/workspace/simple-web</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./gradlew clean build</span></span><br></pre></td></tr></table></figure><h4 id="4-3-可能出现的错误"><a href="#4-3-可能出现的错误" class="headerlink" title="4.3 可能出现的错误"></a>4.3 可能出现的错误</h4><h5 id="4-3-1-具体错误"><a href="#4-3-1-具体错误" class="headerlink" title="4.3.1 具体错误"></a>4.3.1 具体错误</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew clean build</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed <span class="keyword">with</span> <span class="keyword">an</span> exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">'simple-web'</span>.</span><br><span class="line">&gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> all <span class="built_in">files</span> <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> org.akhikhl.gretty:gretty:<span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">     Required <span class="keyword">by</span>:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could <span class="keyword">not</span> <span class="built_in">resolve</span> org.akhikhl.gretty:gretty:<span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">         &gt; Could <span class="keyword">not</span> <span class="built_in">get</span> resource <span class="string">'http://localhost:32768/repository/maven-central/org/akhikhl/gretty/gretty/2.0.0/gretty-2.0.0.pom'</span>.</span><br><span class="line">            &gt; Could <span class="keyword">not</span> HEAD <span class="string">'http://localhost:32768/repository/maven-central/org/akhikhl/gretty/gretty/2.0.0/gretty-2.0.0.pom'</span>.</span><br><span class="line">               &gt; Connect <span class="built_in">to</span> localhost:<span class="number">32768</span> [localhost/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] failed: Connection refused (Connection refused)</span><br></pre></td></tr></table></figure><h5 id="4-3-2-原因"><a href="#4-3-2-原因" class="headerlink" title="4.3.2 原因"></a>4.3.2 原因</h5><p>　　由于应用simple-web的代码<code>gradle.properties</code>里面的nexus是localhost，而实际上期望的是我们自己搭建的nexus repo的地址，因此会报错，连接失败，下载不了依赖。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexusUrl=http:<span class="regexp">//</span>localhost:<span class="number">32768</span><span class="regexp">/repository/</span></span><br></pre></td></tr></table></figure></p><h5 id="4-3-3-解决办法"><a href="#4-3-3-解决办法" class="headerlink" title="4.3.3 解决办法"></a>4.3.3 解决办法</h5><p>　　这里先提供粗暴的直接解决办法，下文会自动化整个过程。一般docker之间的互连有如下三种方式：</p><ul><li>通过端口公开（port exposure）连接</li><li>将宿主机端口绑定（bind）至容器端口</li><li>通过链接（link）选项去连接两个容器</li></ul><p>　　对于第一种方式，由于我们的容器已经正在运行了，不好再次公开端口；对于第二种方式，应该是连接jenkins container -&gt; host -&gt; nexus container，但是nexus container已经将32768端口号和宿主机绑定，jenkins就无法再次绑定该端口；第三种方式可以一试。</p><h5 id="4-3-4-具体解决步骤"><a href="#4-3-4-具体解决步骤" class="headerlink" title="4.3.4 具体解决步骤"></a>4.3.4 具体解决步骤</h5><ul><li><p>先构建nexus3-container容器和jenkins-container的网络连接<br>用Docker for mac，在两个container的network设置处，都要配置Links：</p><img src="/imgs/nexus-jenkins-link-container.png" width="600" height="300"><p>之后登陆到<code>jenkins-container</code>，就可以ping通<code>nexus3-container</code>了。</p></li><li><p>将gradle.properties文件里的nexusUrl设置为<code>nexus3-container</code>的ip地址及端口号<code>510001</code>。</p></li></ul><p>　　上述方式缺点很明显，每次构建都要更改代码里的nexusUrl，依赖于一个动态ip配置；此外，用link必须要求容器是正在运行的，因此每次都必须先启动两个容器，再去配置link container。可以有几种解决方案，比如动态设置环境变量、比如设置静态子网ip（下文将讲述该方式）。</p><h3 id="5-通过jenkins-UI进行build"><a href="#5-通过jenkins-UI进行build" class="headerlink" title="5. 通过jenkins UI进行build"></a>5. 通过jenkins UI进行build</h3><p>　　点击左侧的<code>Build Now</code>，即可看到<code>Build History</code>里面有Build的次数和时间信息。点击进入，可看到详细的console构建信息：<br>　　<img src="/imgs/nexus-jenkins-build-console.png" width="800" height="550"></p><h2 id="四、自动化"><a href="#四、自动化" class="headerlink" title="四、自动化"></a>四、自动化</h2><h3 id="1-删除已有container"><a href="#1-删除已有container" class="headerlink" title="1. 删除已有container"></a>1. 删除已有container</h3><p>　　手动删除本地的nexus3-container和jenkins-container，不删除其对应的容器数据。</p><h3 id="2-创建docker-compose-yml"><a href="#2-创建docker-compose-yml" class="headerlink" title="2. 创建docker-compose.yml"></a>2. 创建docker-compose.yml</h3><p>　　下面的docker-compose文件基本是按照现有的容器配置进行编写的，唯一不同的是，增加了关于网络的部分：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">nexus-service</span>:</span><br><span class="line">    <span class="attribute">image</span>: sonatype/<span class="attribute">nexus3</span>:latest</span><br><span class="line">    <span class="attribute">container_name</span>: nexus3-container</span><br><span class="line">    <span class="attribute">hostname</span>: wanzi</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="string">"32768:8081"</span></span><br><span class="line">      - <span class="string">"50000:50000"</span></span><br><span class="line">      - <span class="string">"50001:50001"</span></span><br><span class="line">      - <span class="string">"50002:50002"</span></span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ~/Documents/Kitematic/nexus3-container/<span class="attribute">nexus-data</span>:/nexus-data</span><br><span class="line">    <span class="attribute">networks</span>:</span><br><span class="line">      <span class="attribute">nexus-net</span>:</span><br><span class="line">        <span class="attribute">ipv4_address</span>: <span class="number">172.16</span>.<span class="number">238.10</span></span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line"></span><br><span class="line">  <span class="attribute">jenkins-service</span>:</span><br><span class="line">    <span class="attribute">image</span>: <span class="attribute">localhost</span>:<span class="number">50000</span>/jenkins/<span class="attribute">jenkins</span>:lts</span><br><span class="line">    <span class="attribute">container_name</span>: jenkins-container</span><br><span class="line">    <span class="attribute">hostname</span>: wanzi</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ~/Documents/<span class="attribute">jenkins_home</span>:/var/jenkins_home</span><br><span class="line">    <span class="attribute">networks</span>:</span><br><span class="line">      <span class="attribute">nexus-net</span>:</span><br><span class="line">        <span class="attribute">ipv4_address</span>: <span class="number">172.16</span>.<span class="number">238.11</span></span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="string">"51001:8080"</span></span><br><span class="line">      - <span class="string">"51002:50000"</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - nexus-service</span><br><span class="line">    <span class="attribute">restart</span>: always</span><br><span class="line"></span><br><span class="line"><span class="attribute">networks</span>:</span><br><span class="line">  <span class="attribute">nexus-net</span>:</span><br><span class="line">    <span class="attribute">driver</span>: bridge</span><br><span class="line">    <span class="attribute">ipam</span>:</span><br><span class="line">      <span class="attribute">driver</span>: default</span><br><span class="line">      <span class="attribute">config</span>:</span><br><span class="line">        - <span class="attribute">subnet</span>: <span class="number">172.16</span>.<span class="number">238.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure></p><h4 id="4-更改nexusUrl"><a href="#4-更改nexusUrl" class="headerlink" title="4. 更改nexusUrl"></a>4. 更改nexusUrl</h4><ul><li><p>更改<code>simple-web</code>中<code>gradle.properties</code>文件的nexusUrl</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexusUrl=http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">8081</span><span class="regexp">/repository/</span></span><br></pre></td></tr></table></figure></li><li><p>然后push代码到github</p></li></ul><h3 id="3-依次启动nexus3-container和jenkins-container"><a href="#3-依次启动nexus3-container和jenkins-container" class="headerlink" title="3. 依次启动nexus3-container和jenkins-container"></a>3. 依次启动<code>nexus3-container</code>和<code>jenkins-container</code></h3><p>　　由于<code>jenkins-container</code>要依赖于从<code>nexus3-container</code>下载依赖，所以要先启动<code>nexus3-container</code>。<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up nexus-service</span></span><br></pre></td></tr></table></figure></p><p>　　然后启动<code>jenkins-container</code><br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up jenkins-service</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章是以jenkins搭建持续集成、持续交付应用的首篇，主要介绍了一些基本的操作。包括搭建jenkens容器，与前文的nexus环境进行结合，创建第一个gradle job构建产物。<br>　　接下来，会逐步搭建jenkins上其他的job。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.jdkhome.com/article/build-automation-by-git-jenkins-gradle-docker" target="_blank" rel="noopener">基于 git + jenkins + gradle + docker 搭建自动化集成环境</a></li><li><a href="https://deepzz.com/post/docker-compose-file.html" target="_blank" rel="noopener">如何对docker-compose配置静态ip</a></li><li><a href="http://dockone.io/article/1155" target="_blank" rel="noopener">Docker容器互联方法-篇一</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面都是在手动的构建、上传，那么接下来我们会熟悉持续集成与持续交付的相关过程：利用jenkins生成并上传构建产物、构建并上传应用程序的docker image以及部署应用。&lt;br&gt;　　本篇文章主要是先构建一个jenkins容器，然后基本实现利用jenkins生成构建产物。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - 构建并上传docker image至Sonatype Nexus</title>
    <link href="http://yoursite.com/2018/01/09/Nexus-%E6%9E%84%E5%BB%BA%E5%B9%B6%E4%B8%8A%E4%BC%A0docker-image%E8%87%B3Sonatype-Nexus/"/>
    <id>http://yoursite.com/2018/01/09/Nexus-构建并上传docker-image至Sonatype-Nexus/</id>
    <published>2018-01-09T13:11:20.000Z</published>
    <updated>2018-05-27T09:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　前面两篇文章<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">Nexus - Sonatype Nexus搭建maven私服</a>、<a href="http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/" target="_blank" rel="noopener">Nexus - Gradle打包上传至Sonatype Nexus</a>都是介绍maven相关的仓库，下载应用程序相关的依赖包，上传应用程序的构建产物。<br>本篇文章将介绍docker相关的仓库，下载docker镜像，上传自己构建的应用程序的docker镜像。<br>方便持续集成时候，能够直接从ci上获取应用程序镜像，进行部署。</p><a id="more"></a><h2 id="二、搭建Nexus-docker仓库"><a href="#二、搭建Nexus-docker仓库" class="headerlink" title="二、搭建Nexus docker仓库"></a>二、搭建Nexus docker仓库</h2><p>　　下面我们会：</p><ul><li>创建一个docker proxy仓库，用于代理Docker Hub</li><li>创建一个docker hosted仓库，用于管理我们自己构建的镜像</li><li>创建一个docker group仓库，用于对上面两个仓库暴露统一的URL。</li></ul><p>　　与此同时，我们会创建三个blob：docker-hub-blob、docker-local-blob、docker-blob分别对应上面的docker proxy、docker hosted、docker group仓库。（创建blob的步骤略）</p><h3 id="1-创建docker-proxy仓库"><a href="#1-创建docker-proxy仓库" class="headerlink" title="1. 创建docker proxy仓库"></a>1. 创建docker proxy仓库</h3><h4 id="1-1-各项配置"><a href="#1-1-各项配置" class="headerlink" title="1.1 各项配置"></a>1.1 各项配置</h4><ul><li><p>Repository Connectors<br>　　<img src="/imgs/nexus-docker-proxy-repository-connectors.png" width="600" height="250"></p></li><li><p>Docker Registry API Support<br>　　<img src="/imgs/nexus-docker-proxy-registry-api.png" width="600" height="250"></p></li></ul><blockquote><p>　　Generally V1 support is only needed for repository groups that will be used for command line-based searches, when any client side tools in use require V1 or when a upstream proxy repository requires V1. If you are unsure if your setup uses these or V1, it is recommended to activate V1 support as there should be no harm if it is not needed.</p></blockquote><p>　　此处Enable v1之后，会允许使用V1作为V2的fallback。将来，V2会替代V1，但是有些功能（比如docker search）在V2中暂时还没实现。如果你不确定是否要enable V1，那么推荐你激活这个选项，因为激活这个选项不会造成任何危害，但是某些情况下，不激活反而会造成一些错误。</p><ul><li><p>Proxy<br>　　<img src="/imgs/nexus-docker-proxy-proxy.png" width="600" height="250"></p></li><li><p>Storage<br>　　<img src="/imgs/nexus-docker-proxy-storage.png" width="600" height="250"></p></li></ul><h4 id="1-2-从远程docker-hub获取base-image-tomcat-8-0-jre8-alpine"><a href="#1-2-从远程docker-hub获取base-image-tomcat-8-0-jre8-alpine" class="headerlink" title="1.2 从远程docker hub获取base image tomcat:8.0-jre8-alpine"></a>1.2 从远程docker hub获取base image <code>tomcat:8.0-jre8-alpine</code></h4><h5 id="1-2-1-宿主机和nexus-docker-proxy仓库的认证"><a href="#1-2-1-宿主机和nexus-docker-proxy仓库的认证" class="headerlink" title="1.2.1 宿主机和nexus docker proxy仓库的认证"></a>1.2.1 宿主机和nexus docker proxy仓库的认证</h5><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:<span class="number">50002</span></span><br><span class="line"><span class="literal">WARNING</span>! Using <span class="comment">--password via the CLI is insecure. Use --password-stdin.</span></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>检查配置文件<code>~/.docker/config.json</code>：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"auths"</span>: &#123;</span><br><span class="line">        <span class="string">"localhost:50000"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"localhost:50001"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"localhost:50002"</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"HttpHeaders"</span>: &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Docker-Client/17.09.1-ce (darwin)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"credsStore"</span>: <span class="string">"osxkeychain"</span></span><br><span class="line">&#125;%</span><br></pre></td></tr></table></figure></p><h5 id="1-2-2-获取base-image"><a href="#1-2-2-获取base-image" class="headerlink" title="1.2.2 获取base image"></a>1.2.2 获取base image</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sonatype/nexus3     latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line"></span><br><span class="line">$ docker pull localhos<span class="variable">t:50000</span>/tomca<span class="variable">t:8</span>.<span class="number">0</span>-jre8-alpine</span><br><span class="line"><span class="number">8.0</span>-jre8-alpine: Pulling from tomcat</span><br><span class="line"><span class="number">2</span>fdfe1cd78c2: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">82630</span>fd6e5b<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">119</span>d364c885d: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">749</span>ddbaec87<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">801</span>c4e05625<span class="variable">b:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">08</span>b85d1fac84: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">668</span>b34e85733: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">859329</span>ae45ee: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:fc67c79796f2bf034f9af3cf20fd1e051b780c403c31b945850c7e061c899bd7</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> localhos<span class="variable">t:50000</span>/tomca<span class="variable">t:8</span>.<span class="number">0</span>-jre8-alpine</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sonatype/nexus3          latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line">localhos<span class="variable">t:50000</span>/tomcat   <span class="number">8.0</span>-jre8-alpine     <span class="number">5</span>b01f7b2f446        <span class="number">3</span> weeks ago         <span class="number">117</span>MB</span><br></pre></td></tr></table></figure><h5 id="1-2-3-查看nexus-docker-proxy-仓库"><a href="#1-2-3-查看nexus-docker-proxy-仓库" class="headerlink" title="1.2.3 查看nexus docker proxy 仓库"></a>1.2.3 查看nexus docker proxy 仓库</h5><p>　　<img src="/imgs/nexus-browse-docker-proxy.png" width="600" height="500"><br>　　可以看到<code>tomcat:8.0-jre8-alpine</code>在我们的docker proxy仓库里也存下来了。</p><h4 id="1-3-可能出现的错误"><a href="#1-3-可能出现的错误" class="headerlink" title="1.3 可能出现的错误"></a>1.3 可能出现的错误</h4><h5 id="1-3-1-getsockopt-connection-refused"><a href="#1-3-1-getsockopt-connection-refused" class="headerlink" title="1.3.1 getsockopt: connection refused"></a>1.3.1 getsockopt: connection refused</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Get http://localhost:50002/v2/: dial tcp [::1]:50000: getsockopt: connection refused</span><br></pre></td></tr></table></figure></li><li><p>原因：<br>　　nexus3-container端口号没有暴露给宿主机</p></li><li><p>解决办法<br>　　在Docker for mac的Configure Ports处暴露端口号50002（下图暴露了50000、500001、500002供下文所用）</p><img src="/imgs/nexus-docker-proxy-configure-port.png" width="500" height="250"></li></ul><h5 id="1-3-2-401-Unauthorized"><a href="#1-3-2-401-Unauthorized" class="headerlink" title="1.3.2. 401 Unauthorized"></a>1.3.2. 401 Unauthorized</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line"><span class="keyword">Error </span>response from daemon: login attempt to http://localhost:50002/v2/ failed with status: 401 Unauthorized</span><br></pre></td></tr></table></figure></li><li><p>解决办法：<br>　　上面的Repository Connectors配置里，一定要勾选Force basic authentication</p></li></ul><h5 id="1-3-3-http-server-gave-HTTP-response-to-HTTPS-client"><a href="#1-3-3-http-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="1.3.3. http: server gave HTTP response to HTTPS client"></a>1.3.3. http: server gave HTTP response to HTTPS client</h5><ul><li><p>具体错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -p admin123 localhost:50002</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Get https://localhost:50002/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure></li><li><p>原因：<br>　　宿主机上的Docker daemon应该用HTTP通信，而不是HTTPS。</p></li><li><p>解决办法<br>　　对于不同的操作系统，配置的方法不一样。</p></li></ul><p>　　对于Linux系统，应该在<code>/etc/docker/daemon.json</code>设置如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"localhost:50002"</span>,</span><br><span class="line">    <span class="string">"localhost:50001"</span>,</span><br><span class="line">    <span class="string">"localhost:50000"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"disable-legacy-registry"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　对于Windows or Mac，应该设置如下：<br>　　<img src="/imgs/nexus-docker-proxy-daemon.png" width="500" height="250"></p><h3 id="2-创建docker-hosted仓库"><a href="#2-创建docker-hosted仓库" class="headerlink" title="2. 创建docker hosted仓库"></a>2. 创建docker hosted仓库</h3><p>　　配置如下图所示：<br>　　<img src="/imgs/nexus-docker-hosted.png" width="600" height="600"></p><h3 id="3-创建docker-group仓库"><a href="#3-创建docker-group仓库" class="headerlink" title="3. 创建docker group仓库"></a>3. 创建docker group仓库</h3><p>　　配置如下图所示：<br>　　<img src="/imgs/nexus-docker-group.png" width="600" height="600"></p><h2 id="三、构建应用image上传至nexus"><a href="#三、构建应用image上传至nexus" class="headerlink" title="三、构建应用image上传至nexus"></a>三、构建应用image上传至nexus</h2><h3 id="1-构建应用image"><a href="#1-构建应用image" class="headerlink" title="1. 构建应用image"></a>1. 构建应用image</h3><h4 id="1-1-准备一个单独的文件夹，避免不必要的干扰"><a href="#1-1-准备一个单独的文件夹，避免不必要的干扰" class="headerlink" title="1.1 准备一个单独的文件夹，避免不必要的干扰"></a>1.1 准备一个单独的文件夹，避免不必要的干扰</h4><p>　　<code>mkdir docker</code></p><h4 id="1-2-准备材料Dockerfile和war包"><a href="#1-2-准备材料Dockerfile和war包" class="headerlink" title="1.2 准备材料Dockerfile和war包"></a>1.2 准备材料Dockerfile和war包</h4><ul><li>Dockerfile<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> localhost:<span class="number">50000</span>/tomcat:<span class="number">8.0</span>-jre8-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> yuzhang &lt;<span class="number">1580074674</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> simple-web-1.0.0.war /usr/<span class="built_in">local</span>/tomcat/webapps/</span></span><br></pre></td></tr></table></figure></li></ul><p>　　端口号<code>50000</code>是docker group的端口号，该端口号既包含了docker proxy的端口，也包含了docker hosted的端口。</p><ul><li>simple-web-1.0.0.war<br>　　<code>cp build/libs/simple-web-1.0.0.war docker/</code></li></ul><h4 id="1-3-构建镜像"><a href="#1-3-构建镜像" class="headerlink" title="1.3 构建镜像"></a>1.3 构建镜像</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t localhost:<span class="number">50001</span>/<span class="built_in">simple</span>-web:<span class="number">1.0</span><span class="number">.0</span> .</span><br><span class="line">ending build context to Docker daemon  <span class="number">22.53</span>kB</span><br><span class="line"><span class="keyword">Step</span> <span class="number">1</span>/<span class="number">3</span> : FROM localhost:<span class="number">50000</span>/tomcat:<span class="number">8.0</span>-jre8-alpine</span><br><span class="line"> ---&gt; <span class="number">5</span>b01f7b2f446</span><br><span class="line"><span class="keyword">Step</span> <span class="number">2</span>/<span class="number">3</span> : MAINTAINER yuzhang &lt;<span class="number">1580074674</span>@qq.com&gt;</span><br><span class="line"> ---&gt; Running <span class="built_in">in</span> <span class="number">9</span>eba56fa9840</span><br><span class="line"> ---&gt; <span class="number">966</span>ac719976a</span><br><span class="line">Removing intermediate container <span class="number">9</span>eba56fa9840</span><br><span class="line"><span class="keyword">Step</span> <span class="number">3</span>/<span class="number">3</span> : ADD <span class="built_in">simple</span>-web<span class="number">-1.0</span><span class="number">.0</span>.war /usr/local/tomcat/webapps/</span><br><span class="line"> ---&gt; <span class="number">6</span>d3159ba5d64</span><br><span class="line">Successfully built <span class="number">6</span>d3159ba5d64</span><br><span class="line">Successfully tagged <span class="built_in">simple</span>-web:<span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>　　这里的端口号只是为了待会上传时候，指定到docker hosted里面，因为group包含了两个端口。</p><h4 id="1-4-查看宿主机上镜像"><a href="#1-4-查看宿主机上镜像" class="headerlink" title="1.4 查看宿主机上镜像"></a>1.4 查看宿主机上镜像</h4><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">simple-web               1.0.0               6d3159ba5d64        20 seconds ago      117MB</span><br><span class="line">sonatype/nexus3          latest              0b6b1bc88ccb        7 days ago          484MB</span><br><span class="line">localhost:50000/tomcat   8.0-jre8-alpine     5b01f7b2f446        3 weeks ago         117MB</span><br><span class="line"></span><br><span class="line">$ docker history 6d3159ba5d64</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">6d3159ba5d64        41 seconds ago      /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> ADD file:1f503d2e5f794e3...   19.5kB</span><br><span class="line">966ac719976a        41 seconds ago      /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  MAINTAINER yuzhang &lt;158...   0B</span><br><span class="line">5b01f7b2f446        3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["catalina.sh" "run"]    0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  EXPOSE 8080/tcp              0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -e  &amp;&amp; nativeLines="$(catal...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c set -eux;   apk add --no-cache ...   20.9MB</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_ASC_URLS=htt...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_TGZ_URLS=htt...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_SHA1=d2446c1...   0B</span><br><span class="line">&lt;missing&gt;           3 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_VERSION=8.0.48    0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_MAJOR=8           0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c set -ex;  for key in $GPG_KEYS;...   124kB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV GPG_KEYS=05AB331109...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c apk add --no-cache gnupg             14.5MB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV LD_LIBRARY_PATH=/us...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV TOMCAT_NATIVE_LIBDI...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> WORKDIR /usr/local/tomcat     0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c mkdir -p "$CATALINA_HOME"            0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV PATH=/usr/local/tom...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV CATALINA_HOME=/usr/...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c set -x  &amp;&amp; apk add --no-cache  ...   77.8MB</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_ALPINE_VERSION...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_VERSION=8u151       0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV PATH=/usr/local/sbi...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV JAVA_HOME=/usr/lib/...   0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c &#123;   echo '#!/bin/sh';   echo 's...   87B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  ENV LANG=C.UTF-8             0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span>  CMD ["/bin/sh"]              0B</span><br><span class="line">&lt;missing&gt;           5 weeks ago         /bin/sh -c <span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">nop</span>)</span></span> ADD file:2b00f26f6004576...   4.14MB</span><br></pre></td></tr></table></figure><h4 id="1-4-确保镜像可用"><a href="#1-4-确保镜像可用" class="headerlink" title="1.4 确保镜像可用"></a>1.4 确保镜像可用</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -<span class="selector-tag">p</span> <span class="number">8090</span>:<span class="number">8080</span> --name dockerwar localhost:<span class="number">50001</span>/simple-web:<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap<span class="selector-class">.jar</span>:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.050</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server version:        Apache Tomcat/<span class="number">8.0</span>.<span class="number">48</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server built:          Nov <span class="number">30</span> <span class="number">2017</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">50</span> UTC</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Server number:         <span class="number">8.0</span>.<span class="number">48.0</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> OS Name:               Linux</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.052</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> OS Version:            <span class="number">4.9</span>.<span class="number">49</span>-moby</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Architecture:          amd64</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Java Home:             /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> JVM Version:           <span class="number">1.8</span>.<span class="number">0</span>_151-b12</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> JVM Vendor:            Oracle Corporation</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> CATALINA_BASE:         /usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.053</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> CATALINA_HOME:         /usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.util</span><span class="selector-class">.logging</span><span class="selector-class">.config</span><span class="selector-class">.file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.util</span><span class="selector-class">.logging</span><span class="selector-class">.manager</span>=org<span class="selector-class">.apache</span><span class="selector-class">.juli</span><span class="selector-class">.ClassLoaderLogManager</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djdk<span class="selector-class">.tls</span><span class="selector-class">.ephemeralDHKeySize</span>=<span class="number">2048</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.054</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.protocol</span><span class="selector-class">.handler</span><span class="selector-class">.pkgs</span>=org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.webresources</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dignore<span class="selector-class">.endorsed</span><span class="selector-class">.dirs</span>=</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dcatalina.base=/usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Dcatalina.home=/usr/local/tomcat</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.VersionLoggerListener</span><span class="selector-class">.log</span> Command line argument: -Djava<span class="selector-class">.io</span><span class="selector-class">.tmpdir</span>=/usr/local/tomcat/temp</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.lifecycleEvent</span> Loaded APR based Apache Tomcat Native library <span class="number">1.2</span>.<span class="number">16</span> using APR version <span class="number">1.6</span>.<span class="number">3</span>.</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.055</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.lifecycleEvent</span> APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.058</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.AprLifecycleListener</span><span class="selector-class">.initializeSSL</span> OpenSSL successfully initialized (OpenSSL <span class="number">1.0</span>.<span class="number">2</span>m  <span class="number">2</span> Nov <span class="number">2017</span>)</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.140</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.init</span> Initializing ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.147</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.init</span> Initializing ProtocolHandler [<span class="string">"ajp-apr-8009"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.148</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.Catalina</span><span class="selector-class">.load</span> Initialization processed <span class="keyword">in</span> <span class="number">387</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.165</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardService</span><span class="selector-class">.startInternal</span> Starting service Catalina</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.165</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardEngine</span><span class="selector-class">.startInternal</span> Starting Servlet Engine: Apache Tomcat/<span class="number">8.0</span>.<span class="number">48</span></span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.201</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployWAR</span> Deploying web application archive /usr/local/tomcat/webapps/simple-web-<span class="number">1.0</span>.<span class="number">0</span>.war</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.450</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.jasper</span><span class="selector-class">.servlet</span><span class="selector-class">.TldScanner</span><span class="selector-class">.scanJars</span> At least one JAR was scanned <span class="keyword">for</span> TLDs yet contained no TLDs. Enable debug logging <span class="keyword">for</span> this logger <span class="keyword">for</span> <span class="selector-tag">a</span> complete list of JARs that were scanned but no TLDs were found <span class="keyword">in</span> them. Skipping unneeded JARs during scanning can improve startup <span class="selector-tag">time</span> and JSP compilation <span class="selector-tag">time</span>.</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.478</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployWAR</span> Deployment of web application archive /usr/local/tomcat/webapps/simple-web-<span class="number">1.0</span>.<span class="number">0</span><span class="selector-class">.war</span> has finished <span class="keyword">in</span> <span class="number">277</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.480</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/manager</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.511</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/manager has finished <span class="keyword">in</span> <span class="number">31</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.511</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/examples</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.671</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/examples has finished <span class="keyword">in</span> <span class="number">160</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.672</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/docs</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.683</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/docs has finished <span class="keyword">in</span> <span class="number">11</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.683</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/ROOT</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.709</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/ROOT has finished <span class="keyword">in</span> <span class="number">26</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.709</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deploying web application directory /usr/local/tomcat/webapps/host-manager</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.726</span> INFO [localhost-startStop-<span class="number">1</span>] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.HostConfig</span><span class="selector-class">.deployDirectory</span> Deployment of web application directory /usr/local/tomcat/webapps/host-manager has finished <span class="keyword">in</span> <span class="number">17</span> ms</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.729</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.start</span> Starting ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.738</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span><span class="selector-class">.start</span> Starting ProtocolHandler [<span class="string">"ajp-apr-8009"</span>]</span><br><span class="line"><span class="number">10</span>-Jan-<span class="number">2018</span> <span class="number">06</span>:<span class="number">57</span>:<span class="number">07.741</span> INFO [main] org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.Catalina</span><span class="selector-class">.start</span> Server startup <span class="keyword">in</span> <span class="number">592</span> ms</span><br></pre></td></tr></table></figure><p>　　浏览器访问<code>http://localhost:8090/simple-web-1.0.0/</code>，可以看到<code>hello world</code>出现。</p><ul><li><p>直接访问<code>http://localhost:8090/</code>，可以看到tomcat的页面，但是密码不确定。<br>可以直接登录到容器中查看<code>/usr/local/tomcat/conf/tomcat-users.xml</code>的配置</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it dockerwar /bin/bash</span><br><span class="line">bash-<span class="number">4.4</span><span class="comment"># ls</span></span><br><span class="line">LICENSE         RELEASE-NOTES   bin             <span class="keyword">include</span>         logs            temp            work</span><br><span class="line">NOTICE          RUNNING.txt     conf            <span class="class"><span class="keyword">lib</span>             <span class="title">native</span>-<span class="title">jni</span>-<span class="title">lib</span>  <span class="title">webapps</span></span></span><br><span class="line">$ docker exec -it dockerwar /bin/bash</span><br><span class="line">bash-<span class="number">4.4</span><span class="comment"># ls</span></span><br><span class="line">LICENSE         RELEASE-NOTES   bin             <span class="keyword">include</span>         logs            temp            work</span><br><span class="line">NOTICE          RUNNING.txt     conf            <span class="class"><span class="keyword">lib</span>             <span class="title">native</span>-<span class="title">jni</span>-<span class="title">lib</span>  <span class="title">webapps</span></span></span><br></pre></td></tr></table></figure></li><li><p>上述应用的二级路由是<code>simple-web-1.0.0</code>，也可以从容器中看出来:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="number">-4.4</span># cd webapps/</span><br><span class="line">bash<span class="number">-4.4</span># ls</span><br><span class="line">ROOT                  docs                  examples              host-manager          manager               simple-web<span class="number">-1.0</span><span class="number">.0</span>      simple-web<span class="number">-1.0</span><span class="number">.0</span>.war</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-上传至nexus-local仓库"><a href="#2-上传至nexus-local仓库" class="headerlink" title="2. 上传至nexus local仓库"></a>2. 上传至nexus local仓库</h3><h4 id="2-1-上传"><a href="#2-1-上传" class="headerlink" title="2.1 上传"></a>2.1 上传</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="string">localhost:</span><span class="number">50001</span>/simple-<span class="string">web:</span><span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="2-2-查看docker-hosted仓库"><a href="#2-2-查看docker-hosted仓库" class="headerlink" title="2.2 查看docker hosted仓库"></a>2.2 查看<a href="http://localhost:32768/#browse/browse:docker-local" target="_blank" rel="noopener">docker hosted</a>仓库</h4><p>　　下图，可看到上传的simple-web应用的docker镜像了：<br>　　<img src="/imgs/nexus-browse-docker-local.png" width="600" height="500"></p><h4 id="2-3-查看docker-group仓库"><a href="#2-3-查看docker-group仓库" class="headerlink" title="2.3 查看docker group仓库"></a>2.3 查看<a href="http://localhost:32768/#browse/browse:docker-group" target="_blank" rel="noopener">docker group</a>仓库</h4><p>　　下图，可看到之前proxy中的上传的tomcat:8.0-jre8-alpine镜像，以及我们自己构建的simple-web应用的docker镜像了：<br>　　<img src="/imgs/nexus-browse-docker-group.png" width="600" height="500"></p><h4 id="2-4-删除本地镜像，从docker-hosted仓库获取镜像"><a href="#2-4-删除本地镜像，从docker-hosted仓库获取镜像" class="headerlink" title="2.4 删除本地镜像，从docker hosted仓库获取镜像"></a>2.4 删除本地镜像，从docker hosted仓库获取镜像</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull localhos<span class="variable">t:50001</span>/simple-we<span class="variable">b:1</span>.<span class="number">0.0</span></span><br><span class="line"><span class="number">1.0</span>.<span class="number">0</span>: Pulling from simple-web</span><br><span class="line"><span class="number">2</span>fdfe1cd78c2: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">82630</span>fd6e5b<span class="variable">a:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">119</span>d364c885d: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">749</span>ddbaec87<span class="variable">a:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">801</span>c4e05625<span class="variable">b:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">08</span>b85d1fac84: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">668</span>b34e85733: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">859329</span>ae45ee: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">46</span>f4c89e382c: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:c99901dc39278d97cf33e9dbe0af9a95d3d6b081884a16c0f9c94649308f0b5c</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> localhos<span class="variable">t:50001</span>/simple-we<span class="variable">b:1</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">localhos<span class="variable">t:50001</span>/simple-web   <span class="number">1.0</span>.<span class="number">0</span>               <span class="number">326</span>e5af13176        <span class="number">6</span> hours ago         <span class="number">117</span>MB</span><br><span class="line">sonatype/nexus3              latest              <span class="number">0</span>b6b1bc88ccb        <span class="number">7</span> days ago          <span class="number">484</span>MB</span><br><span class="line">localhos<span class="variable">t:50000</span>/tomcat       <span class="number">8.0</span>-jre8-alpine     <span class="number">5</span>b01f7b2f446        <span class="number">3</span> weeks ago         <span class="number">117</span>MB</span><br></pre></td></tr></table></figure><h3 id="3-用shell脚本简化过程"><a href="#3-用shell脚本简化过程" class="headerlink" title="3. 用shell脚本简化过程"></a>3. 用shell脚本简化过程</h3><h4 id="3-1-编写shell脚本"><a href="#3-1-编写shell脚本" class="headerlink" title="3.1 编写shell脚本"></a>3.1 编写shell脚本</h4><p>　　将上述手动过程写在如下shell脚本中，其中包含了：生成war包、准备构建镜像材料、构建镜像、上传镜像、删除本地构建等内容：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_HOSTED_REPO=localhost:50001</span><br><span class="line"></span><br><span class="line">./gradlew clean build</span><br><span class="line"></span><br><span class="line"><span class="keyword">mkdir</span> docker</span><br><span class="line"></span><br><span class="line">cp build/libs/simple-web-1.0.0.war docker/</span><br><span class="line"></span><br><span class="line">cp Dockerfile docker/</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> docker</span><br><span class="line"></span><br><span class="line">docker login -<span class="keyword">u</span> admin -p admin123 <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span></span><br><span class="line"></span><br><span class="line">docker build -t <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0 .</span><br><span class="line"></span><br><span class="line">docker push <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0</span><br><span class="line"></span><br><span class="line">docker rmi <span class="variable">$&#123;DOCKER_HOSTED_REPO&#125;</span>/simple-web:1.0.0</span><br><span class="line"></span><br><span class="line"><span class="keyword">rm</span> -rf docker/</span><br><span class="line"></span><br><span class="line"><span class="keyword">rm</span> -rf build/</span><br></pre></td></tr></table></figure></p><h4 id="3-2-更改执行权限"><a href="#3-2-更改执行权限" class="headerlink" title="3.2 更改执行权限"></a>3.2 更改执行权限</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">777</span> <span class="keyword">go</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="3-3-执行脚本，进行测试"><a href="#3-3-执行脚本，进行测试" class="headerlink" title="3.3 执行脚本，进行测试"></a>3.3 执行脚本，进行测试</h4><p>　　执行脚本之前，可删除本地的程序构建产物、本地的应用程序docker镜像、远程的应用程序docker镜像。然后执行脚本之后，再次查看nexus hosted仓库是否有应用程序的docker镜像。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ./go.sh</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> <span class="number">0</span>s</span><br><span class="line"><span class="number">3</span> actionable <span class="string">tasks:</span> <span class="number">2</span> executed, <span class="number">1</span> up-to-date</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Login Succeeded</span><br><span class="line">Sending build context to Docker daemon  <span class="number">22.53</span>kB</span><br><span class="line">Step <span class="number">1</span><span class="regexp">/3 : FROM localhost:50000/</span><span class="string">tomcat:</span><span class="number">8.0</span>-jre8-alpine</span><br><span class="line"> ---&gt; <span class="number">5</span>b01f7b2f446</span><br><span class="line">Step <span class="number">2</span>/<span class="number">3</span> : MAINTAINER yuzhang &lt;<span class="number">1580074674</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; fdcb287ed111</span><br><span class="line">Step <span class="number">3</span><span class="regexp">/3 : ADD simple-web-1.0.0.war /</span>usr<span class="regexp">/local/</span>tomcat<span class="regexp">/webapps/</span></span><br><span class="line"> ---&gt; <span class="number">29</span>f5f308b416</span><br><span class="line">Successfully built <span class="number">29</span>f5f308b416</span><br><span class="line">Successfully tagged <span class="string">localhost:</span><span class="number">50001</span>/simple-<span class="string">web:</span><span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">The push refers to a repository [<span class="string">localhost:</span><span class="number">50001</span>/simple-web]</span><br><span class="line"><span class="number">8</span><span class="string">ccf53e87baa:</span> Pushed</span><br><span class="line"><span class="number">8</span><span class="string">d6f8df9c63b:</span> Pushed</span><br><span class="line"><span class="string">dab1340429ea:</span> Pushed</span><br><span class="line"><span class="string">dd97dc3a613e:</span> Pushed</span><br><span class="line"><span class="number">63680</span><span class="string">cd47754:</span> Pushed</span><br><span class="line"><span class="string">efe8908e7b83:</span> Pushed</span><br><span class="line"><span class="number">25</span><span class="string">baa3ba1903:</span> Pushed</span><br><span class="line"><span class="number">5</span><span class="string">b1e27e74327:</span> Pushed</span><br><span class="line"><span class="number">04</span><span class="string">a094fe844e:</span> Pushed</span><br><span class="line"><span class="number">1.0</span><span class="number">.0</span>: <span class="string">digest:</span> <span class="string">sha256:</span>a386f1897cade1c13919fb8236d3b9a5f5c9b6ba6122f526bd137a5e1395353e <span class="string">size:</span> <span class="number">2204</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇文章主要是利用nexus构建了docker相关的仓库（docker proxy、docker hosted、docker hosted仓库）。通过docker proxy仓库代理Docker Hub，从远程下载base image；基于base image构建自己的应用程序镜像；最后将应用程序镜像push到private的docker hosted仓库中。<br>　　根据构建产物构建镜像、上传镜像的过程，可以用一个shell脚本完成，详细可以参考Github代码。<br>　　Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://codeomitted.com/deploy-war-file-to-docker-image/" target="_blank" rel="noopener">Deploy war file to docker image</a></li><li><a href="http://www.sonatype.org/nexus/2017/02/16/using-nexus-3-as-your-repository-part-3-docker-images/" target="_blank" rel="noopener">Using Nexus 3 as Your Repository – Part 3: Docker Images</a></li><li><a href="https://help.sonatype.com/display/NXRM3/Proxy+Repository+for+Docker" target="_blank" rel="noopener">Proxy Repository for Docker</a></li><li><a href="http://jmkhael.io/building-and-publishing-a-docker-image/" target="_blank" rel="noopener">Building and publishing a Docker image</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　前面两篇文章&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nexus - Sonatype Nexus搭建maven私服&lt;/a&gt;、&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nexus - Gradle打包上传至Sonatype Nexus&lt;/a&gt;都是介绍maven相关的仓库，下载应用程序相关的依赖包，上传应用程序的构建产物。&lt;br&gt;本篇文章将介绍docker相关的仓库，下载docker镜像，上传自己构建的应用程序的docker镜像。&lt;br&gt;方便持续集成时候，能够直接从ci上获取应用程序镜像，进行部署。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Gradle打包上传至Sonatype Nexus</title>
    <link href="http://yoursite.com/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/"/>
    <id>http://yoursite.com/2018/01/08/Nexus-Gradle打包上传至SonatypeNexus/</id>
    <published>2018-01-08T17:48:36.000Z</published>
    <updated>2018-05-27T09:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">前一篇</a>介绍了用nexus搭建一个maven私服，并尝试创建了一个proxy仓库。本篇将主要创建一个hosted仓库，上传gradle生成的构建产物。</p><a id="more"></a><h2 id="二、搭建Nexus-hosted-仓库"><a href="#二、搭建Nexus-hosted-仓库" class="headerlink" title="二、搭建Nexus hosted 仓库"></a>二、搭建Nexus hosted 仓库</h2><h3 id="1-创建单独的blob"><a href="#1-创建单独的blob" class="headerlink" title="1. 创建单独的blob"></a>1. 创建单独的blob</h3><p>　　<img src="/imgs/nexus-create-local-blob.png" width="500" height="250"></p><p>　　完成创建之后，可以在宿主机上看到路径<code>nexus-data/blobs/mvn-local-blob</code>的存在。</p><h3 id="2-创建hosted仓库"><a href="#2-创建hosted仓库" class="headerlink" title="2. 创建hosted仓库"></a>2. 创建hosted仓库</h3><p>　　选择maven2(hosted)的仓库，进行创建：<br>　　<img src="/imgs/nexus-create-maven2-hosted.png" width="500" height="800"></p><p>　　注意选择：</p><ul><li>version policy：Mixed（此处笔者并不进行release和snapshot的区分，所以选择Mixed）</li><li>blob store：刚刚创建的mvn-local-blob</li><li>deployment policy：allow redeploy</li></ul><h2 id="三、配置gradle"><a href="#三、配置gradle" class="headerlink" title="三、配置gradle"></a>三、配置gradle</h2><p>　　在上一篇的基础上，build.gralde里面需要增加：</p><ol><li><p>定义group version，方便下面用到</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="title">'wanzi</span>'</span><br><span class="line"><span class="keyword">version</span> '<span class="number">1.0</span>.<span class="number">0</span>'</span><br></pre></td></tr></table></figure></li><li><p>maven插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></span><br></pre></td></tr></table></figure></li><li><p>uploadArchives的task</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(url: <span class="string">"<span class="subst">$&#123;nexusUrl&#125;</span>/mvn-local/"</span>) &#123;</span><br><span class="line">                authentication(userName: nexusUsername, password: nexusPassword)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pom.<span class="attr">version</span> = <span class="string">"<span class="subst">$&#123;project.version&#125;</span>"</span></span><br><span class="line">            pom.<span class="attr">artifactId</span> = <span class="string">"<span class="subst">$&#123;project.name&#125;</span>"</span></span><br><span class="line">            pom.<span class="attr">groupId</span> = <span class="string">"<span class="subst">$&#123;project.group&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>maven会以<code>groupId:artifactId:packaging:version</code>定位某一个输出物。上述指定了version、artifactId和groupId。packaging为War包。</li><li>注意上述repository配置的为<code>${nexusUrl}/mvn-local/</code>，拼起来就是上述创建的hosted仓库的URL。</li></ul><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><ol><li>执行命令<code>./gradlew uploadArchives</code>上传war包到nexus hosted repo。</li><li>查看nexus上<a href="http://localhost:32768/#browse/browse:mvn-local" target="_blank" rel="noopener">mvn local</a>的hosted仓库，可以看到simple-web-1.0.0.war<img src="/imgs/nexus-browse-simple-web.png" width="300" height="400"></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇利用gralde生成程序构建产物，并在nexus上创建一个hosted仓库，将构建产物打包上传到nexus。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.cnblogs.com/yjmyzz/p/auto-upload-artifact-to-nexus.html" target="_blank" rel="noopener">maven/gradle 打包后自动上传到nexus仓库</a></li><li><a href="https://github.com/sonatype/nexus-book-examples/blob/master/gradle/another-project/build.gradle" target="_blank" rel="noopener">nexus-book-examples</a></li><li><a href="http://timebridge.space/2016/05/21/gradle-advaced-dependency-management/" target="_blank" rel="noopener">Gradle系列七：依赖管理</a></li><li><a href="https://www.cnblogs.com/bigtall/archive/2011/03/23/1993253.html" target="_blank" rel="noopener">maven构建产物介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前一篇&lt;/a&gt;介绍了用nexus搭建一个maven私服，并尝试创建了一个proxy仓库。本篇将主要创建一个hosted仓库，上传gradle生成的构建产物。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Sonatype Nexus搭建maven私服</title>
    <link href="http://yoursite.com/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/"/>
    <id>http://yoursite.com/2018/01/07/Nexus-SonatypeNexus搭建maven私服/</id>
    <published>2018-01-07T16:02:13.000Z</published>
    <updated>2018-05-27T09:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　<a href="http://zhangyuyu.github.io/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">上一篇</a>里面介绍了Sonatype Nexus的基础知识，本篇文章将搭建一个maven私服，从里面获取应用程序需要的jar依赖。<br><a id="more"></a></p><h2 id="二、搭建Nexus"><a href="#二、搭建Nexus" class="headerlink" title="二、搭建Nexus"></a>二、搭建Nexus</h2><p>　　笔者电脑是是Mac pro。</p><h3 id="1-安装Docker-for-Mac"><a href="#1-安装Docker-for-Mac" class="headerlink" title="1. 安装Docker for Mac"></a>1. 安装Docker for Mac</h3><p>　　参考<a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">https://store.docker.com/editions/community/docker-ce-desktop-mac</a></p><h3 id="2-安装Kitematic"><a href="#2-安装Kitematic" class="headerlink" title="2. 安装Kitematic"></a>2. 安装Kitematic</h3><p>　　直接点击Docker for mac，选择Kitematic即可下载安装。<br><img src="/imgs/nexus-install-kitematic.png" width="200" height="400"></p><h3 id="3-创建nexus容器"><a href="#3-创建nexus容器" class="headerlink" title="3. 创建nexus容器"></a>3. 创建nexus容器</h3><p>　　在Kitematic上搜索nexus，选择nexus3，点击create，即可下载镜像，创建容器。</p><h4 id="3-1-docker-image"><a href="#3-1-docker-image" class="headerlink" title="3.1 docker image"></a>3.1 docker image</h4><p>　　宿主机上docker image的存放地址：<br>　　<code>$HOME/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux</code></p><h4 id="3-2-docker-container"><a href="#3-2-docker-container" class="headerlink" title="3.2 docker container"></a>3.2 docker container</h4><p>　　配置端口号如下：<br><img src="/imgs/nexus-container-configure.png" width="500" height="300"></p><h4 id="4-访问nexus"><a href="#4-访问nexus" class="headerlink" title="4. 访问nexus"></a>4. 访问nexus</h4><p>　　访问 <a href="http://localhost:32768/" target="_blank" rel="noopener">http://localhost:32768/</a> ，登录用户名<code>admin</code>，密码<code>admin123</code>。</p><h4 id="5-配置proxy仓库"><a href="#5-配置proxy仓库" class="headerlink" title="5. 配置proxy仓库"></a>5. 配置proxy仓库</h4><p>　　点击<code>Server Adminstration And configuration</code>，进入<a href="http://localhost:32768/#admin/repository/repositories" target="_blank" rel="noopener">配置页面</a>；选择repositories，并选择<a href="http://localhost:32768/#admin/repository/repositories:maven-central" target="_blank" rel="noopener">maven-central</a>。</p><p>默认配置如下：<br><img src="/imgs/nexus-repostories-maven-center.png" width="500" height="1000"></p><p>　　如果没有改代理仓库，可自己创建一个maven central的代理仓库，并配置如上图。</p><h2 id="三、搭建web应用"><a href="#三、搭建web应用" class="headerlink" title="三、搭建web应用"></a>三、搭建web应用</h2><p>目录结构如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── codetutr</span><br><span class="line">        │           └── HelloWorldServlet.java</span><br><span class="line">        └── webapp</span><br><span class="line">            └── WEB-INF</span><br><span class="line">                └── web.xml</span><br></pre></td></tr></table></figure></p><h3 id="1-gradle文件"><a href="#1-gradle文件" class="headerlink" title="1. gradle文件"></a>1. gradle文件</h3><p>build.gradle<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apply</span> plugin: <span class="string">'war'</span></span><br><span class="line">apply plugin: <span class="string">'idea'</span></span><br><span class="line">apply plugin: <span class="string">'org.akhikhl.gretty'</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">  <span class="section">repositories</span> &#123;</span><br><span class="line">    <span class="section">maven</span> &#123;</span><br><span class="line">      <span class="attribute">url</span> <span class="string">"<span class="variable">$&#123;nexusUrl&#125;</span>/maven-central/"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    <span class="attribute">classpath</span> <span class="string">'org.akhikhl.gretty:gretty:2.0.0'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  <span class="section">maven</span> &#123;</span><br><span class="line">    <span class="attribute">url</span> <span class="string">"<span class="variable">$&#123;nexusUrl&#125;</span>/maven-central/"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">   <span class="attribute">providedCompile</span> <span class="string">'javax.servlet:servlet-api:2.5'</span></span><br><span class="line">   runtime <span class="string">'javax.servlet:jstl:1.1.2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gretty &#123;</span><br><span class="line">  <span class="attribute">httpPort</span> = <span class="number">8090</span></span><br><span class="line">  contextPath = <span class="string">'/simple-web'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task wrapper(type : Wrapper) &#123;</span><br><span class="line">  <span class="attribute">gradleVersion</span> = <span class="string">'4.4.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：build.gralde文件中<code>${nexusUrl}</code>，后面跟上的是<code>maven-central/</code>，两者拼起来就是上述搭建nexus时候maven central的URL。</p><h3 id="2-gralde配置文件"><a href="#2-gralde配置文件" class="headerlink" title="2. gralde配置文件"></a>2. gralde配置文件</h3><p>gradle.properties<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nexusUrl</span>=http://localhost:<span class="number">32768</span>/repository/</span><br><span class="line"><span class="attr">nexusUsername</span>=admin</span><br><span class="line"><span class="attr">nexusPassword</span>=admin123</span><br></pre></td></tr></table></figure></p><p>将nexusUrl设置为上述搭建Nexus时候，maven central的URL的前缀。</p><h3 id="3-HelloWorldServlet文件"><a href="#3-HelloWorldServlet文件" class="headerlink" title="3. HelloWorldServlet文件"></a>3. HelloWorldServlet文件</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codetutr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp)</span><br><span class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getOutputStream().write(<span class="string">"Hello, World."</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-web-xml文件"><a href="#4-web-xml文件" class="headerlink" title="4. web.xml文件"></a>4. web.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.codetutr.HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><p>　　.gradlew相关的文件是运行<code>gradle wrapper</code>创建的。</p><h3 id="1-从nexus上下载相应依赖jar文件"><a href="#1-从nexus上下载相应依赖jar文件" class="headerlink" title="1. 从nexus上下载相应依赖jar文件"></a>1. 从nexus上下载相应依赖jar文件</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./gradlew clean build</span><br><span class="line">Download <span class="symbol">http:</span>/<span class="regexp">/localhost:32768/repository</span><span class="regexp">/maven-central/org</span><span class="regexp">/akhikhl/gretty</span><span class="regexp">/gretty/</span><span class="number">1.4</span>.<span class="number">1</span>/gretty-<span class="number">1.4</span>.<span class="number">1</span>.pom</span><br><span class="line">...</span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> <span class="number">37</span>s</span><br><span class="line"><span class="number">3</span> actionable <span class="symbol">tasks:</span> <span class="number">3</span> executed</span><br></pre></td></tr></table></figure><h3 id="2-查看依赖jar文件"><a href="#2-查看依赖jar文件" class="headerlink" title="2. 查看依赖jar文件"></a>2. 查看依赖jar文件</h3><p>　　相关的依赖包的获取顺序为：<br>　　<code>remote maven central -&gt; nexus私服的nexus data -&gt; 本地宿主机的~/.gradle</code></p><h4 id="2-1-nexus缓存jar文件"><a href="#2-1-nexus缓存jar文件" class="headerlink" title="2.1 nexus缓存jar文件"></a>2.1 nexus缓存jar文件</h4><ul><li><p>在 <a href="http://localhost:32768/#browse/browse:maven-central" target="_blank" rel="noopener">http://localhost:32768/#browse/browse:maven-central</a> 可以看到：</p><img src="/imgs/nexus-jar-files.png" width="500" height="250"></li><li><p>关闭电脑的网络，手动点击右侧的path，可以下载jar文件</p><img src="/imgs/nexus-jar-path.png" width="300" height="500"></li><li><p>手动删除宿主机上nexus-data/blob/default/content的内容，再次下载时候，会报错502。</p></li></ul><h4 id="2-2-gradle缓存jar文件"><a href="#2-2-gradle缓存jar文件" class="headerlink" title="2.2 gradle缓存jar文件"></a>2.2 gradle缓存jar文件</h4><ul><li><p>查看本地.gradle缓存如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.gradle/caches</span><br><span class="line">$ ls -al</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x <span class="number"> 6 </span>yuzhang  staff  <span class="number"> 204 </span>Jan <span class="number"> 7 </span>17:25 .</span><br><span class="line">drwxr-xr-x <span class="number"> 8 </span>yuzhang  staff  <span class="number"> 272 </span>Jan <span class="number"> 7 </span>15:26 ..</span><br><span class="line">-rw-r--r--@<span class="number"> 1 </span>yuzhang  staff <span class="number"> 6148 </span>Jan <span class="number"> 7 </span>17:26 .DS_Store</span><br><span class="line">drwxr-xr-x <span class="number"> 6 </span>yuzhang  staff  <span class="number"> 204 </span>Jan <span class="number"> 7 </span>15:37 4.4.1</span><br><span class="line">drwxr-xr-x <span class="number"> 5 </span>yuzhang  staff  <span class="number"> 170 </span>Jan <span class="number"> 7 </span>17:25 modules-2</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>yuzhang  staff  <span class="number"> 102 </span>Jan <span class="number"> 7 </span>17:25 transforms-1</span><br></pre></td></tr></table></figure></li><li><p>断开网络，删除.gralde/cache里面的<code>modules-2</code>和<code>transforms-1</code>，再次运行<code>./gradlew clean build</code>，可以看到应用依然可以获取到jar文件，而且速度很快。</p></li></ul><h3 id="3-运行web应用"><a href="#3-运行web应用" class="headerlink" title="3. 运行web应用"></a>3. 运行web应用</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew appRun</span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO  Jetty <span class="number">9.2</span><span class="number">.22</span>.v20170606 started <span class="keyword">and</span> listening <span class="keyword">on</span> <span class="title">port</span> <span class="title">8090</span></span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO  simple-web runs <span class="keyword">at</span>:</span><br><span class="line"><span class="number">17</span>:<span class="number">18</span>:<span class="number">49</span> INFO    <span class="keyword">http</span>://localhost:<span class="number">8090</span>/simple-web</span><br><span class="line"></span><br><span class="line">&gt; Task :appRun</span><br><span class="line">Press <span class="keyword">any</span> key <span class="built_in">to</span> <span class="built_in">stop</span> <span class="keyword">the</span> server.</span><br><span class="line">&lt;===========<span class="comment">--&gt; 87% EXECUTING [15s]</span></span><br><span class="line">&gt; :appRun</span><br><span class="line">&gt; IDLE</span><br></pre></td></tr></table></figure><h3 id="4-浏览器查看"><a href="#4-浏览器查看" class="headerlink" title="4. 浏览器查看"></a>4. 浏览器查看</h3><p>　　<code>http://localhost:8090/simple-web/</code> ,可以看到<code>Hello, World.</code>出现。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　本篇将nexus作为maven私服，使本地的gradle web应用直接从nexus获取相关依赖，从而避免网络断开造成应用不可访问。<br>　　<a href="http://zhangyuyu.github.io/2018/01/08/Nexus-Gradle%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B3SonatypeNexus/" target="_blank" rel="noopener">下一篇</a>基于本篇工程的基础上，会用gradle生成程序构建产物，打包上传到nexus。</p><p>Github代码地址：<a href="https://github.com/zhangyuyu/Simple-web" target="_blank" rel="noopener">https://github.com/zhangyuyu/Simple-web</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://codetutr.com/2013/03/23/simple-gradle-web-application/" target="_blank" rel="noopener">Simple Gradle Web Application</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;里面介绍了Sonatype Nexus的基础知识，本篇文章将搭建一个maven私服，从里面获取应用程序需要的jar依赖。&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus - Sonatype Nexus入门</title>
    <link href="http://yoursite.com/2018/01/06/Nexus-SonatypeNexus%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/01/06/Nexus-SonatypeNexus入门/</id>
    <published>2018-01-06T17:08:15.000Z</published>
    <updated>2018-05-27T09:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　最近在组建公司内部的Devops Community，按照一整套的项目故事线列出了Devops knowledge Library。其中涉及到基础知识、云平台、持续集成、产出物管理、开发流程和工具、容器编排、配置管理、监控管理、日志管理、HA等。<br>　　为了尽快的搭建内部人员的知识体系，按照上述流程，我们利用最常见的工具，构想了一个简单的流水线，每个人负责流水线的一部分，然后顺序串到一起，进行输出。<br>　　这里，我主要负责利用Nexus进行仓库的管理，本篇主要讲述nexus的一些基础，<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">下一篇</a>将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。</p><a id="more"></a><h2 id="二、Nexus"><a href="#二、Nexus" class="headerlink" title="二、Nexus"></a>二、Nexus</h2><p>　　Nexus是谷歌手机的一个牌子，我们要介绍的不是Nexus，而是Sonatype Nexus。<br>　　Sonatype Nexus是Sonatype公司的一个产品，叫Nexus，它是Maven的私服。<br>　　<img src="/imgs/nexus-maven仓库.png" width="500" height="200"></p><p>　　事实上有三种专门的Maven仓库管理软件可以帮助我们创建私服：</p><ul><li><a href="http://archiva.apache.org/index.cgi" target="_blank" rel="noopener">Apache Archiva</a></li><li><a href="https://link.jianshu.com/?t=http://www.jfrog.com/home/v_artifactory_opensource_overview/" target="_blank" rel="noopener"> Artifactory</a></li><li><a href="http://www.sonatype.org/nexus/" target="_blank" rel="noopener">Sonatype Nexus</a>。 </li></ul><p>　　其中Archiva是开源的，Artifactory和Nexus的核心也是开源的。详细的对比可参考<a href="https://binary-repositories-comparison.github.io/" target="_blank" rel="noopener">Binary Repository Manager Feature Matrix</a>。Nexus是目前最常用的一个。</p><h2 id="三、私服"><a href="#三、私服" class="headerlink" title="三、私服"></a>三、私服</h2><p>　　私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构建。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p><img src="/imgs/nexus-私服.png" width="800" height="350"><h2 id="四、Why-Nexus"><a href="#四、Why-Nexus" class="headerlink" title="四、Why Nexus?"></a>四、Why Nexus?</h2><ol><li><p>节省外网带宽<br>　　大量对于外部仓库的重复请求会消耗带宽，利用私服代理外部仓库，可以消除对外的重复构件下载，降低带宽的压力。</p></li><li><p>加速Maven构建<br>　　不停地连接请求外部仓库十分的耗时，Maven在执行构建的时候不停地检查远程仓库的数据。利用私服，Maven只检查局域网的数据，提高构建的速度。</p></li><li><p>部署第三方构件<br>　　当某个构件无法从任何一个外部远程仓库获得。建立私服之后，便可以将这些构件部署到私服，供内部的Maven项目使用。</p></li><li><p>提高稳定性，增强控制<br>　　Maven构建高度依赖于远程仓库，因此，当网络不稳定的时候，Maven构建也会变得不稳定，甚至无法构建。私服缓存了大量构建，即使暂时没有网络，Maven也可以正常的运行。</p></li><li><p>降低中央仓库的负荷<br>　　使用私服可以避免很多对中央仓库的重复下载，降低中央仓库的压力。</p></li></ol><h2 id="五、Docker搭建"><a href="#五、Docker搭建" class="headerlink" title="五、Docker搭建"></a>五、Docker搭建</h2><p>　　安装过程，网上有很多资料，这里不再赘述。笔者是MAC Pro，安装了Docker for Mac，因此很容易Kitematic进行容器的安装。<br><img src="/imgs/nexus-kitematic-container.png" width="800" height="500"></p><h3 id="1-安装目录"><a href="#1-安装目录" class="headerlink" title="1. 安装目录"></a>1. 安装目录</h3><p>下面是nexus的一些环境变量：<br><img src="/imgs/nexus-环境变量.png" width="800" height="800"></p><p>nexus-container中：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2$ whoami</span><br><span class="line">nexus</span><br><span class="line">sh-4.2$ pwd</span><br><span class="line">/opt/sonatype/nexus</span><br><span class="line">sh-4.2$ ls -l</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>root root<span class="number"> 39222 </span>Dec<span class="number"> 27 </span>16:00 LICENSE.txt</span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 395 </span>Dec<span class="number"> 27 </span>16:00 NOTICE.txt</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 bin</span><br><span class="line">drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 deploy</span><br><span class="line">drwxr-xr-x <span class="number"> 7 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 etc</span><br><span class="line">drwxr-xr-x <span class="number"> 4 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 lib</span><br><span class="line">drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 public</span><br><span class="line">drwxr-xr-x<span class="number"> 21 </span>root root <span class="number"> 4096 </span>Jan <span class="number"> 2 </span>21:41 system</span><br></pre></td></tr></table></figure></p><ul><li>LICENSE.txt和NOTICE.txt，包含有关许可证和版权声明的法律细节；</li><li>bin，包含启动脚本以及启动相关的配置文件</li><li>etc，包含配置文件</li><li>lib，包含与Apache Karaf相关的二进制库</li><li>public，包含应用相关的公共资源</li><li>system，包含构成应用程序相关的所有组件和插件</li></ul><h3 id="2-数据目录"><a href="#2-数据目录" class="headerlink" title="2. 数据目录"></a>2. 数据目录</h3><p>nexus-container中：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">cd</span> ~</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">pwd</span></span><br><span class="line">/opt/sonatype/nexus</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">ls</span> ../</span><br><span class="line">nexus  sonatype-work  start-nexus-repository-manager.<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">cd</span> ../sonatype-work/nexus3/</span><br><span class="line"><span class="keyword">sh</span>-4.2$ <span class="keyword">ls</span></span><br><span class="line">backup  blobs  cache  <span class="keyword">db</span>  elasticsearch  etc  generated-bundles  health-check  instances  javaprefs  keystores  lock  <span class="keyword">log</span>  orient  port  tmp</span><br><span class="line"><span class="keyword">sh</span>-4.2$</span><br></pre></td></tr></table></figure></p><p>上述地址<code>/opt/sonatype/sonatype-work/nexus3</code>或者<code>/nexus-data</code>中，则是数据存放的地址了。</p><ul><li>blobs/，这是blob存储的默认地址，可在UI上的Server Adminstration And configuration进行配置。</li><li>cache/，包含当前缓存的Karaf bundles信息。</li><li>db/，包含OrientDB数据库，数据库存的是Nexus respository manager的元数据。</li><li>elasticsearch，包含当前配置的Elasticsearch状态</li><li>etc/，包含主要的运行时配置和自定义的Nexus respository manager配置。</li><li>health-check/，包含来自 Repository Health Check功能的缓存 报告</li><li>keystores/，包含用于鉴别Nexus respository manager的自动生成的密钥。</li><li>log/，nexus.log文件包含Nexus respository manager运行实例的信息；该目录也包含一些日志文件的归档副本；日志滚动（Log rotation）每天进行。</li><li>tmp/，用于临时存储。</li></ul><h2 id="六、功能介绍"><a href="#六、功能介绍" class="headerlink" title="六、功能介绍"></a>六、功能介绍</h2><h3 id="1-Browse-Server-Content"><a href="#1-Browse-Server-Content" class="headerlink" title="1. Browse Server Content"></a>1. Browse Server Content</h3><img src="/imgs/nexus-功能-browse-server-content.png" width="800" height="250"><h4 id="1-1-Search"><a href="#1-1-Search" class="headerlink" title="1.1 Search"></a>1.1 Search</h4><p>　　搜索功能，就是从私服上查找是否有哪些包:</p><ul><li>在Search这级是支持模糊搜索的</li><li>如果进入具体的目录，不支持模糊搜索</li></ul><h4 id="1-2-Browse"><a href="#1-2-Browse" class="headerlink" title="1.2 Browse"></a>1.2 Browse</h4><ul><li>Assets，能看到所有的资源，包含Jar，已经对Jar的一些描述信息。</li><li>Components，只能看到Jar</li></ul><h3 id="2-Server-Adminstration-And-configuration"><a href="#2-Server-Adminstration-And-configuration" class="headerlink" title="2. Server Adminstration And configuration"></a>2. Server Adminstration And configuration</h3><p>　　看到这选项是要进行登录的，在右上角点击“Sign In”的登录按钮，输入<code>admin/admin123</code>,登录成功之后，即可看到此功能，如图所示：<br><img src="/imgs/nexus-功能-server-adminstration-configuration.png" width="800" height="300"></p><h4 id="2-1-Repository"><a href="#2-1-Repository" class="headerlink" title="2.1 Repository"></a>2.1 Repository</h4><ul><li>Blob Stores, 文件存储的地方，创建一个目录的话，对应文件系统的一个目录</li><li>Repositories，仓库</li></ul><h5 id="2-1-1-仓库类型"><a href="#2-1-1-仓库类型" class="headerlink" title="2.1.1 仓库类型"></a>2.1.1 仓库类型</h5><ul><li>hosted<br>　　宿主仓库，用户可以把自己的一些构件，deploy到hosted中，也可以手工上传构件到hosted里。比如说oracle的驱动程序，ojdbc6.jar，在central repository是获取不到的，就需要手工上传到hosted里 </li><li>proxy<br>　　远程仓库的代理。比如说在nexus中配置了一个central repository的proxy，当用户向这个proxy请求一个artifact，这个proxy就会先在本地查找，如果找不到的话，就会从远程仓库下载，然后返回给用户，相当于起到一个中转的作用 </li><li>group<br>　　仓库组，在maven里没有这个概念，是nexus特有的。目的是将上述多个仓库聚合，对用户暴露统一的地址，这样用户就不需要在pom中配置多个地址，只要统一配置group的地址就可以了 </li><li>virtual<br>　　虚拟类型仓库，此类型主要是为了兼容maven的版本，maven版本经过大幅度提升，虚拟类型仓库主要是为了兼容maven1</li></ul><h5 id="2-1-2-仓库格式"><a href="#2-1-2-仓库格式" class="headerlink" title="2.1.2 仓库格式"></a>2.1.2 仓库格式</h5><p><a href="https://help.sonatype.com/display/NXRM3/Supported+Formats" target="_blank" rel="noopener">最新Nexus支持的仓库格式</a>如下：</p><table><thead><tr><th>Format</th><th>2.x</th><th>3.x</th></tr></thead><tbody><tr><td>Bower</td><td>❌</td><td>✅ 3.0+</td></tr><tr><td>Docker</td><td>❌</td><td>✅ 3.0+</td></tr><tr><td>git-lfs</td><td>❌</td><td>✅ 3.3+ (只支持hosted)</td></tr><tr><td>Maven 1</td><td>✅</td><td>❌</td></tr><tr><td>Maven 2</td><td>✅</td><td>✅ 3.1+</td></tr><tr><td>npm</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>NuGet</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>OBR</td><td>✅</td><td>❌</td></tr><tr><td>P2</td><td>✅</td><td>❌</td></tr><tr><td>PyPI</td><td>❌</td><td>✅ 3.0.2+</td></tr><tr><td>RubyGems</td><td>✅</td><td>✅ 3.0.2+</td></tr><tr><td>Site/Raw</td><td>✅</td><td>✅ 3.0+</td></tr><tr><td>Yum</td><td>✅</td><td>❌ (在3.5+ 支持Proxy)</td></tr></tbody></table><h5 id="2-1-3-仓库策略"><a href="#2-1-3-仓库策略" class="headerlink" title="2.1.3 仓库策略"></a>2.1.3 仓库策略</h5><ul><li>releases，发布版，稳定版的jar</li><li>snapshots，快照版，一般是处于开发中的jar</li><li>mixed，混合的</li></ul><h5 id="2-1-4-预定义本地仓库"><a href="#2-1-4-预定义本地仓库" class="headerlink" title="2.1.4 预定义本地仓库"></a>2.1.4 预定义本地仓库</h5><img src="/imgs/nexus-功能-repositories.png" width="800" height="300"><h4 id="2-2-Security"><a href="#2-2-Security" class="headerlink" title="2.2 Security"></a>2.2 Security</h4><p>主要是用户、角色、权限的配置</p><h4 id="2-3-Support"><a href="#2-3-Support" class="headerlink" title="2.3 Support"></a>2.3 Support</h4><p>包含日志及数据分析</p><h4 id="2-4-System"><a href="#2-4-System" class="headerlink" title="2.4 System"></a>2.4 System</h4><p>主要是邮件服务器，调度的设置地方</p><h2 id="七、实现原理"><a href="#七、实现原理" class="headerlink" title="七、实现原理"></a>七、实现原理</h2><p>　　Nexus Repository是以Java和JavaScript为主，实现的一个包含前端与后台的Web服务。 后台方面，它采用Jetty作为应用服务器、Karaf作为OSGi容器、OrientDB作为数据库。 前端方面，它使用Swagger UI作为框架，是一个单页面Web App。</p><p>　　另外，它也通过Resteasy支持REST API，可以通过网络进行访问控制。并且，自行实现了一个插件系统，用插件的方式支持了更多复杂的功能。比如，Maven、PyPI、Docker这些支持，都是由插件实现的。 如果希望支持其它方式的代理、缓存、发布，比如APT，也可以通过插件定制。</p><h2 id="八、最后"><a href="#八、最后" class="headerlink" title="八、最后"></a>八、最后</h2><p>　　本篇主要讲述了Nexus的概念及好处，介绍了nexus涉及到的安装目录以及数据目录，简单的列举了一下Nexus repository manager UI上的功能。<br>　　<a href="http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/" target="_blank" rel="noopener">下一篇</a> 将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.csdn.net/gaoying_blogs/article/details/48917847" target="_blank" rel="noopener">【项目管理】Sonatype Nexus,Maven私服</a></li><li><a href="http://juvenshun.iteye.com/blog/285059" target="_blank" rel="noopener">使用仓库管理器——Sonatype Nexus的九大理由</a></li><li><a href="http://juvenshun.iteye.com/blog/349534" target="_blank" rel="noopener">Nexus入门指南（图文）</a></li><li><a href="http://www.tinygroup.org/docs/d0e8e7273742486ab59f161785e07a66" target="_blank" rel="noopener">Tiny Nexus3.0.0+Maven的使用</a></li><li><a href="https://books.sonatype.com/nexus-book/3.5/reference/install.html#data-directory" target="_blank" rel="noopener">Reference nexus-book</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;　　最近在组建公司内部的Devops Community，按照一整套的项目故事线列出了Devops knowledge Library。其中涉及到基础知识、云平台、持续集成、产出物管理、开发流程和工具、容器编排、配置管理、监控管理、日志管理、HA等。&lt;br&gt;　　为了尽快的搭建内部人员的知识体系，按照上述流程，我们利用最常见的工具，构想了一个简单的流水线，每个人负责流水线的一部分，然后顺序串到一起，进行输出。&lt;br&gt;　　这里，我主要负责利用Nexus进行仓库的管理，本篇主要讲述nexus的一些基础，&lt;a href=&quot;http://zhangyuyu.github.io/2018/01/07/Nexus-SonatypeNexus%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下一篇&lt;/a&gt;将利用nexus作为maven的私服，利用gradle进行构建一个简单的web应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://yoursite.com/categories/Devops/"/>
    
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Mongo-记一次安装启动异常</title>
    <link href="http://yoursite.com/2017/12/27/Mongo-%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2017/12/27/Mongo-记一次安装启动错误/</id>
    <published>2017-12-27T10:35:21.000Z</published>
    <updated>2018-06-24T15:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>　　笔者最近换了电脑，从MacBook Pro 13”换成了MacBook Pro 15”，相关的工具软件全部得重新装。<br>再重新装Mongo的时候遇到了一些问题，特此记录。</p><h2 id="二、安装异常"><a href="#二、安装异常" class="headerlink" title="二、安装异常"></a>二、安装异常</h2><h3 id="1-错误描述"><a href="#1-错误描述" class="headerlink" title="1. 错误描述"></a>1. 错误描述</h3><a id="more"></a><p>　　用<code>brew install mongodb</code>安装了最新的mongodb(3.6)之后，启动本地的java spring boot应用，报错如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">com.mongodb.MongoCommandException</span>: Command failed with error 9: 'The 'cursor' option is required, except for aggregate with the explain argument' on server localhost:27017. The full response is &#123; "ok" : 0.0, "errmsg" : "The 'cursor' option is required, except for aggregate with the explain argument", "code" : 9, "codeName" : "FailedToParse" &#125;</span><br><span class="line"></span><br><span class="line">        at com.mongodb.CommandResult.getException(CommandResult.java:80)</span><br><span class="line"></span><br><span class="line">        at com.mongodb.CommandResult.throwOnError(CommandResult.java:94)</span><br><span class="line"></span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.handleCommandError(MongoTemplate.java:2097)</span><br><span class="line"></span><br><span class="line">        ... 119 common frames omitted</span><br></pre></td></tr></table></figure><h3 id="2-错误原因"><a href="#2-错误原因" class="headerlink" title="2. 错误原因"></a>2. 错误原因</h3><p>　　MongoDB 3.6的Document，对于aggregation cursor的描述如下:</p><blockquote><pre><code>Specify a document that contains options that control the creation of the cursor object.</code></pre></blockquote><pre><code>Changed in version 3.6: MongoDB 3.6 removes the use of aggregate command without the cursoroption unless the command includes the explain option. Unless you include the explain option,you must specify the cursor option.</code></pre><blockquote></blockquote><pre><code>To indicate a cursor with the default batch size, specify cursor: {}.</code></pre><blockquote></blockquote><pre><code>To indicate a cursor with a non-default batch size, use cursor: { batchSize: &lt;num&gt; }.</code></pre><p>　　MongoDB在3.6里面改变了aggregation指令的工作方式，现在aggregation需要cursor了。</p><h3 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h3><p>　　对本地的mongodb降级。</p><h4 id="1）先用brew-search查看支持的mongo版本"><a href="#1）先用brew-search查看支持的mongo版本" class="headerlink" title="1）先用brew search查看支持的mongo版本"></a>1）先用brew search查看支持的mongo版本</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ brew search mongo</span><br><span class="line">=<span class="ruby">=&gt; Searching local taps...</span></span><br><span class="line"><span class="ruby">mongodb@3.<span class="number">4</span> ✔                          mongo-cxx-driver                       mongodb                                mongodb@3.<span class="number">2</span>                            percona-server-mongodb</span></span><br><span class="line"><span class="ruby">mongo-c-driver                         mongo-orchestration                    mongodb@3.<span class="number">0</span>                            mongoose</span></span><br><span class="line"><span class="ruby">==&gt; Searching taps on GitHub...</span></span><br><span class="line"><span class="ruby">caskroom/cask/mongo-management-studio  homebrew/php/php53-mongo               homebrew/php/php54-mongo               homebrew/php/php55-mongo               homebrew/php/php56-mongo</span></span><br><span class="line"><span class="ruby">==&gt; Searching blacklisted, migrated <span class="keyword">and</span> deleted formulae...</span></span><br></pre></td></tr></table></figure><h4 id="2）再brew安装mongodb-3-4"><a href="#2）再brew安装mongodb-3-4" class="headerlink" title="2）再brew安装mongodb 3.4"></a>2）再brew安装mongodb 3.4</h4><p><code>brew install mongodb@3.4</code></p><h2 id="三、启动异常"><a href="#三、启动异常" class="headerlink" title="三、启动异常"></a>三、启动异常</h2><h3 id="1-错误描述-1"><a href="#1-错误描述-1" class="headerlink" title="1. 错误描述"></a>1. 错误描述</h3><p>　　安装完成mongodb3.4之后，mongo服务启动异常。</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v3.<span class="number">4.10</span></span><br><span class="line">connecting <span class="keyword">to</span>: mongodb://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span></span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">27</span>T11:<span class="number">13</span>:<span class="number">37.713</span>+<span class="number">0800</span> W NETWORK  [thread1] Failed <span class="keyword">to</span> connect <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>, <span class="keyword">in</span>(checking socket <span class="keyword">for</span> <span class="literal">error</span> <span class="keyword">after</span> poll), reason: Connection refused</span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">27</span>T11:<span class="number">13</span>:<span class="number">37.715</span>+<span class="number">0800</span> E QUERY    [thread1] <span class="literal">Error</span>: couldn<span class="symbol">'t</span> connect <span class="keyword">to</span> server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>, connection attempt failed :</span><br><span class="line">connect@src/mongo/shell/mongo.js:<span class="number">237</span>:<span class="number">13</span></span><br><span class="line">@(connect):<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">exception: connect failed</span><br></pre></td></tr></table></figure><h3 id="2-错误原因-1"><a href="#2-错误原因-1" class="headerlink" title="2. 错误原因"></a>2. 错误原因</h3><p>　　mongodb的服务没有启动。</p><h3 id="3-解决办法-1"><a href="#3-解决办法-1" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h3><h4 id="探索过程："><a href="#探索过程：" class="headerlink" title="探索过程："></a>探索过程：</h4><h5 id="1）用brew-services启动mongo不work"><a href="#1）用brew-services启动mongo不work" class="headerlink" title="1）用brew services启动mongo不work"></a>1）用brew services启动mongo不work</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start mongodb@3.4</span><br><span class="line">==&gt; Successfully started `mongodb@3.4` (label: homebrew.mxcl.mongodb@3.4)</span><br><span class="line">$ brew services list</span><br><span class="line">Name        Status <span class="built_in"> User </span>   Plist</span><br><span class="line">mongodb@3.4 started yuzhang /Users/yuzhang/Library/LaunchAgents/homebrew.mxcl.mongodb@3.4.plist</span><br></pre></td></tr></table></figure><p>　　上述操作之后，似乎mongo已经启动了，但是问题依旧复现，可能是brew services不再有人维护的原因（<a href="https://github.com/Homebrew/legacy-homebrew/issues/32006" target="_blank" rel="noopener">brew services is unsupported and will be removed soon</a>）。</p><h5 id="2）用mongod启动mongo报错"><a href="#2）用mongod启动mongo报错" class="headerlink" title="2）用mongod启动mongo报错"></a>2）用mongod启动mongo报错</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mongod</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.980<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8655 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to flush diaglog...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] now exiting</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:11:28.981<span class="string">+0800</span> I CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure><p>　　上述错误信息里，明确指出<code>/data/db not found</code>，因此是在启动的时候没有找到db的地址。为了确认是这个问题，尝试使用如下指令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongo -nodb</span></span><br></pre></td></tr></table></figure><p>　　然后，发现可以直接进入mongo了。</p><h5 id="3）创建-data-db"><a href="#3）创建-data-db" class="headerlink" title="3）创建/data/db"></a>3）创建/data/db</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> -<span class="selector-tag">p</span> /data/db</span><br></pre></td></tr></table></figure><p>　　再次启动mongodb:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.679<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8510 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.680<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 20 Attempted to create a lock file on a read-only directory: /data/db, terminating</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I NETWORK  [initandlisten] shutdown: going to flush diaglog...</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I CONTROL  [initandlisten] now exiting</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:02.681<span class="string">+0800</span> I CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure><p>　　可以看出是对<code>/data/db</code>没有权限。</p><h5 id="4）用sudo执行mongod"><a href="#4）用sudo执行mongod" class="headerlink" title="4）用sudo执行mongod"></a>4）用sudo执行mongod</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mongod</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=8521 port=27017 dbpath=/data/db 64-bit host=CNyuzhang<span class="string">-2</span>.local</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.10</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] git version: 078f28920cb24de0dd479b5ea6c66c644f6326e9</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2n  7 Dec 2017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: system</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.167<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.170<span class="string">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'wiredTiger' storage engine, so setting the active storage engine to 'wiredTiger'.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.170<span class="string">+0800</span> I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=7680M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten]</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.781<span class="string">+0800</span> I CONTROL  [initandlisten]</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.822<span class="string">+0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:08.823<span class="string">+0800</span> I NETWORK  [thread1] waiting for connections on port 27017</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52959 #1 (1 connection now open)</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52960 #2 (2 connections now open)</span><br><span class="line">2017<span class="string">-12</span><span class="string">-27</span>T11:10:11.182<span class="string">+0800</span> I NETWORK  [thread1] connection accepted from 127.0.0.1:52961 #3 (3 connections now open)</span><br></pre></td></tr></table></figure><h4 id="解决方法小结"><a href="#解决方法小结" class="headerlink" title="解决方法小结"></a>解决方法小结</h4><ol><li>创建<code>/data/db</code>，因为mongodb默认的db地址是<code>/data/db</code></li><li>用sudo执行mongod</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/db</span></span><br><span class="line"><span class="title">sudo</span> mongod</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ol><li>问题1是新版本3.6的mongodb做了一些改动造成的不兼容</li><li>问题2是brew services不再维护造成的启动异常</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/29630399/mongo-connection-refused-osx" target="_blank" rel="noopener">Stackoverflow - Mongo connection refused osx</a></li><li><a href="https://stackoverflow.com/questions/23439343/cannot-connect-to-mongodb-errno61" target="_blank" rel="noopener">Stackoverflow - Cannot connect to MongoDB errno:61</a></li><li><a href="http://hcysun.me/2015/11/21/Mac下使用brew安装mongodb/" target="_blank" rel="noopener">Mac下使用brew安装mongodb</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;　　笔者最近换了电脑，从MacBook Pro 13”换成了MacBook Pro 15”，相关的工具软件全部得重新装。&lt;br&gt;再重新装Mongo的时候遇到了一些问题，特此记录。&lt;/p&gt;
&lt;h2 id=&quot;二、安装异常&quot;&gt;&lt;a href=&quot;#二、安装异常&quot; class=&quot;headerlink&quot; title=&quot;二、安装异常&quot;&gt;&lt;/a&gt;二、安装异常&lt;/h2&gt;&lt;h3 id=&quot;1-错误描述&quot;&gt;&lt;a href=&quot;#1-错误描述&quot; class=&quot;headerlink&quot; title=&quot;1. 错误描述&quot;&gt;&lt;/a&gt;1. 错误描述&lt;/h3&gt;
    
    </summary>
    
      <category term="Programmming" scheme="http://yoursite.com/categories/Programmming/"/>
    
    
      <category term="Mongo" scheme="http://yoursite.com/tags/Mongo/"/>
    
  </entry>
  
</feed>
