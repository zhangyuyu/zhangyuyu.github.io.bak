<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[若见喻笺]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-08-27T15:44:04.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Zhang Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SpringAOP_Pointcut&Advisor]]></title>
    <link href="http://yoursite.com/2015/08/27/SpringAOP-Pointcut-Advisor/"/>
    <id>http://yoursite.com/2015/08/27/SpringAOP-Pointcut-Advisor/</id>
    <published>2015-08-27T14:56:33.000Z</published>
    <updated>2015-08-27T15:44:04.000Z</updated>
    <content type="html"><![CDATA[<p>　　上一篇的Spring AOP Advice例子中，Class（CustomerService）中的全部method都被自动的拦截了。但是大多情况下，你只需要一个方法去拦截一两个method。这样就引入了Pointcut（切入点）的概念，它允许你根据method的名字去拦截指定的method。另外，一个Pointcut必须结合一个Advisor来使用。</p>
<blockquote>
<p>在Spring AOP中，有3个常用的概念:</p>
<ul>
<li>Advices：表示一个method执行前或执行后的动作。</li>
<li>Pointcut：表示根据method的名字或者正则表达式去拦截一个method。</li>
<li>Advisor：Advice和Pointcut组成的独立的单元，并且能够传给proxy factory 对象。</li>
</ul>
</blockquote>
<h3 id="一、回顾Around_advice">一、回顾Around advice</h3><h4 id="1、在CustomerService-java中">1、在CustomerService.java中</h4><pre><code>package com.zhangyu.customer.services;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> {
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String occupation;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>{    <span class="keyword">this</span>.name = name;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer name : "</span> + <span class="keyword">this</span>.name);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOccupation</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer occupation : "</span> + <span class="keyword">this</span>.occupation);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOccupation</span>(<span class="params">String occupation</span>) </span>{<span class="keyword">this</span>.occupation = occupation;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printThrowException</span>(<span class="params"></span>) </span>{
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();
    }    
}
</code></pre><h4 id="2、_在HelloAroundMethod-java中">2、 在HelloAroundMethod.java中</h4><pre><code>package com.zhangyu.aop;

<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInterceptor</span>;
<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInvocation</span>;

public class <span class="type">HelloAroundMethod</span> implements <span class="type">MethodInterceptor</span> {
    @<span class="type">Override</span>
    public <span class="type">Object</span> invoke(<span class="type">MethodInvocation</span> methodInvocation) throws <span class="type">Throwable</span> {

        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"Method name : "</span> + methodInvocation.getMethod().getName());

        // same <span class="keyword">with</span> <span class="type">MethodBeforeAdvice</span>
        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before method ,hello"</span>);

        <span class="keyword">try</span> {
            <span class="type">Object</span> <span class="literal">result</span> = methodInvocation.proceed();

            // same <span class="keyword">with</span> <span class="type">AfterReturningAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before after ,hello!"</span>);
            <span class="keyword">return</span> <span class="literal">result</span>;
        } catch (<span class="type">IllegalArgumentException</span> e) {
            // same <span class="keyword">with</span> <span class="type">ThrowsAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Throw exception ,hello!"</span>);
            throw e;
        }
    }
}
</code></pre><h4 id="3、_在Spring-Customer-xml中">3、 在Spring-Customer.xml中</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;helloAroundMethodBean&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h4 id="4、运行，在App-java中">4、运行，在App.java中</h4><pre><code><span class="keyword">package</span> com.zhangyu.common;

<span class="keyword">import</span> com.zhangyu.customer.services.CustomerService;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> class App {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
        ApplicationContext appContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(
                <span class="keyword">new</span> <span class="keyword">String</span>[] { <span class="string">"Spring-Customer.xml"</span> });

        CustomerService cust = (CustomerService) appContext
                .getBean(<span class="string">"customerService"</span>);

        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printName();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printOccupation();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        <span class="keyword">try</span> {
            cust.printThrowException();
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
}    　　
</code></pre><h4 id="5、运行结果">5、运行结果</h4><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printThrowException
HelloAroundMethod : Before method ,hello!
HelloAroundMethod : Throw exception ,hello!
</code></pre><h3 id="二、Pointcut">二、Pointcut</h3><p>　　可以用名字匹配法和正则表达式匹配法去匹配要拦截的method。</p>
<h4 id="1、Pointcut——名字匹配法">1、Pointcut——名字匹配法</h4><h5 id="（1）通过pointcut和advisor拦截printName()方法。">（1）通过pointcut和advisor拦截printName()方法。</h5><p>　　<em> 创建一个NameMatchMethodPointcut的bean，将你想拦截的方法的名字printName注入到属性mappedName。
　　</em> 创建一个DefaultPointcutAdvisor的advisor bean，将pointcut和advice关联起来。<br>　　* 更改代理的interceptorNames的value值为customerAdvisor。</p>
<pre><code>    &lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;customerAdvisor&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerPointcut"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.NameMatchMethodPointcut"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"mappedName"</span> value=<span class="string">"printName"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerAdvisor"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"pointcut"</span> <span class="keyword">ref</span>=<span class="string">"customerPointcut"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"helloAroundMethodBean"</span> /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><p>#####（2）运行，结果如下：</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　　可以看到，只拦截了printName（），在其前后分别输出了“Before method ，hello!”和“After method ,hello!”</p>
<p>#####（3）另外<br>　　以上配置中pointcut和advisor可以合并在一起配置，即不用单独配置customerPointcut和customerAdvisor，只要配置customerAdvisor时class选择NameMatchMethodPointcutAdvisor如下：</p>
<pre><code>&lt;bean id=<span class="string">"customerAdvisor"</span> class=<span class="string">"org.springframework.aop.support.NameMatchMethodPointcutAdvisor"</span>&gt;
    &lt;property name=<span class="string">"mappedName"</span> value=<span class="string">"printName"</span> /&gt;
    &lt;property name=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"hijackAroundMethodBean"</span> /&gt;
&lt;/bean&gt;
</code></pre><p>　　但是，如果将method名字单独配置成pointcut（切入点），advice和pointcut的结合会更灵活，使一个pointcut可以和多个advice结合，更符合松耦合理念。</p>
<h4 id="2、Pointcut——正则表达式匹配法">2、Pointcut——正则表达式匹配法</h4><h5 id="(1)_你可以配置用正则表达式匹配需要拦截的method：">(1) 你可以配置用正则表达式匹配需要拦截的method：</h5><pre><code>    &lt;bean <span class="property">id</span>=<span class="string">"customerAdvisor"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"patterns"</span>&gt;
        &lt;<span class="type">list</span>&gt;
            &lt;value&gt;.*Occu.*&lt;/value&gt;
        &lt;/<span class="type">list</span>&gt;
    &lt;/<span class="keyword">property</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"advice"</span> <span class="keyword">ref</span>=<span class="string">"helloAroundMethodBean"</span> /&gt;
&lt;/bean&gt;
</code></pre><h5 id="(2)_结果">(2) 结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : After method ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　可以看到，拦截名字中包含了Occu字符的method，这里是printOccupation()。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　上一篇的Spring AOP Advice例子中，Class（CustomerService）中的全部method都被自动的拦截了。但是大多情况下，你只需要一个方法去拦截一两个method。这样就引入了Pointcut（切入点）的概念，它允许你根据method的名字去拦]]>
    </summary>
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SpringAOP Advice]]></title>
    <link href="http://yoursite.com/2015/08/27/SpringAOP-Advice/"/>
    <id>http://yoursite.com/2015/08/27/SpringAOP-Advice/</id>
    <published>2015-08-27T12:57:00.000Z</published>
    <updated>2015-08-27T15:07:07.000Z</updated>
    <content type="html"><![CDATA[<p>　　Spring AOP即Aspect-oriented programming，面向切面编程，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题。简单地说，就是一个拦截器（interceptor）拦截一些处理过程。例如，当一个method被执行，Spring AOP能够劫持正在运行的method，在method执行前或者后加入一些额外的功能。</p>
<blockquote>
<p>在Spring AOP中，支持4中类型的通知（Advice）:<br></p>
<ul>
<li>Before advice      ——method执行前通知</li>
<li>After returning advice ——method返回一个结果后通知</li>
<li>After throwing advice – method抛出异常后通知&lt;b</li>
<li>Around advice – 环绕通知，结合了以上三种</li>
</ul>
</blockquote>
<h3 id="一、不使用AOP的简单例子">一、不使用AOP的简单例子</h3><h4 id="1、在CustomerService-java中">1、在CustomerService.java中</h4><pre><code>package com.zhangyu.customer.services;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerService</span> {
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String occupation;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>{<span class="keyword">this</span>.name = name;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer name : "</span> + <span class="keyword">this</span>.name);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOccupation</span>(<span class="params"></span>) </span>{System.<span class="keyword">out</span>.println(<span class="string">"Customer occupation : "</span> + <span class="keyword">this</span>.occupation);}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOccupation</span>(<span class="params">String occupation</span>) </span>{<span class="keyword">this</span>.occupation = occupation;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printThrowException</span>(<span class="params"></span>) </span>{
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();
    }    
}
</code></pre><h4 id="2、在Spring-Customer-xml中">2、在Spring-Customer.xml中</h4><pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h4 id="3、运行，在App-java中">3、运行，在App.java中</h4><pre><code><span class="keyword">package</span> com.zhangyu.common;

<span class="keyword">import</span> com.zhangyu.customer.services.CustomerService;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> class App {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
        ApplicationContext appContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(
                <span class="keyword">new</span> <span class="keyword">String</span>[] { <span class="string">"Spring-Customer.xml"</span> });

        CustomerService cust = (CustomerService) appContext
                .getBean(<span class="string">"customerService"</span>);

        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printName();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        cust.printOccupation();
        System.out.<span class="built_in">println</span>(<span class="string">"*************************"</span>);
        <span class="keyword">try</span> {
            cust.printThrowException();
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
}
</code></pre><h4 id="4、结果">4、结果</h4><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><h3 id="二、使用AOP">二、使用AOP</h3><h4 id="1、Before_Advice">1、Before Advice</h4><h5 id="（1）HelloBeforeMethod-java中">（1）HelloBeforeMethod.java中</h5><p>　　创建一个实现了接口MethodBeforeAdvice的class，method运行前，将运行HelloBeforeMethod.java　　</p>
<pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> java.lang.reflect.Method;
<span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloBeforeMethod</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>{
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object <span class="keyword">target</span>)</span>
            <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloBeforeMethod : Before method ,hello"</span>);
    }
}
</code></pre><h5 id="(2)_Spring-Customer-xml中">(2) Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloBeforeMethodBean</code>，然后创建一个新的代理（proxy），命名为<code>customerServiceProxy</code>。其中,<code>target</code>定义你想劫持哪个bean，<code>interceptorNames</code>定义你想用哪个class(advice)劫持target。</p>
<pre><code>&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;
    &lt;bean <span class="property">id</span>=<span class="string">"customerService"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.customer.services.CustomerService"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> value=<span class="string">"Zhang Yu"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"occupation"</span> value=<span class="string">"developer"</span> /&gt;
    &lt;/bean&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"helloAroundMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloAroundMethod"</span> /&gt;
    &lt;bean <span class="property">id</span>=<span class="string">"helloBeforeMethodBean"</span> <span class="type">class</span>=<span class="string">"com.zhangyu.aop.HelloBeforeMethod"</span> /&gt;

    &lt;bean <span class="property">id</span>=<span class="string">"customerServiceProxy"</span> <span class="type">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"customerService"</span> /&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"interceptorNames"</span>&gt;
            &lt;<span class="type">list</span>&gt;
                &lt;value&gt;helloBeforeMethodBean&lt;/value&gt;
            &lt;/<span class="type">list</span>&gt;
        &lt;/<span class="keyword">property</span>&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre><h5 id="(3)_运行，在App-java中">(3) 运行，在App.java中　　</h5><p>　　将CustomerService cust改为从<code>customerServiceProxy</code>中getBean:</p>
<pre><code>CustomerService cust = <span class="params">(CustomerService)</span>appContext.getBean<span class="params">(<span class="string">"customerServiceProxy"</span>)</span>;
</code></pre><p>#####（4）结果</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloBeforeMethod : Before method ,hello
</code></pre><h4 id="2、After_Advice">2、After Advice</h4><h5 id="(1)_在HelloAfterMethod-java中">(1) 在HelloAfterMethod.java中</h5><pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> java.lang.reflect.Method;
<span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAfterMethod</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>{
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method,
            Object[] args, Object <span class="keyword">target</span>)</span> <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloAfterMethod : After method ,hello!"</span>);
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloAfterMethodBean</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloAfterMethodBean</code>。
　　</p>
<h5 id="（3）运行结果">（3）运行结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
HelloAfterMethod : After method ,hello
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
HelloAfterMethod : After method ,hello
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre><p>　　执行到cust.printThrowException()后，直接抛出异常，方法没有正常执行完毕（或者说没有返回结果），所以不运行切入的afterReturning方法。</p>
<h4 id="3、After_throwing_advice">3、After throwing advice</h4><p>　　创建一个实现了ThrowsAdvice接口的class，劫持IllegalArgumentException异常，目标method运行时，抛出IllegalArgumentException异常后，运行切入的方法。</p>
<h5 id="(1)_在HelloThrowException-java中">(1) 在HelloThrowException.java中</h5><pre><code><span class="keyword">package</span> com.zhangyu.aop;

<span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThrowException</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(IllegalArgumentException e)</span> <span class="keyword">throws</span> Throwable </span>{
        System.out.println(<span class="string">"HelloThrowException : Throw exception ,hello"</span>);
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中-1">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloThrowExceptionBean</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloThrowExceptionBean</code>。
　　</p>
<h5 id="（3）运行结果-1">（3）运行结果　　</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer name : Zhang Yu
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Customer occupation : developer
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
HelloThrowException : Throw exception ,hello
</code></pre><p>者说没有返回结果），所以不运行切入的afterReturning方法。</p>
<h4 id="4、Around_advice">4、Around advice</h4><h5 id="(1)_在HelloAroundMethod-java中">(1) 在HelloAroundMethod.java中</h5><pre><code>package com.zhangyu.aop;

<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInterceptor</span>;
<span class="keyword">import</span> org.aopalliance.intercept.<span class="type">MethodInvocation</span>;

public class <span class="type">HelloAroundMethod</span> implements <span class="type">MethodInterceptor</span> {
    @<span class="type">Override</span>
    public <span class="type">Object</span> invoke(<span class="type">MethodInvocation</span> methodInvocation) throws <span class="type">Throwable</span> {

        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"Method name : "</span> + methodInvocation.getMethod().getName());

        // same <span class="keyword">with</span> <span class="type">MethodBeforeAdvice</span>
        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before method ,hello"</span>);

        <span class="keyword">try</span> {
            <span class="type">Object</span> <span class="literal">result</span> = methodInvocation.proceed();

            // same <span class="keyword">with</span> <span class="type">AfterReturningAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Before after ,hello!"</span>);
            <span class="keyword">return</span> <span class="literal">result</span>;
        } catch (<span class="type">IllegalArgumentException</span> e) {
            // same <span class="keyword">with</span> <span class="type">ThrowsAdvice</span>
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"HelloAroundMethod : Throw exception ,hello!"</span>);
            throw e;
        }
    }
}
</code></pre><h5 id="(2)_在Spring-Customer-xml中-2">(2) 在Spring-Customer.xml中</h5><p>　　在Spring-Customer.xml中加入新的bean配置<code>HelloAroundMethod</code>，然后在customerServiceProxy中设置”interceptorNames”的value为<code>helloAroundMethodBean</code>。
　　</p>
<h5 id="（3）运行结果-2">（3）运行结果</h5><pre><code><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printName
HelloAroundMethod : Before method ,hello!
Customer name : Zhang Yu
HelloAroundMethod : Before after ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printOccupation
HelloAroundMethod : Before method ,hello!
Customer occupation : developer
HelloAroundMethod : Before after ,hello!
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
Method name : printThrowException
HelloAroundMethod : Before method ,hello!
HelloAroundMethod : Throw exception ,hello!
</code></pre><h3 id="三、目录结构">三、目录结构</h3><img src="/imgs/SpringAOP_Advice.png" width="300" height="500">
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Spring AOP即Aspect-oriented programming，面向切面编程，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题。简单地说，就是一个拦截器（interceptor）拦截一些处理过程。例如，当一个method被执行，Spring]]>
    </summary>
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Batch HelloWorld]]></title>
    <link href="http://yoursite.com/2015/08/26/SpringBatch/"/>
    <id>http://yoursite.com/2015/08/26/SpringBatch/</id>
    <published>2015-08-26T12:28:47.000Z</published>
    <updated>2015-08-27T14:51:13.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、Spring_Batch流程">一、Spring Batch流程</h3><img src="/imgs/SpringBatch流程.png" width="600" height="300">
<p>　　每个Batch都会包含一个Job，每个Job装了若干Step，Step读取数据，处理数据，然后将这些数据存储起来(ItemReader用来读取数据，ItemProcessor用来处理数据，ItemWriter用来写数据) 。JobLauncher用来启动Job，JobRepository是上述处理提供的一种持久化机制，它为JobLauncher，Job，和Step实例提供CRUD(Create\Retrieve\Update\Delete)操作。</p>
<blockquote>
<p>1 Job = Many Steps.<br>1 Step = 1 READ-PROCESS-WRITE or 1 Tasklet.<br>Job = {Step 1 -&gt; Step 2 -&gt; Step 3} (Chained together)</p>
</blockquote>
<p>　　从DB或是文件中取出数据的时候，read操作每次只读取一条记录，之后将读取的这条数据传递给processor(item)处理，框架将重复做这两步操作，直到读取记录的件数达到batch配置信息中”commin-interval”设定值的时候，就会调用一次write操作。然后再重复以上处理，直到处理完所有的数据。当这个Step的工作完成以后，或是跳到其他Step，或是结束处理。</p>
<h3 id="二、Spring_Batch_Jobs">二、Spring Batch Jobs</h3><h4 id="1、job-hello-world-xml">1、job-hello-world.xml</h4><img src="/imgs/helloWorldJob.png" width="600" height="300">
<p>　　首先，helloWorldJob里面配置了读（cvsFileItemReader），写（xmlItemWriter） 以及处理（itemProcessor），并设置了commit-interval=”10”。<br>　　之后，对cvsFileItemReader中涉及的resource和lineMapper进行配置。对xmlItemWriter中涉及的resource、marshaller、rootTagName进行配置。而处理过程，则由稍后讲述的itemProcessor.java完成。</p>
<pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:batch</span>=<span class="value">"http://www.springframework.org/schema/batch"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/batch
    http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"../config/context.xml"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"../config/database.xml"</span> /&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"report"</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.model.Report"</span> <span class="attribute">scope</span>=<span class="value">"prototype"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"itemProcessor"</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.CustomItemProcessor"</span> /&gt;</span>

    <span class="tag">&lt;<span class="title">batch:job</span> <span class="attribute">id</span>=<span class="value">"helloWorldJob"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">batch:step</span> <span class="attribute">id</span>=<span class="value">"step1"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">batch:tasklet</span>&gt;</span>
                <span class="tag">&lt;<span class="title">batch:chunk</span> <span class="attribute">reader</span>=<span class="value">"cvsFileItemReader"</span> <span class="attribute">writer</span>=<span class="value">"xmlItemWriter"</span> <span class="attribute">processor</span>=<span class="value">"itemProcessor"</span><span class="value">commit-interval="10"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">batch:chunk</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">batch:tasklet</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">batch:step</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">batch:job</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"cvsFileItemReader"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.FlatFileItemReader"</span>&gt;</span>

        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"resource"</span> <span class="attribute">value</span>=<span class="value">"classpath:cvs/input/report.csv"</span> /&gt;</span>

        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"lineMapper"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.mapping.DefaultLineMapper"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"lineTokenizer"</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">bean</span> 
                        <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.file.transform.DelimitedLineTokenizer"</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"names"</span> <span class="attribute">value</span>=<span class="value">"id,sales,qty,staffName,date"</span> /&gt;</span>
                    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"fieldSetMapper"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"com.mkyong.ReportFieldSetMapper"</span> /&gt;</span>
                <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>

    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xmlItemWriter"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.batch.item.xml.StaxEventItemWriter"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"resource"</span> <span class="attribute">value</span>=<span class="value">"file:xml/outputs/report.xml"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"marshaller"</span> <span class="attribute">ref</span>=<span class="value">"reportMarshaller"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"rootTagName"</span> <span class="attribute">value</span>=<span class="value">"report"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"reportMarshaller"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.oxm.jaxb.Jaxb2Marshaller"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"classesToBeBound"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">list</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>com.mkyong.model.Report<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><h4 id="2、ReportFieldSetMapper-java">2、ReportFieldSetMapper.java</h4><p>　　读取时，主要是通过ReportFieldSetMapper.java来完成report.csv到Report.java的映射。</p>
<pre><code>package com.mkyong;

<span class="built_in">import</span> java.<span class="built_in">text</span>.ParseException;
<span class="built_in">import</span> java.<span class="built_in">text</span>.SimpleDateFormat;
<span class="built_in">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;
<span class="built_in">import</span> org.springframework.batch.item.file.transform.FieldSet;
<span class="built_in">import</span> org.springframework.validation.BindException;
<span class="built_in">import</span> com.mkyong.model.Report;

public class ReportFieldSetMapper implements FieldSetMapper&lt;Report&gt; {

private SimpleDateFormat dateFormat = new SimpleDateFormat<span class="params">(<span class="string">"dd/MM/yyyy"</span>)</span>;

@Override
public Report mapFieldSet<span class="params">(FieldSet fieldSet)</span> throws BindException {

    Report report = new Report<span class="params">()</span>;
    report.setId<span class="params">(fieldSet.readInt<span class="params">(<span class="number">0</span>)</span>)</span>;
    report.setSales<span class="params">(fieldSet.readBigDecimal<span class="params">(<span class="number">1</span>)</span>)</span>;
    report.setQty<span class="params">(fieldSet.readInt<span class="params">(<span class="number">2</span>)</span>)</span>;
    report.setStaffName<span class="params">(fieldSet.readString<span class="params">(<span class="number">3</span>)</span>)</span>;

    <span class="comment">//default format yyyy-MM-dd</span>
    <span class="comment">//fieldSet.readDate(4);</span>
    String date = fieldSet.readString<span class="params">(<span class="number">4</span>)</span>;
    try {
        report.setDate<span class="params">(dateFormat.parse<span class="params">(date)</span>)</span>;
    } catch <span class="params">(ParseException e)</span> {
        e.printStackTrace<span class="params">()</span>;
    }

    return report;
}
</code></pre><p>}</p>
<h4 id="3、report-csv">3、report.csv</h4><pre><code><span class="number">1001</span>,<span class="string">"213,100"</span>,<span class="number">980</span>,<span class="string">"mkyong"</span>, <span class="number">29</span>/<span class="number">7</span>/<span class="number">2013</span>
<span class="number">1002</span>,<span class="string">"320,200"</span>,<span class="number">1080</span>,<span class="string">"staff 1"</span>, <span class="number">30</span>/<span class="number">7</span>/<span class="number">2013</span>
<span class="number">1003</span>,<span class="string">"342,197"</span>,<span class="number">1200</span>,<span class="string">"staff 2"</span>, <span class="number">31</span>/<span class="number">7</span>/<span class="number">2013</span>
</code></pre><h4 id="4、Report-java">4、Report.java</h4><pre><code><span class="keyword">package</span> com.mkyong.model;

<span class="keyword">import</span> java.math.BigDecimal;
<span class="keyword">import</span> java.util.Date;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlAttribute;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;
<span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;

<span class="annotation">@XmlRootElement</span>(name = <span class="string">"record"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Report</span> </span>{

    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> BigDecimal sales;
    <span class="keyword">private</span> <span class="keyword">int</span> qty;
    <span class="keyword">private</span> String staffName;
    <span class="keyword">private</span> Date date;

    <span class="annotation">@XmlAttribute</span>(name = <span class="string">"id"</span>)
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{<span class="keyword">return</span> id;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{<span class="keyword">this</span>.id = id;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"sales"</span>)
    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getSales</span><span class="params">()</span> </span>{<span class="keyword">return</span> sales;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSales</span><span class="params">(BigDecimal sales)</span> </span>{<span class="keyword">this</span>.sales = sales;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"qty"</span>)
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQty</span><span class="params">()</span> </span>{<span class="keyword">return</span> qty;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQty</span><span class="params">(<span class="keyword">int</span> qty)</span> </span>{    <span class="keyword">this</span>.qty = qty;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"staffName"</span>)
    <span class="function"><span class="keyword">public</span> String <span class="title">getStaffName</span><span class="params">()</span> </span>{<span class="keyword">return</span> staffName;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStaffName</span><span class="params">(String staffName)</span> </span>{<span class="keyword">this</span>.staffName = staffName;}

    <span class="annotation">@XmlElement</span>(name = <span class="string">"date"</span>)
    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>{<span class="keyword">return</span> date;}

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>{<span class="keyword">this</span>.date = date;}

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"Report [id="</span> + id +
                <span class="string">", sales="</span> + sales +
                <span class="string">", qty="</span> + qty +
                <span class="string">", staffName="</span> + staffName +
                <span class="string">"]"</span>;
    }
}
</code></pre><h4 id="5、CustomItemProcessor-java">5、CustomItemProcessor.java</h4><pre><code><span class="keyword">package</span> com.mkyong;

<span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;
<span class="keyword">import</span> com.mkyong.model.Report;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Report</span>, <span class="title">Report</span>&gt; </span>{

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> Report <span class="title">process</span><span class="params">(Report item)</span> <span class="keyword">throws</span> Exception </span>{

        System.out.println(<span class="string">"Processing..."</span> + item);
        <span class="keyword">return</span> item;
    }
}
</code></pre><h3 id="三、创建测试App">三、创建测试App</h3><p>在App.java中</p>
<pre><code>package com.mkyong;

<span class="keyword">import</span> org.springframework.batch.core.Job;
<span class="keyword">import</span> org.springframework.batch.core.JobExecution;
<span class="keyword">import</span> org.springframework.batch.core.JobParameters;
<span class="keyword">import</span> org.springframework.batch.core.launch.JobLauncher;
<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

public <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>{
    public static <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) {

        <span class="built_in">String</span>[] springConfig  = {<span class="string">"spring/batch/jobs/job-hello-world.xml"</span>};
        ApplicationContext context = 
                <span class="keyword">new</span> ClassPathXmlApplicationContext(springConfig);

        JobLauncher jobLauncher = (JobLauncher) context.getBean(<span class="string">"jobLauncher"</span>);
        Job job = (Job) context.getBean(<span class="string">"helloWorldJob"</span>);

        <span class="keyword">try</span> {
            JobExecution execution = jobLauncher.run(job, <span class="keyword">new</span> JobParameters());
            System.out.println(<span class="string">"Exit Status : "</span> + execution.getStatus());

        } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }

        System.out.println(<span class="string">"Done"</span>);
    }
}
</code></pre><h3 id="四、结果">四、结果</h3><p>report.xml</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">report</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1001"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-29T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>980<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>213100<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>mkyong<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1002"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-30T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>1080<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>320200<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>staff 1<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
    <span class="tag">&lt;<span class="title">record</span> <span class="attribute">id</span>=<span class="value">"1003"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">date</span>&gt;</span>2013-07-31T00:00:00+08:00<span class="tag">&lt;/<span class="title">date</span>&gt;</span>
        <span class="tag">&lt;<span class="title">qty</span>&gt;</span>1200<span class="tag">&lt;/<span class="title">qty</span>&gt;</span>
        <span class="tag">&lt;<span class="title">sales</span>&gt;</span>342197<span class="tag">&lt;/<span class="title">sales</span>&gt;</span>
        <span class="tag">&lt;<span class="title">staffName</span>&gt;</span>staff 2<span class="tag">&lt;/<span class="title">staffName</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">record</span>&gt;</span>
<span class="tag">&lt;/<span class="title">report</span>&gt;</span>
</code></pre><p>console:</p>
<pre><code>Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.launch.support.SimpleJobLauncher$<span class="number">1</span> run
INFO: Job: [FlowJob: [name=helloWorldJob]] launched with the following parameters: [{}]
Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.job.SimpleStepHandler handleStep
INFO: Executing step: [step1]
Processing...Report [id=<span class="number">1001</span>, sales=<span class="number">213100</span>, qty=<span class="number">980</span>, staffName=mkyong]
Processing...Report [id=<span class="number">1002</span>, sales=<span class="number">320200</span>, qty=<span class="number">1080</span>, staffName=staff <span class="number">1</span>]
Processing...Report [id=<span class="number">1003</span>, sales=<span class="number">342197</span>, qty=<span class="number">1200</span>, staffName=staff <span class="number">2</span>]
Exit Status : COMPLETED
Aug <span class="number">26</span>, <span class="number">2015</span> <span class="number">8</span>:<span class="number">15</span>:<span class="number">40</span> PM org.springframework.batch.core.launch.support.SimpleJobLauncher$<span class="number">1</span> run
Done
INFO: Job: [FlowJob: [name=helloWorldJob]] completed with the following parameters: [{}] and the following status: [COMPLETED]
</code></pre><h3 id="五、目录结构">五、目录结构</h3><img src="/imgs/SpringBatchHelloWorld.png" width="300" height="500">
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、Spring_Batch流程">一、Spring Batch流程</h3><img src="/imgs/SpringBatch流程.png" width="600" height="300">
<p>　　每个Batch都会包含一个Job，每个Job装了若干S]]>
    </summary>
    
      <category term="Spring Batch" scheme="http://yoursite.com/tags/Spring-Batch/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring依赖注入]]></title>
    <link href="http://yoursite.com/2015/08/25/SpringDI/"/>
    <id>http://yoursite.com/2015/08/25/SpringDI/</id>
    <published>2015-08-25T14:40:55.000Z</published>
    <updated>2015-08-27T14:50:47.000Z</updated>
    <content type="html"><![CDATA[<p>　　控制反转IoC(Inversion of Control),它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。其主要实现方式有两种：<br></p>
<blockquote>
<p>　　<1>依赖查找（Dependency Lookup）：容器提供回调接口和上下文环境给组件。EJB和Apache Avalon都使用这种方式。<br><br>　　<2>依赖注入（Dependency Injection）：组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。后者是时下最流行的IoC类型，其又有接口注入（Interface Injection），设值注入（Setter Injection）和构造子注入（Constructor Injection）三种方式。
　　　　　</2></1></p>
</blockquote>
<h3 id="1、接口注入">1、接口注入</h3><pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassA</span> {
    <span class="keyword">private</span> InterfaceB clzB;
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>{
    Ojbect obj =Class.forName(Config.BImplementation).newInstance();
    clzB = (InterfaceB)obj;
    clzB.doIt()
}
</code></pre><p>　　ClassA依赖于InterfaceB的实现，传统的方法是在代码中创建 InterfaceB实现类的实例，ClassA在编译期即依赖于InterfaceB的实现。<br><br>　　我们预先在配置文件中设定的实现类的类名Config.BImplementation，动态加载实现类，并通过InterfaceB强制转型后为ClassA 所用，将调用者与实现者在编译期分离。</p>
<h3 id="2、setter注入">2、setter注入</h3><h3 id="3、构造子注入">3、构造子注入</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>　　控制反转IoC(Inversion of Control),它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。其主要实现方式有两种：<br></p>
<blockquote>
<p>　　<1>依赖查找（Dependency Look]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring初识]]></title>
    <link href="http://yoursite.com/2015/08/25/Spring/"/>
    <id>http://yoursite.com/2015/08/25/Spring/</id>
    <published>2015-08-25T12:46:40.000Z</published>
    <updated>2015-08-27T14:51:34.000Z</updated>
    <content type="html"><![CDATA[<p>　　Spring是一个轻量级的Java 开发框架，其核心是控制反转（IoC）和面向切面（AOP）。第一次看到这些概念，并不知其所云，还是从一个简单的HelloWorld来认识Spring吧。</p>
<h3 id="一、创建一个Spring_Bean">一、创建一个Spring Bean</h3><p>在HelloWorld.java文件中</p>
<pre><code>package com.zhangyu.common;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> 
{
    <span class="keyword">private</span> String name;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>{
        <span class="keyword">this</span>.name = name;
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHello</span>(<span class="params"></span>) </span>{
        System.<span class="keyword">out</span>.println(<span class="string">"Hello ! "</span> + name);
    }
}
</code></pre><h3 id="二、创建Spring_Bean的配置文件">二、创建Spring Bean的配置文件</h3><p>在Spring-Module.xml文件中</p>
<pre><code><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"helloBean"</span> <span class="attribute">class</span>=<span class="value">"com.zhangyu.common.HelloWorld"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">value</span>=<span class="value">"zhangyu"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><h3 id="三、创建测试App">三、创建测试App</h3><p>在App.java文件中</p>
<pre><code><span class="keyword">package</span> com.zhangyu.common;

<span class="keyword">import</span> org.springframework.context.ApplicationContext;
<span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> 
</span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span>
    </span>{
        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Spring-Module.xml"</span>);     
        HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloBean"</span>);
        obj.printHello();           
    }
}
</code></pre><h3 id="四、结果">四、结果</h3><pre><code><span class="variable">Hello</span> <span class="exclamation_mark">!</span> <span class="function_or_atom">zhangyu</span>
</code></pre><h3 id="五、目录结构">五、目录结构</h3><img src="/imgs/SpringHelloWorld.png" width="300" height="500">
<p>　　1、我们根据Spring-Module.xml创建了一个ApplicationContext实例，并从实例中获取我们所需的Action实现。<br><br>　　2、通过xml文件动态设置HelloWorld的name属性，无需知道实现类的具体名称。同时，我们可以通过修改配置文件来切换具体的底层实现类。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Spring是一个轻量级的Java 开发框架，其核心是控制反转（IoC）和面向切面（AOP）。第一次看到这些概念，并不知其所云，还是从一个简单的HelloWorld来认识Spring吧。</p>
<h3 id="一、创建一个Spring_Bean">一、创建一个Spri]]>
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我在TW的第一周]]></title>
    <link href="http://yoursite.com/2015/08/15/%E6%88%91%E5%9C%A8TW%E7%9A%84%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <id>http://yoursite.com/2015/08/15/我在TW的第一周/</id>
    <published>2015-08-15T13:16:18.000Z</published>
    <updated>2015-08-27T14:50:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="关于旅程">关于旅程</h3><blockquote>
<p>&emsp;&emsp;&emsp;&emsp;以前“看天上云卷云舒”，如今第一次坐飞机，感受着穿梭、萦绕、凌驾的快感，体会由低至高不一样的感观与享受。</p>
</blockquote>
<h3 id="关于住宿">关于住宿</h3><blockquote>
<p>&emsp;&emsp;&emsp;&emsp;好大的客厅和沙发、好新的床和柜子、好齐全的厨具和生活设备，我会不会变懒呢？</p>
</blockquote>
<h3 id="关于工作">关于工作</h3><blockquote>
<p>&emsp;&emsp;&emsp;&emsp;新来的小伙伴们一部分直接去了TWU，留下我们五个女生on the beach。<br><br>&emsp;&emsp;&emsp;&emsp;每天必刷微信、邮件、日历，但是手机却总是不见踪影。<br><br>&emsp;&emsp;&emsp;&emsp;融入工作，好多东西都想去了解。现实是回到宿舍，打开电脑，时间飞快，该睡觉了。</p>
</blockquote>
<h3 id="关于周末">关于周末</h3><blockquote>
<p>&emsp;&emsp;&emsp;&emsp;陌生的城市，闲逛，寻求一种最初的印象。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="关于旅程">关于旅程</h3><blockquote>
<p>&emsp;&emsp;&emsp;&emsp;以前“看天上云卷云舒”，如今第一次坐飞机，感受着穿梭、萦绕、凌驾的快感，体会由低至高不一样的感观与享受。</p>
</blockquote>
<h3 id]]>
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/15/hello-world/"/>
    <id>http://yoursite.com/2015/08/15/hello-world/</id>
    <published>2015-08-15T10:33:28.000Z</published>
    <updated>2015-08-15T10:33:28.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>