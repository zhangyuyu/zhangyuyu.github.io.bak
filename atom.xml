<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若见喻笺</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-09T13:48:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Workshop（一）容器简介</title>
    <link href="http://yoursite.com/2017/07/09/Docker-workshop-1-%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/07/09/Docker-workshop-1-容器/</id>
    <published>2017-07-09T10:25:04.000Z</published>
    <updated>2017-07-09T13:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>“不想在自己电脑上装一堆东西，恩，弄个docker容器，随便安装，随便破坏，随便试验的玩吧！”，这是笔者了解docker的初衷。<br>后来回到武汉弄起了《Docker in Production》的workshop，正好项目也用到了docker，这才有股动力push我系统的了解一下docker。</p>
<h3 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h3><p>该系列《Docker in Prodcution》内容包含如下部分：</p>
<ul>
<li>容器简介</li>
<li>Docker的介绍</li>
<li>Docker的基本操作</li>
<li>Docker数据存储</li>
<li>Docker网络</li>
<li>Docker安全</li>
<li>多主机部署</li>
<li>服务发现</li>
<li>日志、跟踪、监控</li>
</ul>
<p>本篇主要讲述容器相关的知识，比较容器和虚拟机，练习LXC容器的相关指令，最后引出Docker。</p>
<h3 id="三、容器的定义"><a href="#三、容器的定义" class="headerlink" title="三、容器的定义"></a>三、容器的定义</h3><p>容器是一种轻量级、可移植、自包含的软件打包技术，使应用程序可以在几乎任何地方以相同的方式运行。开发人员在自己笔记本上创建并测试好的容器，无需任何修改就能够在生产系统的虚拟机、物理服务器或公有云主机上运行。</p>
<img src="/imgs/container-structure.png" width="400" height="250">
<p>容器是轻量级的操作系统级虚拟化，可以让我们在一个资源隔离的进程中运行应用及其依赖项。运行应用程序所必需的组件都将打包成一个镜像并可以复用。执行镜像时，它运行在一个隔离环境中，并且不会共享宿主机的内存、CPU 以及磁盘，这就保证了容器内进程不能监控容器外的任何进程。</p>
<h3 id="四、容器解决的问题"><a href="#四、容器解决的问题" class="headerlink" title="四、容器解决的问题"></a>四、容器解决的问题</h3><p>为什么需要容器？容器到底解决的是什么问题？一句话回答是：容器使软件具备了超强的可移植能力。</p>
<h4 id="1-从运输行业的集装箱说起"><a href="#1-从运输行业的集装箱说起" class="headerlink" title="1. 从运输行业的集装箱说起"></a>1. 从运输行业的集装箱说起</h4><p>20世纪60年代以前，运输行业几乎所有的货物都是以<em>散件</em>方式运输。</p>
<p>每一次运输，一方面货主与承运方会担心因货物类型的不同而导致损失，如几个铁桶压在了一堆香蕉上。<br>另外一方面，运输过程中需要使用不同的交通工具严重浪费了大量的时间和精力，如货物先搬上车，到了码头由码头工人卸货，然后装上船，到岸之后卸下船，再装上火车，到达目的地，最后卸货……中间可能还有更多种类的交通工具，涉及到更多次的装、卸货、转移过程。</p>
<img src="/imgs/container-in-transportation1.png" width="400" height="250">
<p>幸运的是，集装箱的发现解决了这个难题。</p>
<img src="/imgs/container-in-transportation2.png" width="400" height="250">
<p>无论货物的体积、形状差异有多大，最终都被装载进集装箱里。由于要实现标准尺寸集装箱的运输，堆场、码头、起吊、船舶、汽车乃至公路桥梁、隧道等，都必须适应它在全球范围内的应用而逐渐加以标准化，形成影响国际贸易的全球物流系统。由此带来的是系统效率大幅度提升，运输费大幅度下降，地球上任何一个地方生产的产品都可以快速而低廉地运送到有需求的地方。</p>
<table>
<thead>
<tr>
<th>比较</th>
<th style="text-align:right">散货运输</th>
<th style="text-align:center">集装箱运输</th>
</tr>
</thead>
<tbody>
<tr>
<td>货物装卸时间</td>
<td style="text-align:right">几天到一个星期，分拣、合并、装卸过程繁琐</td>
<td style="text-align:center">几个小时</td>
</tr>
<tr>
<td>货物装卸时间占整个运输过程的比例</td>
<td style="text-align:right">&gt;50%</td>
<td style="text-align:center">&lt;10%</td>
</tr>
<tr>
<td>所需劳动力</td>
<td style="text-align:right">大量的码头工人</td>
<td style="text-align:center">少数的码头工人和起重机操作员</td>
</tr>
<tr>
<td>自动化程度</td>
<td style="text-align:right">低</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td>安全性</td>
<td style="text-align:right">低，装卸时常有物品损毁和盗窃</td>
<td style="text-align:center">高，货物被隔离在封闭的集装箱内</td>
</tr>
<tr>
<td>成本</td>
<td style="text-align:right">货物越多，成本越高，耗时越长</td>
<td style="text-align:center">前期固定成本投入较高，随着集装箱规模、运货量的增加，分摊到运送每个集装箱的成本极低，总成本几乎不变</td>
</tr>
</tbody>
</table>
<h4 id="2-应用程序中的容器"><a href="#2-应用程序中的容器" class="headerlink" title="2. 应用程序中的容器"></a>2. 应用程序中的容器</h4><p>同样，我们看看今天的软件开发面临的挑战。</p>
<p>以前几乎所有的应用都采用三层架构（Presentation/Appliation/Data），系统部署到有限的几台物理服务器上。如今，开发人员通常使用多种服务（如MQ、cache、DB）构建和组装应用，此外应用很可能部署到不同的环境（如虚拟服务器、私有云和公有云）。一方面应用包含多种服务，这些服务有自己所依赖的库和软件包；另一方面存在多种部署环境，服务在运行时可能需要动态迁移到不同的环境中。如何让每种服务能够在所有的部署环境中顺利运行？<br>“服务”和“应用环境”对应到前面运输行业的“货物类型”和“运输工具”，容器则对应“集装箱”。<br><img src="/imgs/container-in-application.png" width="400" height="250"></p>
<h3 id="五、为什么容器技术如此诱人？"><a href="#五、为什么容器技术如此诱人？" class="headerlink" title="五、为什么容器技术如此诱人？"></a>五、为什么容器技术如此诱人？</h3><h4 id="1-封装、隔离"><a href="#1-封装、隔离" class="headerlink" title="1. 封装、隔离"></a>1. 封装、隔离</h4><p>各个容器之间，资源独立、隔离，不同的应用以container为单位进行部署，环境互不影响。</p>
<h4 id="2-轻量、可移植"><a href="#2-轻量、可移植" class="headerlink" title="2. 轻量、可移植"></a>2. 轻量、可移植</h4><p>相比于传统的虚拟化技术，容器在cpu、memory、network IO上的性能损耗都有同样水平甚至更优，容器的创建、启动、销毁都很快。</p>
<h4 id="3-标准化、run-on-any-hardware"><a href="#3-标准化、run-on-any-hardware" class="headerlink" title="3. 标准化、run on any hardware"></a>3. 标准化、run on any hardware</h4><p>开发人员只需为按照一定的标准为应用创建一次运行环境，然后打包成容器便可在其他机器上运行。</p>
<h4 id="4-一致性、可重复性"><a href="#4-一致性、可重复性" class="headerlink" title="4. 一致性、可重复性"></a>4. 一致性、可重复性</h4><p>标准化的容器消除了开发、测试、生产环境的不一致性。</p>
<h3 id="六、容器与虚拟机"><a href="#六、容器与虚拟机" class="headerlink" title="六、容器与虚拟机"></a>六、容器与虚拟机</h3><p>谈到容器，就不得不将它与虚拟机进行对比，因为两者都是为应用提供封装和隔离。<br>一句话解释区别：容器能做的事少得多并且使用起来相当廉价。而虚拟机提供整个虚拟化硬件层，可以做更多的事情但是使用成本显著。</p>
<img src="/imgs/container-vs-vms.png" width="400" height="250">
<p>主要区别如下：</p>
<ol>
<li>容器实例与主机共享操作系统内核，通过内核提供的运行时隔离能力为服务提供独立的用户域、文件系统、网络以及进程运行空间。<br>虚拟机的每个实例自带操作系统，因而是一种硬件级的虚拟化隔离。</li>
<li>容器通常是专用于运行特定服务的，它的镜像通常只包含运行该服务所需的上下文内容，许多广泛使用的镜像都只有几十MB，甚至几MB大小。<br>虚拟机则需要提供包括内核在内的通用进程运行环境，它的镜像偏向于大而完整的全功能集合，即使一个最小的精简镜像的体积也有几百MB。</li>
<li>容器的使用方式倾向于开箱即用，镜像提供的是一个『不可变的基础设施环境』。<br>虚拟机则倾向于让用户根据所用的系统，自定义初始化操作，使用Ansible、Puppet这样的配置工具来进行基础设施的管理</li>
<li>容器在启动速度和运行性能上更有优势，虚拟机在安全性上更有优势。</li>
</ol>
<h3 id="七、容器的分类"><a href="#七、容器的分类" class="headerlink" title="七、容器的分类"></a>七、容器的分类</h3><h4 id="1-操作系统容器"><a href="#1-操作系统容器" class="headerlink" title="1. 操作系统容器"></a>1. 操作系统容器</h4><p>操作系统层虚拟化是一种计算机虚拟化技术，这种技术将操作系统内核虚拟化，可以允许多个独立用户空间的存在，而不是只有一个。这些实例有时会被称为容器、虚拟引擎、虚拟专用服务器或是 jails（FreeBSD jail 或者 chroot jail）。从运行在容器中的程序角度来看，这些实例就如同真正的计算机。</p>
<p>容器技术如 LXC，OpenVZ，Linux VServer，BSD Jails 和 Solaris 区域就是操作系统容器。</p>
<h4 id="2-应用容器"><a href="#2-应用容器" class="headerlink" title="2. 应用容器"></a>2. 应用容器</h4><p>应用程序虚拟化是从其所执行的底层操作系统封装计算机程序的软件技术。一个完全虚拟化的应用，尽管仍像原来一样执行，但是并不会进行传统意义上的安装。应用在运行时的行为就像它直接与原始操作系统以及操作系统所管理的所有资源进行交互一样，但可以实现不同程度的隔离或者沙盒化。</p>
<p>容器技术如 Docker 和 Rocket 就是应用程序容器的示例。</p>
<h3 id="八、LXC的练习"><a href="#八、LXC的练习" class="headerlink" title="八、LXC的练习"></a>八、LXC的练习</h3><p>LXC是Linux containers的简称，是一种基于容器的操作系统层级的虚拟化技术。</p>
<h4 id="【练习1】创建LXC容器"><a href="#【练习1】创建LXC容器" class="headerlink" title="【练习1】创建LXC容器"></a>【练习1】创建LXC容器</h4><ol>
<li>Ubuntu系统上安装好lxc</li>
<li><p>宿主机上操作</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 列出所有的容器:</span></div><div class="line">sudo lxc-ls --fancy</div><div class="line"><span class="meta">#</span><span class="bash"> 启动一个后台运行的容器demo-container:</span></div><div class="line">sudo lxc-start --name demo-container --daemon</div><div class="line"><span class="meta">#</span><span class="bash"> 查看运行的容器的相关信息:</span></div><div class="line">sudo lxc-info --name demo-container</div><div class="line"><span class="meta">#</span><span class="bash"> 进入到容器:</span></div><div class="line">sudo lxc-console -n demo-container</div><div class="line"><span class="meta">#</span><span class="bash"> 登陆时候输入:</span></div><div class="line">Username: ubuntu</div><div class="line">Password: ubuntu</div></pre></td></tr></table></figure>
</li>
<li><p>LXC容器中操作</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 查看容器的hostname</span></div><div class="line">hostname</div><div class="line"><span class="meta"># 在容器中创建一个文件</span></div><div class="line">echo <span class="string">"hello"</span> &gt; my_text.txt</div><div class="line">cat my_text.txt</div></pre></td></tr></table></figure>
</li>
<li><p>退出容器<br>先按下<code>ctrl+a</code>，然后再按<code>q</code>。</p>
</li>
</ol>
<h4 id="【练习2】克隆LXC容器"><a href="#【练习2】克隆LXC容器" class="headerlink" title="【练习2】克隆LXC容器"></a>【练习2】克隆LXC容器</h4><ol>
<li><p>宿主机上操作</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 冻结运行的容器</span></div><div class="line">sudo lxc-freeze -n demo-container</div><div class="line"><span class="meta">#</span><span class="bash"> 列出所有的容器:</span></div><div class="line">sudo lxc-ls --fancy</div><div class="line"><span class="meta">#</span><span class="bash"> 克隆容器之前，必须要先停止容器</span></div><div class="line">sudo lxc-stop --name demo-container</div><div class="line">sudo lxc-clone -o demo-container -n cloned-container</div><div class="line"><span class="meta">#</span><span class="bash"> 列出所有的容器:</span></div><div class="line">sudo lxc-ls --fancy</div><div class="line"><span class="meta">#</span><span class="bash"> 启动复制的容器</span></div><div class="line">sudo lxc-start --name cloned-container --daemon</div><div class="line"><span class="meta">#</span><span class="bash"> 进入到复制的容器:</span></div><div class="line">sudo lxc-console -n cloned-container</div><div class="line"><span class="meta">#</span><span class="bash"> 登陆时候输入:</span></div><div class="line">Username: ubuntu</div><div class="line">Password: ubuntu</div></pre></td></tr></table></figure>
</li>
<li><p>克隆的容器中操作</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看克隆的容器是否也一起克隆了之前创建的文件</span></div><div class="line"><span class="keyword">ls</span></div></pre></td></tr></table></figure>
</li>
<li><p>退出容器<br>先按下<code>ctrl+a</code>，然后再按<code>q</code>。</p>
</li>
<li><p>停止克隆的容器</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lxc-<span class="keyword">stop</span> --<span class="keyword">name</span> cloned-container</div></pre></td></tr></table></figure>
</li>
<li><p>销毁克隆的容器</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lxc-destroy <span class="comment">--name cloned-container</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本篇文章主要是涉及容器，从what, why, how上讲述了容器的相关知识。<br>至于容器的历史，有兴趣的读者可以自己查看一下相关资料。<br><a href="http://www.dockone.io/article/1522" target="_blank" rel="external">容器简史：从20世纪70年代的chroot到2016的Docker</a>以及<a href="http://www.alauda.cn/2016/01/18/container-history/" target="_blank" rel="external">【容器那些事儿】容器技术的前世今生</a><br>下一篇将讲述Docker的出现以及相关的基本理论知识。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="http://dockone.io/article/803" target="_blank" rel="external">为什么容器技术将主宰世界？</a></li>
<li><a href="http://dockone.io/article/2442" target="_blank" rel="external">容器技术概览</a></li>
<li><a href="https://www.ibm.com/developerworks/community/blogs/132cfa78-44b0-4376-85d0-d3096cd30d3f/entry/%E5%AE%B9%E5%99%A8_What_Why_How_%E6%AF%8F%E5%A4%A95%E5%88%86%E9%92%9F%E7%8E%A9%E8%BD%AC%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF_6?lang=zh" target="_blank" rel="external">容器What, Why, How - 每天5分钟玩转容器技术 - IBM</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-lxc-containers/" target="_blank" rel="external">LXC：Linux 容器工具</a></li>
<li><a href="http://17173ops.com/2013/11/14/linux-lxc-install-guide.shtml#toc2" target="_blank" rel="external">LXC基础学习教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;“不想在自己电脑上装一堆东西，恩，弄个docker容器，随便安装，随便破坏，随便试验的玩吧！”，这是笔者了解docker的初
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于RabbitMQ topic的消息发送与接收</title>
    <link href="http://yoursite.com/2017/01/14/%E5%9F%BA%E4%BA%8ERabbitMQ%20topic%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/"/>
    <id>http://yoursite.com/2017/01/14/基于RabbitMQ topic的消息发送与接收/</id>
    <published>2017-01-14T08:19:46.000Z</published>
    <updated>2017-01-14T07:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><h4 id="1-项目结构："><a href="#1-项目结构：" class="headerlink" title="1.项目结构："></a>1.项目结构：</h4><img src="/imgs/rabbit-1.png" width="400" height="250">
<p>A是消息的生产者，B、C则是消息的consumer。A会通过queue（不关心其产品类型）发送消息给B、C。</p>
<h4 id="2-需求"><a href="#2-需求" class="headerlink" title="2.需求"></a>2.需求</h4><p>近期项目上，新增的D应用程序需要监听原有A应用程序的消息。按照以往的做法，我需要做如下两件事：</p>
<ul>
<li>向某个团队，给每该D应用的每个region（dev、intg、sys、prod等），申请新的queue A.D。（这中间可能需要两个星期时间）</li>
<li>改变应用A的代码，让其每次发消息时候还需要再给D发消息。</li>
<li>给应用A准备一次deploymen plan，并做相应的回归测试。</li>
<li>改变应用D的代码，让其从新建的queue里面接收处理消息。</li>
</ul>
<h4 id="3-痛点"><a href="#3-痛点" class="headerlink" title="3.痛点"></a>3.痛点</h4><p>这一做法，主要有两大痛点：</p>
<ul>
<li>每增加一个新应用，都需要申请queue</li>
<li>每增加一个新应用，都需要改动应用A的代码，还需要单独安排一次上线。生产者和消费者之间的耦合非常大。</li>
</ul>
<h4 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h4><p>因此，在兼容以前的基础上，我试图用下面的结构图解决上述痛点：<br><img src="/imgs/rabbit-2.png" width="400" height="250"><br>保持原有应用程序B和C的接收消息方式不变，新的应用程序开始改用topic的方法，这样可以兼容既有的应用程序，也可以将新应用程序的生产者和消费者解耦。但是还是存在一些问题：</p>
<ul>
<li>A的消息那么多，全部放在一个topic可能负载过大，那么应该采取分布式的方法？</li>
<li>如果消费者之一中途down了一段时间，该消息的等待时间又如何处理？是一直停留在topic中进行等待吗？</li>
</ul>
<p>最后，考虑到上述因素以及实际项目的其他因素，我将结构变成了如下：<br><img src="/imgs/rabbit-3.png" width="400" height="250"><br>虽然把最开始的痛点1又引入了，但是解耦的好处还是非常有意义的。</p>
<p>本文旨在spike上述想法，证明该想法的可能性。</p>
<h3 id="二、搭建外部环境"><a href="#二、搭建外部环境" class="headerlink" title="二、搭建外部环境"></a>二、搭建外部环境</h3><p>笔者采用vagrant + VirtualBox搭建一个含有rabbitmq server的虚拟机：<br>总体说来，所有的命令如下：</p>
<h4 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1.创建虚拟机"></a>1.创建虚拟机</h4><pre><code>$ mkdir rabbit
$ cd rabbit
$ vagrant box list
$ vagrant init yungsang/coreos
</code></pre><p>然后注意取消注释<code>config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</code></p>
<h4 id="2-登陆到虚拟机"><a href="#2-登陆到虚拟机" class="headerlink" title="2.登陆到虚拟机"></a>2.登陆到虚拟机</h4><pre><code>vagrant ssh
</code></pre><h4 id="3-外部访问rabbitmq的管理页面"><a href="#3-外部访问rabbitmq的管理页面" class="headerlink" title="3.外部访问rabbitmq的管理页面"></a>3.外部访问rabbitmq的管理页面</h4><p>URL：<code>http://192.168.33.10:15672/#/</code><br>用户名：<code>guest</code><br>密码：<code>guest</code></p>
<h3 id="三、Spike"><a href="#三、Spike" class="headerlink" title="三、Spike"></a>三、Spike</h3><p>在编写本文时候，笔者顺便了解了一下Rabbit MQ的相关基础模式与用法，可以参见上一篇文章<a href="http://zhangyuyu.github.io/2017/01/14/RabbitMQ%E5%88%9D%E6%8E%A2/" target="_blank" rel="external">RabbitMQ初探</a></p>
<p>再回过头来看这个spike，发现其实本文要实现的就是<a href="http://zhangyuyu.github.io/2017/01/14/RabbitMQ%E5%88%9D%E6%8E%A2/" target="_blank" rel="external">RabbitMQ初探</a>中的Topic Exchange模式。</p>
<p>其实说起来，就是JMS和AMQP的一个较大的区别：</p>
<ul>
<li>JMS有队列(Queues)和主题(Topics)两种形式，发送到JMS队列的消息最多只能被一个Client消费，发送到JMS主题的消息可能会被多个Clients消费；</li>
<li>AMQP只有队列(Queues)，队列的消息只能被单个接受者消费，发送者并不直接把消息发送到队列中，而是发送到Exchange中，该Exchage会与一个或多个队列绑定，能够实现与JMS队列和主题同样的功能。</li>
</ul>
<h3 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h3><p>本文只是针对其中的一点，进行了可行性的spike，但是实际应用中往往还涉及到很多复杂因素，比如技术上消息的事务处理和消息负载，另外还有项目进度、人员安排以及后续维护等问题。笔者不再过多阐述，谨以此文的小demo探究一些不一样的架构。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;h4 id=&quot;1-项目结构：&quot;&gt;&lt;a href=&quot;#1-项目结构：&quot; class=&quot;headerlink&quot; title=&quot;1.项
    
    </summary>
    
      <category term="Message" scheme="http://yoursite.com/categories/Message/"/>
    
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ初探</title>
    <link href="http://yoursite.com/2017/01/14/RabbitMQ%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/01/14/RabbitMQ初探/</id>
    <published>2017-01-14T02:19:46.000Z</published>
    <updated>2017-01-14T07:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在准备<code>基于RabbitMQ topic的消息发送与接收</code>的时候，顺便开始了这篇RabbitMQ初探。<br>安装过程这里就不再赘述，本博客主要记录一些初探过程。</p>
<h3 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h3><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p>
<h3 id="三、几种模式"><a href="#三、几种模式" class="headerlink" title="三、几种模式"></a>三、几种模式</h3><p>Rabbit MQ<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="external">官网教程</a>上，从六个方面给出了讲解和demo。但是这些demo都是从最基础的层面进行编写，所以我自己尝试时候用了spring boot的相关支持，简化了很多代码。同时在尝试之后，我大概将其分为三类：</p>
<ul>
<li>Hello World(Queue)</li>
<li>Publish/Subscribe(Exchange)</li>
<li>RPC</li>
</ul>
<p>下面分别回顾一下上述三类情况：</p>
<h4 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1.Hello World"></a>1.Hello World</h4><p>我把官网上的<a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="external">Hello World</a>和<a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html" target="_blank" rel="external">Work Queues</a>归到这一类。结构如下：</p>
<img src="/imgs/rabbitmq-hello-world.png" width="400" height="250">
<p align="center">Hello World</p>

<img src="/imgs/rabbitmq-work-queues.png" width="400" height="250">
<p align="center">Work Queues</p>

<p>它们都属于直接把消息发送给一个queue，然后consumers会与queue相连接。<br>相关代码可参考：<a href="https://github.com/zhangyuyu/learnrabbitmq/commits/master" target="_blank" rel="external">https://github.com/zhangyuyu/learnrabbitmq/commits/master</a> 的第一次、第二次提交。</p>
<h4 id="2-Publish-Subscribe-Exchange"><a href="#2-Publish-Subscribe-Exchange" class="headerlink" title="2.Publish/Subscribe(Exchange)"></a>2.Publish/Subscribe(Exchange)</h4><p>这种模式使用了Exchange，可以把它理解为消息交换机，它指定消息按什么规则，路由到哪个队列。<br>因此我把官网上的<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html" target="_blank" rel="external">Publish/Subscribe</a>、<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html" target="_blank" rel="external">Routing</a>、<a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="external">Topics</a>放到这一类中。</p>
<img src="/imgs/rabbitmq-exchanges.png" width="400" height="250">
<p>根据Exchange的类型，可以分为四类：</p>
<ul>
<li>Fanout</li>
<li>Direct</li>
<li>Topic</li>
<li>Headers</li>
</ul>
<h5 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h5><p>该类型路由规则非常简单，会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中，相当于广播功能<br>相关代码可参考：<a href="https://github.com/zhangyuyu/learnrabbitmq/commits/master" target="_blank" rel="external">https://github.com/zhangyuyu/learnrabbitmq/commits/master</a> 的Rabbitmq Fanout Exchange。</p>
<h5 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h5><p>该类型路由规则，会把消息路由到那些binding key与routing key完全匹配的Queue中。<br>相关代码可参考：<a href="https://github.com/zhangyuyu/learnrabbitmq/commits/master" target="_blank" rel="external">https://github.com/zhangyuyu/learnrabbitmq/commits/master</a> 的Rabbitmq Direct Exchange。</p>
<h5 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h5><p>该类型路由规则与上述Direct Exchange规则类似，只是在binding key与routing key的匹配规则上进行了扩展，它约定：</p>
<ul>
<li>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“routing.key.for.fist.queue”</li>
<li>binding key与routing key一样也是句点号“. ”分隔的字符串</li>
<li>binding key中可以存在两种特殊字符“*”与“#”，用于做模糊匹配，其中“”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）。</li>
</ul>
<p>相关代码可参考：<a href="https://github.com/zhangyuyu/learnrabbitmq/commits/master" target="_blank" rel="external">https://github.com/zhangyuyu/learnrabbitmq/commits/master</a> 的Rabbitmq Topic Exchange。</p>
<h5 id="Headers-Exchange"><a href="#Headers-Exchange" class="headerlink" title="Headers Exchange"></a>Headers Exchange</h5><p>headers类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。<br>相关代码可参考：<a href="https://github.com/zhangyuyu/learnrabbitmq/commits/master" target="_blank" rel="external">https://github.com/zhangyuyu/learnrabbitmq/commits/master</a> 的Rabbitmq Headers Exchange。</p>
<h4 id="3-RPC"><a href="#3-RPC" class="headerlink" title="3.RPC"></a>3.RPC</h4><p>MQ本身是基于异步的消息处理，前面的示例中所有的生产者（P）将消息发送到RabbitMQ后不会知道消费者（C）处理成功或者失败（甚至连有没有消费者来处理这条消息都不知道）。<br>但实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用），可直接参考<a href="https://www.rabbitmq.com/tutorials/tutorial-six-java.html" target="_blank" rel="external">官方教程</a>。</p>
<p>RabbitMQ中实现RPC的机制是：</p>
<ul>
<li>客户端发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14中properties，这些属性会随着消息一起发送）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）</li>
<li>服务器端收到消息并处理</li>
<li>服务器端处理完消息之后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性。</li>
<li>客户端之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理</li>
</ul>
<h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><h4 id="Dashboard："><a href="#Dashboard：" class="headerlink" title="Dashboard："></a>Dashboard：</h4><img src="/imgs/rabbitmq-terms.png" width="600" height="250">
<p>其中：</p>
<ul>
<li>Connection： 就是一个TCP的连接。Producer和Consumer都是通过TCP连接到RabbitMQ Server的。以后我们可以看到，程序的起始处就是建立这个TCP连接。</li>
<li>Channels： 虚拟连接。它建立在上述的TCP连接中。数据流动都是在Channel中进行的。也就是说，一般情况是程序起始建立TCP连接，第二步就是建立这个Channel。</li>
</ul>
<h4 id="术语："><a href="#术语：" class="headerlink" title="术语："></a>术语：</h4><ul>
<li>Broker：简单来说就是消息队列服务器实体。</li>
<li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li>
<li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li>
<li>Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。</li>
<li>Routing Key：路由关键字，exchange根据这个关键字进行消息投递。</li>
<li>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</li>
<li>producer：消息生产者，就是投递消息的程序。</li>
<li>consumer：消息消费者，就是接受消息的程序。</li>
<li>channel：消息通道，在客户端的每个连接里，可以建立多个channel，每个channel代表一个会话任务。</li>
</ul>
<h4 id="消息队列的使用过程大概如下："><a href="#消息队列的使用过程大概如下：" class="headerlink" title="消息队列的使用过程大概如下："></a>消息队列的使用过程大概如下：</h4><ul>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用routing key，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;在准备&lt;code&gt;基于RabbitMQ topic的消息发送与接收&lt;/code&gt;的时候，顺便开始了这篇RabbitMQ初探。
    
    </summary>
    
      <category term="Message" scheme="http://yoursite.com/categories/Message/"/>
    
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程初探（二）</title>
    <link href="http://yoursite.com/2016/11/12/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A22/"/>
    <id>http://yoursite.com/2016/11/12/函数式编程初探2/</id>
    <published>2016-11-12T11:35:10.000Z</published>
    <updated>2016-11-13T13:13:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://zhangyuyu.github.io/2016/11/12/函数式编程初探1" target="_blank" rel="external">上一篇</a>文章中介绍函数式编程的概念以及三个具有普遍意义的基本构造单元，本篇文章会接着讲述一些柯里化与部分施用、缓存、缓求值、函数式的数据结构。</p>
<h3 id="一、柯里化与部分施用"><a href="#一、柯里化与部分施用" class="headerlink" title="一、柯里化与部分施用"></a>一、柯里化与部分施用</h3><p>柯里化（currying）和函数的部分施用（partial application）都是从数学里借用过来的编程语言技法（基于20世纪haskell Curry等数学家的研究成果）。它们两者都有能力操纵函数的参数条目，一般是通过向一部分参数带入一个或多个默认值的办法来实现的。</p>
<p>柯里化指的是从一个多参数函数变成一连串单参数函数的变化。调用者可以决定对多少个参数实施变换，余下的部分将衍生为一个参数数目较少的新函数。如函数process(x,y,z)完全柯里化之后变成process(x)(y)(z)。<br>部分施用是指提前带入一部分参数值，使一个多参数函数得以省略部分参数，从而转化为一个参数数目较少的函数。如在函数process(x,y,z)上部分施用一个参数，那么我们将得到process(y,z)。</p>
<p>Groovy语言中部分施用与柯里化的对比：<br><figure class="highlight flix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">volume</span> </span>= &#123;h, w, l -&gt; h * w * l&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span> </span>= volume.curry(<span class="number">1</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthPA</span> </span>= volume.curry(<span class="number">1</span>, <span class="number">1</span>)         <span class="comment">// &lt;1&gt;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthC</span> </span>= volume.curry(<span class="number">1</span>).curry(<span class="number">1</span>)    <span class="comment">// &lt;2&gt;</span></div><div class="line"></div><div class="line">println <span class="string">"The volume of the 2x3x4 rectangular solid is $&#123;volume(2, 3, 4)&#125;"</span></div><div class="line">println <span class="string">"The area of the 3x4 rectangle is $&#123;area(3, 4)&#125;"</span></div><div class="line">println <span class="string">"The length of the 6 line is $&#123;lengthPA(6)&#125;"</span></div></pre></td></tr></table></figure></p>
<p>代码可参见《函数式编程思想》的<a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/groovy/currying.groovy" target="_blank" rel="external">github</a><br>柯里化常见的应用场景：函数工厂、模板方法模式、隐藏参数。</p>
<h3 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h3><p>缓存是很常见的一种需求（同时也是制造隐晦错误的源头）。缓存有两种实现方式：一种是手工进行状态管理，另一种是采用记忆机制。</p>
<h4 id="手工进行状态管理"><a href="#手工进行状态管理" class="headerlink" title="手工进行状态管理"></a>手工进行状态管理</h4><p>在代码里面增加一个filed，每次计算之前之前先去检查是否存在于缓存中。但是当我们将缓存的取值范围增大时，可能报出OutOfMemoryError的错误。</p>
<p>缓存可以提高性能，但是缓存有代价：它提高了代码的非本质复杂性和维护负担。同时，编写缓存的代码还要兼顾执行的环境（比如缓存范围）。<br>代码示例参考下文<a href="#完美数的手工缓存实现">完美数的手工缓存实现</a></p>
<h4 id="记忆机制"><a href="#记忆机制" class="headerlink" title="记忆机制"></a>记忆机制</h4><p>Groovy语言记忆函数的办法是，先将要记忆的函数定义成闭包，然后对该闭包执行memoize()方法来获得一个新函数，以后我们调用这个新函数的时候，其结果就会被缓存起来。<br>请保证所有被记忆的函数：</p>
<ul>
<li>没有副作用</li>
<li>不依赖任何外部信息<br>代码示例参考下文<a href="#完美数的记忆实现">完美数的记忆实现</a></li>
</ul>
<h3 id="三、缓求值"><a href="#三、缓求值" class="headerlink" title="三、缓求值"></a>三、缓求值</h3><p>缓求值指尽可能地推迟求解表达式。缓求值的集合不会预先算好所有的元素，而是在用到的时才落实下来。这样做有几个好处：</p>
<ul>
<li>昂贵的运算只有到了绝对必要的时候才执行</li>
<li>我们可以建立无限大的集合，只要一直接到请求，就一直送出元素</li>
<li>按缓求值的方式来使用映射、筛选等函数式概念，可以产生更高效的代码。</li>
</ul>
<p>例如：<code>print length([2+1, 3*2, 1/0, 5-4])</code><br>对于严格求值的编程语言，执行（甚至编译）时，会发生<code>被零除</code>的异常；<br>对于非严格（也叫缓求值）的里，则会得出<code>4</code>的结果。</p>
<p>缓求值在Groovy中的应用：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def prepend(val, closure) &#123; new LazyList(val, closure) &#125;</div><div class="line">def integers(n) &#123; prepend(n, &#123; integers(n + <span class="number">1</span>) &#125;) &#125;</div><div class="line"></div><div class="line">@Test</div><div class="line">public void lazy_list_acts_like_a_list() &#123;</div><div class="line">    def naturalNumbers = integers(<span class="number">1</span>)</div><div class="line">    assertEquals('<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>', naturalNumbers.getHead(<span class="number">10</span>).join(' '))</div><div class="line">    def evenNumbers = naturalNumbers.filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</div><div class="line">    assertEquals('<span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span> <span class="number">12</span> <span class="number">14</span> <span class="number">16</span> <span class="number">18</span> <span class="number">20</span>', evenNumbers.getHead(<span class="number">10</span>).join(' '))</div></pre></td></tr></table></figure></p>
<h3 id="四、函数式的数据结构"><a href="#四、函数式的数据结构" class="headerlink" title="四、函数式的数据结构"></a>四、函数式的数据结构</h3><p>函数式语言里经常遇到返回两种截然不同的值的需求，它们用来建模这种行为的常用数据结构是Either。<br>使用Either表示两种结果的返回值，使用Option来表示有为空返回值的类型。Option类可近似看作为Either的子类。</p>
<p>用Java的泛型来自己实现Either类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Either</span>&lt;<span class="title">A</span>,<span class="title">B</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> A left = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> B right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Either</span><span class="params">(A a,B b)</span> </span>&#123;</div><div class="line">        left = a;</div><div class="line">        right = b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;A,B&gt; <span class="function">Either&lt;A,B&gt; <span class="title">left</span><span class="params">(A a)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Either&lt;A,B&gt;(a,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">left</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> left != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">right</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;A,B&gt; <span class="function">Either&lt;A,B&gt; <span class="title">right</span><span class="params">(B b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Either&lt;A,B&gt;(<span class="keyword">null</span>,b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fold</span><span class="params">(F&lt;A&gt; leftOption, F&lt;B&gt; rightOption)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(right == <span class="keyword">null</span>)</div><div class="line">            leftOption.f(left);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            rightOption.f(right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码可参见《函数式编程思想》的<a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/errorhandling/Either.java" target="_blank" rel="external">github</a><br>使用：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Either&lt;Exception, Integer&gt; parseNumberDefaults(final <span class="keyword">String</span> s) &#123;</div><div class="line">    <span class="keyword">if</span> (不满足)</div><div class="line">        <span class="keyword">return</span> Either.left(<span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">"Invalid Number"</span>));</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        int number = <span class="keyword">new</span> <span class="type">RomanNumeral</span>(s).toInt();</div><div class="line">        <span class="keyword">return</span> Either.right(<span class="keyword">new</span> <span class="type">RomanNumeral</span>(number &gt;= MAX ? MAX : <span class="type">number</span>).toInt());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="五、完美数的示例"><a href="#五、完美数的示例" class="headerlink" title="五、完美数的示例"></a>五、完美数的示例</h3><p>案例：</p>
<blockquote>
<p>自然数分类规则：<br>完美数： 真约数之和 = 数本身<br>过剩数： 真约数之和 &gt; 数本身<br>不足数： 真约数之和 &lt; 数本身<br>真约数和：除了数本身之外，其余正约数的和。</p>
</blockquote>
<p>代码比较长，可以直接查看《函数式编程思想》的<a href="https://github.com/oreillymedia/functional_thinking/" target="_blank" rel="external">github</a>总结如下：<br>1.完美数的命令式解法<br><a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier/ImpNumberClassifierSimple.java" target="_blank" rel="external">https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier/ImpNumberClassifierSimple.java</a><br>2.稍向函数式靠拢的完美数分类实现<br><a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier/NumberClassifier.java" target="_blank" rel="external">https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier/NumberClassifier.java</a><br>3.完美数分类的Java8实现<br><a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier8/NumberClassifier.java" target="_blank" rel="external">https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/number_classifier8/NumberClassifier.java</a><br><span id="完美数的手工缓存实现">4.完美数的手工缓存实现</span><br><a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/groovy/memoization/ClassifierCached.groovy" target="_blank" rel="external">https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/groovy/memoization/ClassifierCached.groovy</a><br><span id="完美数的记忆实现">5.完美数的记忆实现</span><br><a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/groovy/memoization/ClassifierMemoized.groovy" target="_blank" rel="external">https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/groovy/memoization/ClassifierMemoized.groovy</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://zhangyuyu.github.io/2016/11/12/函数式编程初探1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇&lt;/a&gt;文章中介绍函数式编程的概念以及三个具有普遍意义的基本构造单元，本篇文章会接着讲述一些
    
    </summary>
    
      <category term="函数式编程" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程初探（一）</title>
    <link href="http://yoursite.com/2016/11/12/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A21/"/>
    <id>http://yoursite.com/2016/11/12/函数式编程初探1/</id>
    <published>2016-11-12T09:35:13.000Z</published>
    <updated>2016-11-12T13:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>作为一名从业以来一直在编写Java的程序媛，虽然项目里经常用java8的lambda，可是在引入<a href="http://zhangyuyu.github.io/2016/11/01/RxJava/" target="_blank" rel="external">RxJava</a>之后，函数作为参数传递更加普遍，故阅读《函数式编程思维》一书，以求了解函数式编程。</p>
<h3 id="二、定义"><a href="#二、定义" class="headerlink" title="二、定义"></a>二、定义</h3><p><code>函数式编程</code>(Functional Programming)是一种<code>编程范式</code>（programming paradigm），也就是如何编写程序的方法论。<br>主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p>
<h3 id="三、背景"><a href="#三、背景" class="headerlink" title="三、背景"></a>三、背景</h3><p>函数式编程（Functional Programming）其实相对于计算机的历史而言是一个非常古老的概念，甚至早于第一台计算机的诞生。函数式编程的基础模型来源于 λ 演算，而 λ 演算并非设计于在计算机上执行，它是由 Alonzo Church 和 Stephen Cole Kleene 在 20 世纪三十年代引入的一套用于研究函数定义、函数应用和递归的形式系统。</p>
<h3 id="四、为什么？"><a href="#四、为什么？" class="headerlink" title="四、为什么？"></a>四、为什么？</h3><p>在《函数式编程思维》这本书中，多处指出<code>函数式编程思维</code>的好处之一,是能够将低层次细节的控制权移交给运行时,从而消弭了一大批注定会发生的程序错误。这使得程序员得以在更高的抽象层次上工作，同时运行时也有了执行复杂优化的自由空间。</p>
<p>在阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="external">《函数式编程初探》</a>一文中，<br>函数式编程的五大特点如下：</p>
<ol>
<li>函数是”第一等公民”</li>
<li>只用”表达式”，不用”语句”</li>
<li>没有”副作用”</li>
<li>不修改状态</li>
<li>引用透明<br>函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</li>
</ol>
<p>函数式编程的好处如下：</p>
<ol>
<li>代码简洁，开发快速</li>
<li>接近自然语言，易于理解</li>
<li>更方便的代码管理(每一个函数都可以被看做独立单元，很有利于进行单元测试以及模块化组合)</li>
<li>易于”并发编程”</li>
<li>代码的热升级（函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的）</li>
</ol>
<h3 id="五、转变思维"><a href="#五、转变思维" class="headerlink" title="五、转变思维"></a>五、转变思维</h3><p>先大致说明一下函数式编程与命令式编程的区别吧！</p>
<p>命令式编程：按照“程序是一系列改变状态的命令”来建模的一种编程风格。<br>函数式编程将程序描述为表达式和变换，以数学方程的形式建立模型，并且尽量避免可变的状态。</p>
<p>《Working with Lagacy Code》的作者Michael Feathers的用以下一句话说明了函数式抽象和面向对象抽象的关键区别：</p>
<blockquote>
<p>面向对象编程通过封装不确定因素来使代码能被人理解；函数式编程通过尽量减少不确定因素来使代码能被人理解。——Michael Feathers</p>
</blockquote>
<p>在面向对象的命令式编程语言里面，重用的单元是类和类之间沟通用的消息。所以OOP的世界提倡开发人员针对具体问题<strong>建立专门的数据结构</strong>，相关的专门操作以“方法”的形式附加在数据结构上。<br>函数式编程语言重用的思路很不一样，它提倡在<strong>有限的几种关键数据结构</strong>（如list、set、map）上运用针对这些数据结构高度优化过的操作，以此构成基本运转结构。</p>
<h3 id="六、基本概念及使用介绍"><a href="#六、基本概念及使用介绍" class="headerlink" title="六、基本概念及使用介绍"></a>六、基本概念及使用介绍</h3><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>程序员往往都是讨厌看文档而偏爱看代码的，上述那么多文字，你不一定看的下去，还是首先来一个hello world吧。<br>对于计算表达式（1+2）* 3，</p>
<p>传统的编程方式是：<br>int a = 1 + 2<br>int b = a * 3</p>
<p>而对于函数式编程方式是：<br>int result = multiply(add(1,2), 3)<br>这里函数作为参数进行传递。</p>
<h4 id="函数式编程的常见函数"><a href="#函数式编程的常见函数" class="headerlink" title="函数式编程的常见函数"></a>函数式编程的常见函数</h4><p>从一个例子说起，假设我们有一个名字列表，其中一些条目由单个字符构成。现在的任务是：</p>
<ul>
<li>除去单字符条目</li>
<li>放在一个逗号分隔的字符串中进行返回</li>
<li>每个名字的首字母都是大写<br>代码可参考《函数式编程思维》的<a href="https://github.com/oreillymedia/functional_thinking/blob/master/functional_thinking_examples/java/trans/TheCompanyProcess.java" target="_blank" rel="external">github</a><br>传统的java实现<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> cleanNames(List&lt;<span class="keyword">String</span>&gt; listOfNames) &#123;</div><div class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listOfNames.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (listOfNames.<span class="built_in">get</span>(i).length() &gt; <span class="number">1</span>) &#123;</div><div class="line">            result.<span class="built_in">append</span>(capitalizeString(listOfNames.<span class="built_in">get</span>(i))).<span class="built_in">append</span>(<span class="string">","</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result.substring(<span class="number">0</span>, result.length() - <span class="number">1</span>).toString();</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> capitalizeString(<span class="keyword">String</span> s) &#123;</div><div class="line">    <span class="keyword">return</span> s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>, s.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>命令式编程鼓励程序员将操作安排在循环内部执行，本例中的三个操作filter、transform、convert都必须依赖于相同的低层次机制。</p>
<p>Java8的实现：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> cleanNames(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names) &#123;</div><div class="line">    <span class="keyword">if</span> (names == <span class="built_in">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> names</div><div class="line">            .stream()</div><div class="line">            .filter(name -&gt; name.length() &gt; <span class="number">1</span>)</div><div class="line">            .<span class="built_in">map</span>(name -&gt; capitalize(name))</div><div class="line">            .collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="built_in">String</span> capitalize(<span class="built_in">String</span> e) &#123;</div><div class="line">    <span class="keyword">return</span> e.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + e.substring(<span class="number">1</span>, e.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两者的对比，可以发现后者这种更高层次的抽象思考有一些好处：</p>
<ul>
<li>促使我们换一种角度去归类问题，看到问题的共性。</li>
<li>让运行时有更大的余地去做只能的优化（有时候调整作业的先后顺序会更有效率）。</li>
<li>让埋头实现细节的开发者看到原本视野之外的解决方案（比如，如果改用多线程，传统的方式可能需要自己手动穿插一些线程相关的代码）</li>
</ul>
<p>可以从上述例子中，看到三个函数filter、map、fold/reduce的影子。</p>
<ol>
<li><p>filter——筛选<br>根据用户定义的条件来筛选列表中的条目，并由此产生一个较小的新列表。</p>
</li>
<li><p>map——映射<br>对原集合的每一个元素执行给定的函数，从而变换成一个新的集合。</p>
</li>
<li><p>fold/reduce——折叠/化约<br>用一个累积量来“收集”集合元素。</p>
</li>
</ol>
<p>总而言之，函数式编程以参数传递和函数的复合作为主要的表现手段，我们不需要掌握太多作为“不确定因素”存在的其他语言构造之间的交互规则。</p>
<p>本篇只讲述了函数式编程的概念、背景和三个具有普遍意义的基本构造单元，<a href="http://zhangyuyu.github.io/2016/11/12/函数式编程初探2" target="_blank" rel="external">下一篇</a>我会讲述一些柯里化与部分施用、缓存、缓求值、 函数式的数据结构。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;作为一名从业以来一直在编写Java的程序媛，虽然项目里经常用java8的lambda，可是在引入&lt;a href=&quot;http:
    
    </summary>
    
      <category term="函数式编程" scheme="http://yoursite.com/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RxJava</title>
    <link href="http://yoursite.com/2016/11/01/RxJava/"/>
    <id>http://yoursite.com/2016/11/01/RxJava/</id>
    <published>2016-11-01T14:19:46.000Z</published>
    <updated>2016-11-12T09:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>最近，项目（Java编写的Spring boot API）引入了RXJava，使用了它的异步性操作以及它的一些流式写法。<br>使用过程中，有过疑惑，有过释然，有过吐槽，有过赞赏。学习应该是一个追根溯源的过程，而不是随便了解一下大致的用法就不了了之，故以此记之。</p>
<h3 id="二、响应式编程"><a href="#二、响应式编程" class="headerlink" title="二、响应式编程"></a>二、响应式编程</h3><p>响应式编程是一种面向数据流和变化传播的编程范式，数据更新是相关联的。<br>在交互式编程中，A = B + C这样的表达式意味着将B与C之和赋给A，而此后B与C的改变都与A无关。<br>而在响应式编程中，A会去“响应”B或C的变化，即一旦B或C改变之后，A的值也会随之变化。</p>
<h3 id="三、定义"><a href="#三、定义" class="headerlink" title="三、定义"></a>三、定义</h3><p>我的理解是，RxJava本质上是一个异步操作库，是一个能让你用极其简洁的逻辑去处理繁琐复杂任务的异步事件库。（其实初学者把握两点就好了：观察者模式和异步）</p>
<h3 id="四、背景"><a href="#四、背景" class="headerlink" title="四、背景"></a>四、背景</h3><p>Rx的全称是Reactive Extensions。直译过来就是响应式扩展。<br>Rx基于观察者模式，是一种编程模型。其目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流。<br>Rx最初是LINQ的一个扩展，由微软的架构师Erik Meijer领导的团队开发，在2012年11月开源。<br>Rx的大部分语言库由ReactiveX这个组织负责维护，比较流行的有RxJava/RxJS/Rx.NET，社区网站是 reactivex.io。<br>RxJava是 ReactiveX 在JVM上的一个实现。</p>
<h3 id="五、为什么"><a href="#五、为什么" class="headerlink" title="五、为什么?"></a>五、为什么?</h3><ul>
<li>函数式风格</li>
<li>简化代码</li>
<li>异步错误处理</li>
<li>轻松使用并发</li>
</ul>
<h3 id="六、基本概念及使用介绍"><a href="#六、基本概念及使用介绍" class="headerlink" title="六、基本概念及使用介绍"></a>六、基本概念及使用介绍</h3><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>说了很多，其实对RxJava是什么，其实还不是很明确，我们先来一个Hello world。</p>
<pre><code>Observable
    .create(new OnSubscribe&lt;String&gt;() {
        @Override
        public void call(Subscriber&lt;? super String&gt; subscriber) {
            subscriber.onNext(&quot;Hello World&quot;);
        }
    })
    .subscribe(new Subscriber&lt;String&gt;() {
        @Override
        public void onNext(String s) {
            System.out.println(s);
        }
    });
</code></pre><p>简化下来就是：</p>
<pre><code>Observable.create(subscriber -&gt; {
    subscriber.onNext(&quot;Hello World!&quot;);
}).subscribe(System.out::println);
</code></pre><p>执行的过程就是创建、监听、订阅。</p>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul>
<li>Observable：被观察者</li>
<li>Observer: 观察者</li>
<li>Subscriber：观察者，implements Observer。 </li>
<li>OnSubscribe：一个接口类，是连接被观察者和观察者的桥梁，另外要说明的是onSubscribe是Observable的一个局部变量。</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="第1步：创建观察者Observer"><a href="#第1步：创建观察者Observer" class="headerlink" title="第1步：创建观察者Observer"></a>第1步：创建观察者Observer</h5><pre><code>Observer&lt;Object&gt; observer = new Observer&lt;Object&gt;() {

    @Override
    public void onCompleted() {

    }

    @Override
    public void onError(Throwable e) {

    }

    @Override
    public void onNext(Object s) {

    }
};
</code></pre><h5 id="第2步：创建被观察者Observable"><a href="#第2步：创建被观察者Observable" class="headerlink" title="第2步：创建被观察者Observable"></a>第2步：创建被观察者Observable</h5><p>Observable.create()方法可以创建一个Observable，<br>使用create()创建Observable需要一个OnSubscribe对象，这个对象继承Action1。<br>当观察者订阅我们的Observable时，它作为一个参数传入并执行call()函数。</p>
<pre><code>Observable&lt;Object&gt; observable = Observable.create(new Observable.OnSubscribe&lt;Object&gt;() {         
    @Override
    public void call(Subscriber&lt;? super Object&gt; subscriber) {

    }
});
</code></pre><p>除了create()，just()和from()同样可以创建Observable。看看下面两个例子：</p>
<p>just(T…)将传入的参数依次发送</p>
<pre><code>Observable observable = Observable.just(&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;);
//上面这行代码会依次调用
//onNext(&quot;One&quot;);
//onNext(&quot;Two&quot;);
//onNext(&quot;Three&quot;);
//onCompleted();
</code></pre><p>from(T[])/from(Iterable&lt;? extends T&gt;)将传入的数组或者Iterable拆分成Java对象依次发送</p>
<pre><code>String[] parameters = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;};
Observable observable = Observable.from(parameters);
//上面这行代码会依次调用
//onNext(&quot;One&quot;);
//onNext(&quot;Two&quot;);
//onNext(&quot;Three&quot;);
//onCompleted();
</code></pre><h5 id="第3步：被观察者Observable订阅观察者Observer"><a href="#第3步：被观察者Observable订阅观察者Observer" class="headerlink" title="第3步：被观察者Observable订阅观察者Observer"></a>第3步：被观察者Observable订阅观察者Observer</h5><p>你没看错，不同于普通的观察者模式，这里是被观察者订阅观察者：</p>
<pre><code>observable.subscribe(observer);
</code></pre><p>连起来就是：</p>
<pre><code>Observable.create(new OnSubscribe&lt;String&gt;() {
        @Override
        public void call(Subscriber&lt;? super String&gt; subscriber) {
            subscriber.onNext(&quot;Hello World!&quot;);
            subscriber.onCompleted();
        }

    }).subscribe(new Subscriber&lt;String&gt;() {

        @Override
        public void onCompleted() {
            System.out.println(&quot;Done&quot;);
        }

        @Override
        public void onError(Throwable e) {
            e.printStackTrace();
        }

        @Override
        public void onNext(String t) {
            System.out.println(t);
        }

    });
</code></pre><p>这里表面是被观察者订阅观察者，是为了更好的链式结构。<br>实际上，过程如下：</p>
<ul>
<li>创建一个被观察者，并传入一个OnSubcribe。</li>
<li>创建一个观察者Subscriber。</li>
<li>一旦发生subscribe时，会自动触发上述的OnSubcribe的call方法。</li>
<li>而OnSubcribe的call方法中的参数subscriber就是第二步中的被观察者Subscriber。</li>
<li>然后就调用上述代码中的<code>subscriber.onNext(&quot;Hello World!&quot;);</code></li>
<li>也就是真实上述代码中<code>Override</code>的<code>onNext()</code>方法了。<br>所以本质上来讲，还是被观察者执行订阅操作的。</li>
</ul>
<h3 id="七、操作符"><a href="#七、操作符" class="headerlink" title="七、操作符"></a>七、操作符</h3><p>有了对上一步调用的理解，再去看源代码中操作符的实质，就很简单了。</p>
<p>RxJava的操作符分为如下几类：</p>
<ul>
<li>转换类操作符<br>map、flatMap、concatMap等等</li>
<li>过滤类操作符<br>filter、find等等</li>
<li>组合类操作符<br>concat、merge、zip等等</li>
<li>数学类操作符<br>count、max等等</li>
<li>布尔类操作符<br>includes、some等等</li>
</ul>
<p>对于这些操作符的调用分析，读者可以自己查看源代码。<br>对于操作符的用法，可以参考<a href="https://github.com/zhangyuyu/learnrxjava" target="_blank" rel="external">Github TDD 练习</a>。<br>对于操作符形象化的理解，可以参考一个交互式的动画网站<a href="http://rxmarbles.com/" target="_blank" rel="external">http://rxmarbles.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;最近，项目（Java编写的Spring boot API）引入了RXJava，使用了它的异步性操作以及它的一些流式写法。&lt;b
    
    </summary>
    
      <category term="RxJava" scheme="http://yoursite.com/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Consul架构</title>
    <link href="http://yoursite.com/2016/04/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-consul%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2016/04/27/微服务-consul架构/</id>
    <published>2016-04-27T11:10:52.000Z</published>
    <updated>2016-04-27T12:44:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li><a href="#agent">Agent</a></li>
<li><a href="#client">Client</a></li>
<li><a href="#server">Server</a></li>
<li><a href="#datacenter">DataCenter</a></li>
<li><a href="#gossip">Gossip</a></li>
<li><a href="#consensus">Consensus</a></li>
<li><a href="#rpc">RPC</a></li>
</ul>
<h4 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a><p id="agent"></p>Agent</h4><p>　　<code>Consul agent</code>有两种运行模式：<a href="#server">Server</a> 和 <a href="#client">Client</a>。这里的Server和Client只是Consul集群层面的区分，与搭建在Cluster之上的应用服务无关。<br>　　agent负责节点以及节点上服务的健康检查，健康检查是每个服务发现框架中重要组成部分，因为只有健康的服务才应该被clients发现，不健康的主机会被Consul服务注销.Agent之间是通过指定的端口以及TCP和UDP协议进行通信的。</p>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a><p id="client"></p>Client</h4><p>　　Client节点是相对无状态的，Client的唯一活动就是转发请求给<code>Server agent</code>节点，以保持低延迟和少资源消耗。</p>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a><p id="server"></p>Server</h4><p>　　以Server模式运行的Consul agent节点用于维护Consul集群的状态，官方建议每个Consul Cluster至少有3个或以上的运行在Server模式的Agent,Client节点则不限。<br>　　每个<a href="#datacenter">DataCenter</a>的Consul Cluster都会在<code>server agent</code>节点中选出一个Leader节点，这个选举过程通过Consul实现的<a href="https://raft.github.io/" target="_blank" rel="external">Raft Protocol</a>保证，多个<code>server agent</code>节点上的Consul数据信息是强一致的。</p>
<h4 id="DataCenter"><a href="#DataCenter" class="headerlink" title="DataCenter"></a><p id="datacenter"></p>DataCenter</h4><p>　　数据中心似乎是显而易见的，但也有微妙的细节，如EC2多个可用区。 我们定义了一个数据中心是一个联网环境是私有的，低延迟和高带宽。 这不包括通信，将穿越公共互联网。</p>
<h4 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a><p id="gossip"></p>Gossip</h4><p>　　Gossip协议是电脑之间的通信协议，受启发于现实社会的流言蜚语。现代分布式系统通常用Gossip协议来解决一些用其他方法难以解决的问题，可能是因为当前网络有一个不便的问题——过于庞大，或许是因为Gossip协议有时候是最为行之有效的方法。<br>　　“传染病协议”(Epidemic protocol)有时候也是Gossip协议的同义词，因为gossip协议传播信息的方式，有时候很类似于生物体内的病毒传播。<br>　　简言之，Gossip就是p2p协议。它主要要做的事情是，去中心化。<br>这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。<br>　　LAN gossip pool包含了同一局域网内所有节点，包括<code>server agent</code>与<code>client agent</code>。这基本上是位于同一个数据中心DC。<br>　　WAN gossip pool一般仅包含<code>server agent</code>，将跨越多个DC数据中心，通过互联网或广域网进行通信。</p>
<h4 id="Consensus"><a href="#Consensus" class="headerlink" title="Consensus"></a><p id="consensus"></p>Consensus</h4><p>　　一致性协议使用的是<a href="https://raft.github.io/" target="_blank" rel="external">Raft Protocol</a></p>
<h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a><p id="rpc"></p>RPC</h4><p>　　RPC(Remote Procedure Call)远程过程调用,这是一个请求/响应机制，允许一个客户端，向一个服务器发送请求。<br><code>Leader server agent</code>负责所有的RPC请求，查询并相应。所以其他服务器收到<code>client agent</code>的RPC请求时，会转发到<code>Leader server agent</code>。<br>　　同事整理的RPC文档→<a href="http://koly.me/2016/04/22/RPC-and-Apache-Thrift/" target="_blank" rel="external">Remote Procedure Call</a></p>
<p>　　下图为Consul的架构图：<br><img src="/imgs/consul-arch.jpg" width="400" height="250"></p>
<h3 id="使用Consul发现服务的三个组件"><a href="#使用Consul发现服务的三个组件" class="headerlink" title="使用Consul发现服务的三个组件"></a>使用Consul发现服务的三个组件</h3><ol>
<li><p>Consul 存储服务信息<br>　　tool to store information about services</p>
</li>
<li><p>Registrator 注册Docker服务<br>　　tool to register Docker servicecs</p>
</li>
<li><p>Consul-template 查询注册的服务并应用配置<br>　　tool to query registered services and apply configuration</p>
</li>
</ol>
<p>　　下图为Consul和ECS之间一起运作的架构：<br><img src="/imgs/consul-EC2.png" width="400" height="250"></p>
<blockquote>
<p>Consul官网对于Consul架构的解释:<br><br><a href="https://www.consul.io/docs/internals/architecture.html" target="_blank" rel="external">CONSUL ARCHITECTURE</a><br></p>
<p>Amazon官网上的博客:<br><br><a href="https://aws.amazon.com/blogs/compute/service-discovery-via-consul-with-amazon-ecs/" target="_blank" rel="external">Service Discovery via Consul with Amazon ECS</a><br><br>翻译的中文版地址:<br><br><a href="http://yaowenjie.github.io/cloud/service-discovery-via-consul-with-amazon-ecs" target="_blank" rel="external">在ECS上使用Consul实现服务发现</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#agent&quot;&gt;Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#client&quot;&gt;Client&lt;/a&gt;
    
    </summary>
    
      <category term="MicroServices" scheme="http://yoursite.com/categories/MicroServices/"/>
    
    
      <category term="MicroServices Consul" scheme="http://yoursite.com/tags/MicroServices-Consul/"/>
    
  </entry>
  
  <entry>
    <title>微服务-服务发现工具：ZooKeeper vs etcd vs Consul</title>
    <link href="http://yoursite.com/2016/04/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%B7%A5%E5%85%B7%EF%BC%9AZookeeper-vs-etcd-vs-Consul/"/>
    <id>http://yoursite.com/2016/04/23/微服务-服务发现工具：Zookeeper-vs-etcd-vs-Consul/</id>
    <published>2016-04-23T03:15:05.000Z</published>
    <updated>2016-04-24T10:46:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　为了能够定位服务，我们需要至少接下来的两个有用的步骤。</p>
<ul>
<li>服务注册——该步骤存储的信息至少包括正在运行的服务的主机和端口信息</li>
<li>服务发现——该步骤允许其他用户可以发现在服务注册阶段存储的信息。</li>
</ul>
<p>　　除了上述的步骤，我们还需要考虑其他方面。如果一个服务停止工作并部署/注册了一个新的服务实例，那么该服务是否应该注销呢？当有相同服务的多个副本时咋办？我们该如何做负载均衡呢？如果一个服务器宕机了咋办？所有这些问题都与注册和发现阶段紧密关联。现在，我们限定只在服务发现的范围里（常见的名字，围绕上述步骤）以及用于服务发现任务的工具，它们中的大多数采用了高可用的分布式键/值存储。</p>
<h3 id="服务发现工具"><a href="#服务发现工具" class="headerlink" title="服务发现工具"></a>服务发现工具</h3><p>　　服务发现工具的主要目标是用来服务查找和相互对话，为此该工具需要知道每个服务，这不是一个新概念，在Docker之前就已经存在很多类似的工具了，然而，容器带给了这些工具一个全新水平的需求。<br>　　服务发现背后的基本思想是对于服务的每一个新实例（或应用程序），能够识别当前环境和存储相关信息。存储的注册表信息本身通常采用键/值对的格式，由于服务发现经常用于分布式系统，所以要求这些信息可伸缩、支持容错和分布式集群中的所有节点。这种存储的主要用途是给所有感兴趣的各方提供最起码诸如服务IP地址和端口这样的信息，用于它们之间的相互通讯，这些数据还经常扩展到其它类型的信息服务发现工具倾向于提供某种形式的API，用于服务自身的注册以及服务信息的查找。<br>　　比方说我们有两个服务，一个是提供方，另一个是第一个服务的消费者，一旦部署了服务提供方，就需要在服务发现注册表中存储其信息。接着，当消费者试图访问服务提供者时，它首先查询服务注册表，使用获取到的IP地址和端口来调用服务提供者。为了与注册表中的服务提供方的具体实现解耦，我们常常采用某种代理服务。这样消费者总是向固定IP地址的代理请求信息，代理再依次使用服务发现来查找服务提供方信息并重定向请求，在本文中我们稍后通过反向代理来实现。现在重要的是要理解基于三种角色（服务消费者、提供者和代理）的服务发现流程。<br>　　服务发现工具要查找的是数据，至少我们应该能够找出服务在哪里？服务是否健康和可用？配置是什么样的？既然我们正在多台服务器上构建一个分布式系统，那么该工具需要足够健壮，保证其中一个节点的宕机不会危及数据，同时，每个节点应该有完全相同的数据副本，进一步地，我们希望能够以任何顺序启动服务、杀死服务或者替换服务的新版本，我们还应该能够重新配置服务并且查看到数据相应的变化。</p>
<p>　　让我们看一下一些常用的选项来完成我们上面设定的目标。
　　</p>
<h3 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h3><p>　　大多数服务仍然是需要手动管理的，我们预先决定在何处部署服务、如何配置和希望不管什么原因，服务都将继续正常工作，直到天荒地老。这样的目标不是可以轻易达到的。部署第二个服务实例意味着我们需要启动全程的手动处理，我们需要引入一台新的服务器，或者找出哪一台服务器资源利用率较低，然后创建一个新的配置集并启动服务。情况或许会变得越来越复杂，比方说，硬件故障导致的手动管理下的反应时间变得很慢。可见性是另外一个痛点，我们知道什么是静态配置，毕竟是我们预先准备好的，然而，大多数的服务有很多动态生成的信息，这些信息不是轻易可见的，也没有一个单独的地方供我们在需要时参考这些数据。<br>　　反应时间会不可避免的变慢，鉴于存在许多需要手动处理的移动组件，故障恢复和监控也会变得非常难以管理。<br>　　尽管在过去或者当服务/服务器数量很少的时候有借口不做这项工作，随着服务发现工具的出现，这个借口已经不存在了。</p>
<h3 id="1-ZooKeeper"><a href="#1-ZooKeeper" class="headerlink" title="1. ZooKeeper"></a>1. ZooKeeper</h3><p>　　ZooKeeper是这种类型的项目中历史最悠久的之一，它起源于Hadoop，帮助在Hadoop集群中维护各种组件。它非常成熟、可靠，被许多大公司（YouTube、eBay、雅虎等）使用。其数据存储的格式类似于文件系统，如果运行在一个服务器集群中，Zookeper将跨所有节点共享配置状态，每个集群选举一个领袖，客户端可以连接到任何一台服务器获取数据。<br>　　ZooKeeper的主要优势是其成熟、健壮以及丰富的特性，然而，它也有自己的缺点，其中采用Java开发以及复杂性是罪魁祸首。尽管Java在许多方面非常伟大，然后对于这种类型的工作还是太沉重了，ZooKeeper使用Java以及相当数量的依赖使其对于资源竞争非常饥渴。因为上述的这些问题，ZooKeeper变得非常复杂，维护它需要比我们期望从这种类型的应用程序中获得的收益更多的知识。这部分地是由于丰富的特性反而将其从优势转变为累赘。应用程序的特性功能越多，就会有越大的可能性不需要这些特性，因此，我们最终将会为这些不需要的特性付出复杂度方面的代价。<br>　　ZooKeeper为其他项目相当大的改进铺平了道路，“大数据玩家“在使用它，因为没有更好的选择。今天，ZooKeeper已经老态龙钟了，我们有了更好的选择。</p>
<h3 id="2-etcd"><a href="#2-etcd" class="headerlink" title="2. etcd"></a>2. etcd</h3><p>　　etcd是一个采用HTTP协议的健/值对存储系统，它是一个分布式和功能层次配置系统，可用于构建服务发现系统。其很容易部署、安装和使用，提供了可靠的数据持久化特性。它是安全的并且文档也十分齐全。<br>　　etcd比ZooKeeper是比更好的选择，因为它很简单，然而，它需要搭配一些第三方工具才可以提供服务发现功能。<br><img src="/imgs/etcd.png" width="600" height="300"><br>　　现在，我们有一个地方来存储服务相关信息，我们还需要一个工具可以自动发送信息给etcd。但在这之后，为什么我们还需要手动把数据发送给etcd呢？即使我们希望手动将信息发送给etcd，我们通常情况下也不会知道是什么信息。记住这一点，服务可能会被部署到一台运行最少数量容器的服务器上，并且随机分配一个端口。理想情况下，这个工具应该监视所有节点上的Docker容器，并且每当有新容器运行或者现有的一个容器停止的时候更新etcd，其中的一个可以帮助我们达成目标的工具就是Registrator。</p>
<h4 id="2-1-Registrator"><a href="#2-1-Registrator" class="headerlink" title="2.1 Registrator"></a>2.1 Registrator</h4><p>　　Registrator通过检查容器在线或者停止运行状态自动注册和去注册服务，它目前支持etcd、Consul和SkyDNS 2。<br>　　Registrator与etcd是一个简单但是功能强大的组合，可以运行很多先进的技术。每当我们打开一个容器，所有数据将被存储在etcd并传播到集群中的所有节点。我们将决定什么信息是我们的。<br><img src="/imgs/etcd-registrator.png" width="600" height="300"><br>上述的拼图游戏还缺少一块，我们需要一种方法来创建配置文件，与数据都存储在etcd，通过运行一些命令来创建这些配置文件。</p>
<h4 id="2-2-Confd"><a href="#2-2-Confd" class="headerlink" title="2.2 Confd"></a>2.2 Confd</h4><p>　　Confd是一个轻量级的配置管理工具，常见的用法是通过使用存储在etcd、consul和其他一些数据登记处的数据保持配置文件的最新状态，它也可以用来在配置文件改变时重新600 300加载应用程序。换句话说，我们可以用存储在etcd（或者其他注册中心）的信息来重新配置所有服务。<br><img src="/imgs/etcd-confud.png" width="600" height="300"></p>
<h4 id="2-3-对于etcd、Registrator和Confd组合的最后的思考"><a href="#2-3-对于etcd、Registrator和Confd组合的最后的思考" class="headerlink" title="2.3 对于etcd、Registrator和Confd组合的最后的思考"></a>2.3 对于etcd、Registrator和Confd组合的最后的思考</h4><p>　　当etcd、Registrator和Confd结合时，可以获得一个简单而强大的方法来自动化操作我们所有的服务发现和需要的配置。这个组合还展示了“小”工具正确组合的有效性，这三个小东西可以如我们所愿正好完成我们需要达到的目标，若范围稍微小一些，我们将无法完成我们面前的目标，而另一方面如果他们设计时考虑到更大的范围，我们将引入不必要的复杂性和服务器资源开销。<br>　　在我们做出最后的判决之前，让我们看看另一个有相同目标的工具组合，毕竟，我们不应该满足于一些没有可替代方案的选择。</p>
<h3 id="3-Consul"><a href="#3-Consul" class="headerlink" title="3. Consul"></a>3. Consul</h3><p>　　Consul是强一致性的数据存储，使用gossip形成动态集群。它提供分级键/值存储方式，不仅可以存储数据，而且可以用于注册器件事各种任务，从发送数据改变通知到运行健康检查和自定义命令，具体如何取决于它们的输出。<br>　　与ZooKeeper和etcd不一样，Consul内嵌实现了服务发现系统，所以这样就不需要构建自己的系统或使用第三方系统。这一发现系统除了上述提到的特性之外，还包括节点健康检查和运行在其上的服务。<br>　　ZooKeeper和etcd只提供原始的键/值队存储，要求应用程序开发人员构建他们自己的系统提供服务发现功能。而Consul提供了一个内置的服务发现的框架。客户只需要注册服务并通过DNS或HTTP接口执行服务发现。其他两个工具需要一个亲手制作的解决方案或借助于第三方工具。<br>　　Consul为多种数据中心提供了开箱即用的原生支持，其中的gossip系统不仅可以工作在同一集群内部的各个节点，而且还可以跨数据中心工作。<br><img src="/imgs/consul.png" width="600" height="300"><br>　　Consul还有另一个不错的区别于其他工具的功能，它不仅可以用来发现已部署的服务以及其驻留的节点信息，还通过HTTP请求、TTLs（time-to-live）和自定义命令提供了易于扩展的健康检查特性。</p>
<h4 id="3-1-Registrator"><a href="#3-1-Registrator" class="headerlink" title="3.1 Registrator"></a>3.1 Registrator</h4><p>　　Registrator有两个Consul协议，其中consulkv协议产生类似于etcd协议的结果。<br>　　除了通常的IP和端口存储在etcd或consulkv协议中之外，Registrator consul协议存储了更多的信息，我们可以得到服务运行节点的信息，以及服务ID和名称。我们也可以借助于一些额外的环境变量按照一定的标记存储额外的信息。<br><img src="/imgs/consul-registrator.png" width="600" height="300"></p>
<h4 id="3-2-Consul-template"><a href="#3-2-Consul-template" class="headerlink" title="3.2 Consul-template"></a>3.2 Consul-template</h4><p>　　confd可以像和etce搭配一样用于Consul，不过Consul有自己的模板服务，其更适配Consul。<br>　　通过从Consul获得的信息，Consul-template是一个非常方便的创建文件的途径，还有一个额外的好处就是在文件更新后可以运行任意命令，正如confd，Consul-template也可以使用Go模板格式。<br><img src="/imgs/consul-template.png" width="600" height="300">
　　</p>
<h4 id="3-3-Consul健康检查、Web界面和数据中心"><a href="#3-3-Consul健康检查、Web界面和数据中心" class="headerlink" title="3.3 Consul健康检查、Web界面和数据中心"></a>3.3 Consul健康检查、Web界面和数据中心</h4><p>　　监控集群节点和服务的健康状态与测试和部署它们一样的重要。虽然我们应该向着拥有从来没有故障的稳定的环境努力，但我们也应该承认，随时会有意想不到的故障发生，时刻准备着采取相应的措施。例如我们可以监控内存使用情况，如果达到一定的阈值，那么迁移一些服务到集群中的另外一个节点，这将是在发生“灾难”前执行的一个预防措施。另一方面，并不是所有潜在的故障都可以被及时检测到并采取措施。单个服务可能会齿白，一个完整的节点也可能由于硬件故障而停止工作。在这种情况下我们应该准备尽快行动，例如一个节点替换为一个新的并迁移失败的服务。Consul有一个简单的、优雅的但功能强大的方式进行健康检查，当健康阀值达到一定数目时，帮助用户定义应该执行的操作。<br>　　如果用户Google搜索“etcd ui”或者“etec dashboard”时，用户可能看到只有几个可用的解决方案，可能会问为什么我们还没有介绍给用户，这个原因很简单，etcd只是键/值对存储，仅此而已。通过一个UI呈现数据没有太多的用处，因为我们可以很容易地通过etcdctl获得这些数据。这并不意味着etcd UI是无用的，但鉴于其有限的使用范围，它不会产生多大影响。<br>　　Consu不仅仅是一个简单的键/值对存储，正如我们已经看到的，除了存储简单的键/值对，它还有一个服务的概念以及所属的数据。它还可以执行健康检查，因此成为一个好的候选dashboard，在上面可以看到我们的节点的状态和运行的服务。最后，它支持了多数据中心的概念。所有这些特性的结合让我们从不同的角度看到引入dashboard的必要性。<br>通过Consul Web界面，用户可以查看所有的服务和节点、监控健康检查状态以及通过切换数据中心读取设置键/值对数据。<br><img src="/imgs/consul-web-ui.png" width="600" height="300"></p>
<h4 id="3-4-对于Consul、Registrator、Template、健康检查和Web-UI的最终思考"><a href="#3-4-对于Consul、Registrator、Template、健康检查和Web-UI的最终思考" class="headerlink" title="3.4 对于Consul、Registrator、Template、健康检查和Web UI的最终思考"></a>3.4 对于Consul、Registrator、Template、健康检查和Web UI的最终思考</h4><p>　　Consul以及上述我们一起探讨的工具在很多情况下提供了比etcd更好的解决方案。这是从内心深处为了服务架构和发现而设计的方案，简单而强大。它提供了一个完整的同时不失简洁的解决方案，在许多情况下，这是最佳的服务发现以及满足健康检查需求的工具。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>　　所有这些工具都是基于相似的原则和架构，它们在节点上运行，需要仲裁来运行，并且都是强一致性的，都提供某种形式的键/值对存储。<br>　　ZooKeeper是其中最老态龙钟的一个，使用年限显示出了其复杂性、资源利用和尽力达成的目标，它是为了与我们评估的其他工具所处的不同时代而设计的（即使它不是老得太多）。<br>　　etcd、Registrator和Confd是一个非常简单但非常强大的组合，可以解决大部分问题，如果不是全部满足服务发现需要的话。它还展示了我们可以通过组合非常简单和特定的工具来获得强大的服务发现能力，它们中的每一个都执行一个非常具体的任务，通过精心设计的API进行通讯，具备相对自治工作的能力，从架构和功能途径方面都是微服务方式。<br>　　Consul的不同之处在于无需第三方工具就可以原生支持多数据中心和健康检查，这并不意味着使用第三方工具不好。实际上，在这篇博客里我们通过选择那些表现更佳同时不会引入不必要的功能的的工具，尽力组合不同的工具。使用正确的工具可以获得最好的结果。如果工具引入了工作不需要的特性，那么工作效率反而会下降，另一方面，如果工具没有提供工作所需要的特性也是没有用的。Consul很好地权衡了权重，用尽量少的东西很好的达成了目标。<br>　　Consul使用gossip来传播集群信息的方式，使其比etcd更易于搭建，特别是对于大的数据中心。将存储数据作为服务的能力使其比etcd仅仅只有健/值对存储的特性更加完整、更有用（即使Consul也有该选项）。虽然我们可以在etcd中通过插入多个键来达成相同的目标，Consul的服务实现了一个更紧凑的结果，通常只需要一次查询就可以获得与服务相关的所有数据。除此之外，Registrator很好地实现了Consul的两个协议，使其合二为一，特别是添加Consul-template到了拼图中。Consul的Web UI更是锦上添花般地提供了服务和健康检查的可视化途径。<br>　　我不能说Consul是一个明确的赢家，而是与etcd相比其有一个轻微的优势。服务发现作为一个概念，以及作为工具都很新，我们可以期待在这一领域会有许多的变化。秉承开放的心态，大家可以对本文的建议持保留态度，尝试不同的工具然后做出自己的结论。
　　</p>
<blockquote>
<p>完整中文版地址:<a href="http://dockone.io/article/667" target="_blank" rel="external">服务发现：ZooKeeper vs etcd vs Consul</a></p>
<p>完整原文链接：<a href="https://technologyconversations.com/2015/09/08/service-discovery-ZooKeeper-vs-etcd-vs-consul/" target="_blank" rel="external">Service Discovery: ZooKeeper vs etcd vs Consul</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　为了能够定位服务，我们需要至少接下来的两个有用的步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册——该步骤存储的信息至少包括正在运行的服务的主机和端口信息&lt;/li&gt;
&lt;li&gt;服务发现——该步骤允许其他用户可以发现在服务注册阶段存储的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　除了
    
    </summary>
    
      <category term="MicroServices" scheme="http://yoursite.com/categories/MicroServices/"/>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务-服务注册与发现</title>
    <link href="http://yoursite.com/2016/04/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/04/18/微服务-服务注册与发现/</id>
    <published>2016-04-18T11:14:52.000Z</published>
    <updated>2016-04-18T11:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要使用服务发现？"><a href="#为什么要使用服务发现？" class="headerlink" title="为什么要使用服务发现？"></a>为什么要使用服务发现？</h3><p>　　我们可以想象一下，当我们需要远程的访问REST API或者Thrift API时，我们必须得知道服务的网络地址（IP Address和port）。传统的应用程序都是运行在固定的物理机器上，IP Address和端口号都是相对固定的。可以通过配置文件方式来实现不定期更新的Ip Address和端口号。但是，在基于云的微服务应用中，这是一个非常难以解决的问题。如下图所示：<br><img src="/imgs/theproblemofdiscovery.png" width="400" height="250"><br>　　在基于云的微服务应用中，服务实例的网络地址（IP Address和Port）是动态分配的，并且由于系统的auto-scaling, failures 和 upgrades等因数，一些服务运行的实例数量也是动态变化的。因此，客户端代码需要使用一个非常精细和准确的服务发现机制。<br>有两种主要的服务发现方式：客户端发现（<a href="http://microservices.io/patterns/client-side-discovery.html" target="_blank" rel="external">client-side discovery</a>）和服务器端发现（<a href="http://microservices.io/patterns/server-side-discovery.html" target="_blank" rel="external">server-side discovery</a>）。</p>
<h3 id="客户端发现方式"><a href="#客户端发现方式" class="headerlink" title="客户端发现方式"></a>客户端发现方式</h3><p>　　在使用客户端发现方式时，客户端通过查询服务注册中心，获取可用的服务的实际网络地址（IP Adress 和 端口号）。然后通过负载均衡算法来选择一个可用的服务实例，并将请求发送至该服务。下图显示了客户端发现方式的结构图：<br><img src="/imgs/pattern_clientside.png" width="400" height="250"><br>　　在服务启动的时候，向服务注册中心注册服务；在服务停止的时候，向服务注册中心注销服务。服务注册的一个典型的实现方式就是通过heartbeat机制定时刷新。Netflix OSS 就是使用客户端发现方式的一个很好的例子。  Netflix Eureka是一个服务注册中心。它提供了一个管理和查询可用服务的 REST API。 负载均衡功能是通过Netflix Ribbon（是一个IPC客户端）和Eureka一起共同实现的。在文章的后面将深入的介绍Eureka。<br>　　客户端发现方式的优缺点。由于客户端知道所有可用的服务的实际网络地址，所以可以非常方便的实现负载均衡功能（比如：一致性哈希）。但是这种方式有一个非常明显的缺点就是具有非常强的耦合性。针对不同的语言，每个服务的客户端都得实现一套服务发现的功能。</p>
<h3 id="服务端发现方式"><a href="#服务端发现方式" class="headerlink" title="服务端发现方式"></a>服务端发现方式</h3><p>　　另外一种服务发现的方式就是Server-Side Discovery Pattern，下图展示了这种方式的架构示例图：<br><img src="/imgs/pattern_serverside.png" width="400" height="250"><br>　　客户端向load balancer 发送请求。load balancer 查询服务注册中心找到可用的服务，然后转发请求到该服务上。和客户端发现一样，服务都要到注册中心进行服务注册和注销。AWS的弹性负载均衡（Elastic Load Balancer–ELB）就是服务端发现的一个例子。ELB通常是用于为外网服务提供负载平衡的。当然你也可以使用ELB为内部虚拟私有云（VPC）提供负载均衡服务。客户端通过使用DNS名称，发送HTTP或TCP请求到ELB。ELB为EC2或ECS集群提供负载均衡服务。AWS并没有提供单独的服务注册中心。而是通过ELB实现EC2实例和ECS容器的注册的。<br>　　NGINX不仅可以作为HTTP反向代理服务器和负载均衡器，也可以用来作为一个服务发现的负载均衡器。例如，这篇博客（<a href="https://www.airpair.com/scalable-architecture-with-docker-consul-and-nginx" target="_blank" rel="external">Scalable Architecture DR CoN: Docker, Registrator, Consul, Consul Template and Nginx</a>）介绍如何使用Consul Template 动态的配置NGINX功能。<br><a href="https://github.com/kubernetes/kubernetes/blob/master/docs/design/architecture.md" target="_blank" rel="external">Kubernetes</a> 和 <a href="https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html" target="_blank" rel="external">Marathon</a>是在通过集群中每个节点都运行一个代理来实现服务发现的功能的，代理的角色就是server-side discovery,客户端通过使用主机的IP Address和Port向Proxy发送请求，Proxy再将请求转发到集群中任何一个可用的服务上。<br>　　服务器端发现方式的优点是，服务的发现逻辑对客户端是透明的。客户只需简单的向load balancer发送请求就可以了。这就避免了为每种不同语言的客户端实现一套发现的逻辑。此外，许多软件都内置实现了这种功能。这种方式的一个最大的缺点是，你必须得关心该组件的高可用性。</p>
<h3 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><p>　　服务注册中心是服务发现的核心。它保存了各个可用服务实例的网络地址（IP Address和Port）。服务注册中心必须要有高可用性和实时更新功能。<br>　　上面提到的 Netflix Eureka 就是一个服务注册中心。它提供了服务注册和查询服务信息的REST API。服务通过使用POST请求注册自己的IP Address和Port。每30秒发送一个PUT请求刷新注册信息。通过DELETE请求注销服务。客户端通过GET请求获取可用的服务实例信息。<br>Netflix的高可用（Netflix achieves high availability ）是通过在Amazon EC2运行多个实例来实现的,每一个Eureka服务都有一个弹性IP Address。当Eureka服务启动时，有DNS服务器动态的分配。Eureka客户端通过查询 DNS来获取Eureka的网络地址（IP Address和Port）。一般情况下，都是返回和客户端在同一个可用区Eureka服务器地址。<br>　　其他能够作为服务注册中心的有：<br>－　etcd —– 高可用，分布式，强一致性的，key-value，Kubernetes和Cloud Foundry都是使用了etcd。<br>－　consul —–一个用于discovering和 configuring的工具。它提供了允许客户端注册和发现服务的API。Consul可以进行服务健康检查，以确定服务的可用性。<br>－　zookeeper —— 在分布式应用中被广泛使用，高性能的协调服务。 Apache Zookeeper 最初为Hadoop的一个子项目，但现在是一个顶级项目。<br>　　我们已经了解了服务注册中心的概念，接下来我们看看服务是如果注册到注册中心的。有两种不同的方式来处理服务的注册和注销。一种是服务自己主动注册-自己注册（self-registration）。另一种是通过其他组件来管理服务的注册-第三方注册（third-party registration）。</p>
<h3 id="Self-Registration"><a href="#Self-Registration" class="headerlink" title="Self-Registration"></a>Self-Registration</h3><p>　　使用Self-Registration的方式注册，服务实例必须自己主动的到注册中心注册和注销。比如可以使用heartbeat机制了实现。下图为这种方式的示意图：<br><img src="/imgs/pattern_selfregistration.png" width="400" height="250"><br>　　Netflix OSS Eureka client就是使用这种方式进行服务注册的。Eureka的客户端处理了服务注册和注销的所有工作。<br>　　Self-Registration方式的优缺点：一个明显的优点就是，非常简单，不需要任何其它辅助组件。而缺点也是比较明显的，使得各个服务和注册中心的耦合度比较高。服务的不同语言的客户端都得实现注册和注销的逻辑。另一种服务注册方式，可以达到解耦的功能，就是third-party registration方式。</p>
<h3 id="Third-Party-Registration"><a href="#Third-Party-Registration" class="headerlink" title="Third-Party Registration"></a>Third-Party Registration</h3><p>　　使用Third-Party方式进行服务注册时，服务本身不必关心注册和注销功能。而是通过其他组件（service registrarhandles）来实现服务注册功能。可以通过如事件订阅等方式来监控服务的状态，如果发现一个新的服务实例运行，就向注册中心注册该服务，如果监控到某一服务停止了，就向注册中心注销该服务。下图显示了这种方式的结构图示意图：<br><img src="/imgs/pattern_thirdparties.png" width="400" height="250"><br>　　third-party Registration方式的优点是使服务和注册中心解耦，不用为每种语言实现服务注册的逻辑。这种方式的缺点就是必须得考虑该组件的高可用性。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　在微服务的应用系统中，服务实例的数量是动态变化。各服务实例动态分配网络地址（IP Address 和Port）。因此，为了为客户端能够访问到服务，就必须要有一种服务的发现机制。<br>服务发现的核心是服务注册中心。服务注册中心保存了各个服务可用的实例的相关信息。服务注册中心提供了管理API和查询API。使用管理API进行服务注册、注销。系统的其他组件可以通过查询API来获得当前可用的服务实例信息。<br>　　有两种主要的服务发现方式：客户端发现（client-side service discovery）和服务端发现（ server-side discovery）。在使用客户端服务发现的方式中，客户通过查询服务注册中心，选择一个可用的服务实例。在使用服务器端发现系统中，客户访问Router/load balancer，通过Router/load balancer查询服务注册中心，并将请求转发到一个可用服务实例上。<br>　　服务注册和注销的方式也有两种。一种是服务自己主动的将自己注册到服务注册中心，称为self-registration。另一种是通过其他组件来处理服务的注册和注销，称为third-party registration。<br>在有些环境中，服务发现功能需要自己通过服务注册中心（比如：Netflix Eureka, etcd, Apache Zookeeper）实现，而有些环境中，服务发现功能是内置的。例如，Kubernetes和Marathon。<br>Nginx可以作为HTTP反向代理和负载平衡器，也可以用来作为一个服务发现的负载均衡器。通过向nginx推送routing information来修改nginx的配置，比如使用：Consul Template动态修改NGINX的配置. NGINX Plus 也支持动态修改配置功能。<br>　　在今后的文章中，我们将继续深入分析微服务的其他方面的内容。</p>
<blockquote>
<p>MaxLeap翻译的中文版地址：<a href="https://blog.maxleap.cn/archives/524" target="_blank" rel="external">微服务系统中的服务发现机制</a></p>
<p>原文作者发布的关于微服务系列文章的地址：</p>
<ul>
<li><a href="https://www.nginx.com/blog/introduction-to-microservices/" target="_blank" rel="external">Introduction to Microservices</a></li>
<li><a href="https://www.nginx.com/blog/building-microservices-using-an-api-gateway/" target="_blank" rel="external">Building Microservices: Using an API Gateway</a></li>
<li><a href="https://www.nginx.com/blog/building-microservices-inter-process-communication/" target="_blank" rel="external">Building Microservices: Inter-Process Communication in a Microservices Architecture</a></li>
<li><a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/" target="_blank" rel="external">Service Discovery in a Microservices Architecture</a></li>
<li><a href="https://www.nginx.com/blog/event-driven-data-management-microservices/" target="_blank" rel="external">Event-Driven Data Management for Microservices</a></li>
<li><a href="https://www.nginx.com/blog/deploying-microservices/" target="_blank" rel="external">Choosing a Microservices Deployment Strategy</a></li>
<li><a href="https://www.nginx.com/blog/refactoring-a-monolith-into-microservices/" target="_blank" rel="external">Refactoring a Monolith into Microservices</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么要使用服务发现？&quot;&gt;&lt;a href=&quot;#为什么要使用服务发现？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用服务发现？&quot;&gt;&lt;/a&gt;为什么要使用服务发现？&lt;/h3&gt;&lt;p&gt;　　我们可以想象一下，当我们需要远程的访问REST API或者Thr
    
    </summary>
    
      <category term="MicroServices" scheme="http://yoursite.com/categories/MicroServices/"/>
    
    
      <category term="MicroServices monolithic" scheme="http://yoursite.com/tags/MicroServices-monolithic/"/>
    
  </entry>
  
  <entry>
    <title>创建你自己的Web Server - part 2</title>
    <link href="http://yoursite.com/2016/03/06/WebServer2/"/>
    <id>http://yoursite.com/2016/03/06/WebServer2/</id>
    <published>2016-03-06T09:43:32.000Z</published>
    <updated>2016-03-06T10:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　还记得吗，在第一部分我问了一个问题：如何在你刚写出来的web server上运行一个Django应用，Flask应用和Pyramid应用，同时不做出改动就能适应这些不同的Web框架呢？往下读就可以找到答案。<br>　　<br>　　在以前，你选择的Python web框架会限制你可选择的web server，反之亦然。如果框架和服务器被设计成协同工作的话，那就是极好的。<br><img src="/imgs/WS_part2_before_wsgi.png" width="400" height="250"></p>
<p>　　但是当你试图去连接没有被设计成协同工作的服务器和框架时， 你可能会遇到（可能你遇到过）下面的问题：<br><img src="/imgs/WS_part2_after_wsgi.png" width="400" height="250"></p>
<p>　　基本上，你不得不使用能协同工作的组件，而不是你想使用的组件。因此，你如何确保你的web server能够运行多种web框架，而不用改变web server和web框架的代码呢？问题的答案就是<em>Python Web Server GateWay Interface</em>(或简称WSHI，读作”wizgy”)。<br><img src="/imgs/WS_part2_wsgi_idea.png" width="400" height="250"></p>
<p>　　WSGI允许开发者自由选择web server和web框架。现在你可以混合搭配不同的web server和web框架，并选择一个满足你需求的组合。比如，你可以用Gunicorn，Nginx/uWSGI或者Waitress运行Django，Flask或者Pyramid。真正的混合搭配，多亏了服务器和框架对WSGI的支持。<br><img src="/imgs/WS_part2_wsgi_interop.png" width="400" height="250"></p>
<p>　　因此，WSGI是我在第一部分提出，并在本文开头重复的问题的答案。你的web server必须实现WSGI接口的服务器端部分，所有的Python web框架已经实现了WSGI接口的框架端部分。这样不用修改服务器的代码去适应指定的web框架，你就能使用你的web server。<br>　　现在你已经知道web server和web框架都支持WSGI，它允许你选择适合的组合，同时也有利与服务器和框架的开发者专注于他们擅长的领域，不会因为越界而踩到对方的脚趾。其他语言也有类似的接口：比如Java有Servlet API，Ruby有Rack。</p>
<p>　　一切都很好，但是我猜你会说：“把代码展示给我看！”好吧，一起看看这个简单的WSGI服务器的实现吧：</p>
<pre><code># Tested with Python 2.7.9, Linux &amp; Mac OS X
import socket
import StringIO
import sys


class WSGIServer(object):

    address_family = socket.AF_INET
    socket_type = socket.SOCK_STREAM
    request_queue_size = 1

    def __init__(self, server_address):
        # Create a listening socket
        self.listen_socket = listen_socket = socket.socket(
            self.address_family,
            self.socket_type
        )
        # Allow to reuse the same address
        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # Bind
        listen_socket.bind(server_address)
        # Activate
        listen_socket.listen(self.request_queue_size)
        # Get server host name and port
        host, port = self.listen_socket.getsockname()[:2]
        self.server_name = socket.getfqdn(host)
        self.server_port = port
        # Return headers set by Web framework/Web application
        self.headers_set = []

    def set_app(self, application):
        self.application = application

    def serve_forever(self):
        listen_socket = self.listen_socket
        while True:
            # New client connection
            self.client_connection, client_address = listen_socket.accept()
            # Handle one request and close the client connection. Then
            # loop over to wait for another client connection
            self.handle_one_request()

    def handle_one_request(self):
        self.request_data = request_data = self.client_connection.recv(1024)
        # Print formatted request data a la &apos;curl -v&apos;
        print(&apos;&apos;.join(
            &apos;&lt; {line}\n&apos;.format(line=line)
            for line in request_data.splitlines()
        ))

        self.parse_request(request_data)

        # Construct environment dictionary using request data
        env = self.get_environ()

        # It&apos;s time to call our application callable and get
        # back a result that will become HTTP response body
        result = self.application(env, self.start_response)

        # Construct a response and send it back to the client
        self.finish_response(result)

    def parse_request(self, text):
        request_line = text.splitlines()[0]
        request_line = request_line.rstrip(&apos;\r\n&apos;)
        # Break down the request line into components
        (self.request_method,  # GET
         self.path,            # /hello
         self.request_version  # HTTP/1.1
         ) = request_line.split()

    def get_environ(self):
        env = {}
        # The following code snippet does not follow PEP8 conventions
        # but it&apos;s formatted the way it is for demonstration purposes
        # to emphasize the required variables and their values
        #
        # Required WSGI variables
        env[&apos;wsgi.version&apos;]      = (1, 0)
        env[&apos;wsgi.url_scheme&apos;]   = &apos;http&apos;
        env[&apos;wsgi.input&apos;]        = StringIO.StringIO(self.request_data)
        env[&apos;wsgi.errors&apos;]       = sys.stderr
        env[&apos;wsgi.multithread&apos;]  = False
        env[&apos;wsgi.multiprocess&apos;] = False
        env[&apos;wsgi.run_once&apos;]     = False
        # Required CGI variables
        env[&apos;REQUEST_METHOD&apos;]    = self.request_method    # GET
        env[&apos;PATH_INFO&apos;]         = self.path              # /hello
        env[&apos;SERVER_NAME&apos;]       = self.server_name       # localhost
        env[&apos;SERVER_PORT&apos;]       = str(self.server_port)  # 8888
        return env

    def start_response(self, status, response_headers, exc_info=None):
        # Add necessary server headers
        server_headers = [
            (&apos;Date&apos;, &apos;Tue, 31 Mar 2015 12:54:48 GMT&apos;),
            (&apos;Server&apos;, &apos;WSGIServer 0.2&apos;),
        ]
        self.headers_set = [status, response_headers + server_headers]
        # To adhere to WSGI specification the start_response must return
        # a &apos;write&apos; callable. We simplicity&apos;s sake we&apos;ll ignore that detail
        # for now.
        # return self.finish_response

    def finish_response(self, result):
        try:
            status, response_headers = self.headers_set
            response = &apos;HTTP/1.1 {status}\r\n&apos;.format(status=status)
            for header in response_headers:
                response += &apos;{0}: {1}\r\n&apos;.format(*header)
            response += &apos;\r\n&apos;
            for data in result:
                response += data
            # Print formatted response data a la &apos;curl -v&apos;
            print(&apos;&apos;.join(
                &apos;&gt; {line}\n&apos;.format(line=line)
                for line in response.splitlines()
            ))
            self.client_connection.sendall(response)
        finally:
            self.client_connection.close()


SERVER_ADDRESS = (HOST, PORT) = &apos;&apos;, 8888


def make_server(server_address, application):
    server = WSGIServer(server_address)
    server.set_app(application)
    return server


if __name__ == &apos;__main__&apos;:
    if len(sys.argv) &lt; 2:
        sys.exit(&apos;Provide a WSGI application object as module:callable&apos;)
    app_path = sys.argv[1]
    module, application = app_path.split(&apos;:&apos;)
    module = __import__(module)
    application = getattr(module, application)
    httpd = make_server(SERVER_ADDRESS, application)
    print(&apos;WSGIServer: Serving HTTP on port {port} ...\n&apos;.format(port=PORT))
    httpd.serve_forever()
</code></pre><p>　　上面的代码确实比第一部分服务器的代码长，但是为了让你能够理解而不至于陷入细节的泥潭中，它已经足够短了（不到150行）。上面的服务器也能做更多——它能运行用你喜欢的框架（Pyramid, flask, Django或者其他Python WSGI框架）编写的基本web应用程序。<br>　　不信？动手试一下吧。保存上面的代码到<code>webserver2.py</code>或者直接从<a href="https://github.com/rspivak/lsbaws/blob/master/part2/webserver2.py" target="_blank" rel="external">GitHub</a>上下载。如果你试图运行时不带任何参数，它会提示并退出。</p>
<pre><code>$ python webserver2.py
Provide a WSGI application object as module:callable
</code></pre><p>　　它真的想服务你的web应用程序，这就是有趣的开始。运行这个服务器你唯一要做的就是安装Python。但是要运行用Pyramid, flask或Django开发的应用，你需要先安装这些框架。让我们来安装这三个框架吧，我更喜欢使用virtualenv，只需要按照下面的步骤去创建和激活一个虚拟环境，就可以安装这三个框架了。</p>
<pre><code>$ [sudo] pip install virtualenv
$ mkdir ~/envs
$ virtualenv ~/envs/lsbaws/
$ cd ~/envs/lsbaws/
$ ls
bin  include  lib
$ source bin/activate
(lsbaws) $ pip install pyramid
(lsbaws) $ pip install flask
(lsbaws) $ pip install django
</code></pre><h3 id="Pyramid框架"><a href="#Pyramid框架" class="headerlink" title="Pyramid框架"></a>Pyramid框架</h3><p>　　这时，你需创建一个Web应用程序。我们首先从Pyramid开始吧，保存下面的代码到<code>pyramidapp.py</code>并放到与<code>webserver2.py</code>的相同路径下，或者直接从<a href="https://github.com/rspivak/lsbaws/blob/master/part2/pyramidapp.py" target="_blank" rel="external">GitHub</a>上下载。</p>
<pre><code>from pyramid.config import Configurator
from pyramid.response import Response


def hello_world(request):
    return Response(
        &apos;Hello world from Pyramid!\n&apos;,
        content_type=&apos;text/plain&apos;,
    )

config = Configurator()
config.add_route(&apos;hello&apos;, &apos;/hello&apos;)
config.add_view(hello_world, route_name=&apos;hello&apos;)
app = config.make_wsgi_app()
</code></pre><p>　　现在，你可以准备用你自己的web server服务你的Pyramid应用了：</p>
<pre><code>(lsbaws) $ python webserver2.py pyramidapp:app
WSGIServer: Serving HTTP on port 8888 …
</code></pre><p>　　刚才你告诉你的服务器去从python模块<code>pyramidapp</code>中加载一个可调用的app对象。现在你的服务已经准备好接收请求，转发请求至你的Pyramid应用程序。当前应用程序只处理一个路由：<code>\hello路由</code>。在浏览器地址栏输入<code>http://localhost:8888/hello</code>，回车观察结果：<br><img src="/imgs/WS_part2_browser_pyramid.png" width="400" height="250"></p>
<p>　　你也可以在命令行用<code>curl</code> 指令来测试服务器：</p>
<pre><code>$ curl -v http://localhost:8888/hello
…
</code></pre><p>　　检查服务器和<code>curl</code>打印出的标准输出。</p>
<h3 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h3><p>　　现在轮到Flask了，让我们按照相同步骤来操作。</p>
<pre><code>from flask import Flask
from flask import Response
flask_app = Flask(&apos;flaskapp&apos;)


@flask_app.route(&apos;/hello&apos;)
def hello_world():
    return Response(
        &apos;Hello world from Flask!\n&apos;,
        mimetype=&apos;text/plain&apos;
    )

app = flask_app.wsgi_app
</code></pre><p>　　保存上面的代码到<code>flaskapp.py</code>，或者直接从<a href="https://github.com/rspivak/lsbaws/blob/master/part2/flaskapp.py" target="_blank" rel="external">GitHub</a>上下载，运行服务器：</p>
<pre><code>(lsbaws) $ python webserver2.py flaskapp:app
WSGIServer: Serving HTTP on port 8888 …
</code></pre><p>　　在浏览器输入<code>http://localhost:8888/hello</code>，回车：<br><img src="/imgs/WS_part2_browser_flask.png" width="400" height="250"></p>
<p>　　再次用<code>curl</code>命令，看一下服务器返回Flask应用程序生成的信息：</p>
<pre><code>$ curl -v http://localhost:8888/hello
…
</code></pre><h3 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h3><p>　　服务器也能处理Django应用吗？试一试！这一次涉及的内容有点复杂，我建议你克隆这个仓库，然后使用GitHUb仓库中的<code>djangoapp.py</code>文件。下面的源码主要是添加Django<code>Helloworld</code>工程（预先使用Django的<code>diango-admin.py</code>startproject命令）到当前Python路径，然后倒入项目中的WSGI应用。</p>
<pre><code>import sys
sys.path.insert(0, &apos;./helloworld&apos;)
from helloworld import wsgi

app = wsgi.application
</code></pre><p>　　保存上面的代码到<code>djangoapp.py</code>，用你的web server运行Django应用程序：</p>
<pre><code>(lsbaws) $ python webserver2.py djangoapp:app
WSGIServer: Serving HTTP on port 8888 …
</code></pre><p>　　输入下面的地址，回车：<br><img src="/imgs/WS_part2_browser_django.png" width="400" height="250"></p>
<p>　　正如你之前做过的那几次一样，你也可以在命令行中进行测试，确认Django应用处理了你这次的请求：</p>
<pre><code>$ curl -v http://localhost:8888/hello
…
</code></pre><p>　　你试过了吗？你确认了服务器可以和上面三个框架一起工作吗？如果没有的话，一定要试一下。阅读很重要，但是这个系列是关于重新构建，也就意味着你必须自己动手尝试。去尝试一下吧，不用担心，我会等你的。我是认真的，你必须尝试，最好能够自己重新敲下这些代码，来确保它能达到预期的效果。
　　</p>
<h3 id="构建自己微型的WSGI-Web框架"><a href="#构建自己微型的WSGI-Web框架" class="headerlink" title="构建自己微型的WSGI Web框架"></a>构建自己微型的WSGI Web框架</h3><p>　　好了，你已经体验了WSGI的威力了：它允许你混合搭配你的web server和web框架。WSGI提供了Python web server和Python web框架之间的最小接口。它非常简单，不管在服务器端还是在框架端实现它都是很容易的。下面的代码片段展示了服务器端和框架段的接口：</p>
<pre><code>def run_application(application):
    &quot;&quot;&quot;Server code.&quot;&quot;&quot;
    # This is where an application/framework stores
    # an HTTP status and HTTP response headers for the server
    # to transmit to the client
    headers_set = []
    # Environment dictionary with WSGI/CGI variables
    environ = {}

    def start_response(status, response_headers, exc_info=None):
        headers_set[:] = [status, response_headers]

    # Server invokes the ‘application&apos; callable and gets back the
    # response body
    result = application(environ, start_response)
    # Server builds an HTTP response and transmits it to the client
    …

def app(environ, start_response):
    &quot;&quot;&quot;A barebones WSGI app.&quot;&quot;&quot;
    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/plain&apos;)])
    return [&apos;Hello world!&apos;]

run_application(app)
</code></pre><p>下面是它的工作原理：</p>
<ol>
<li>框架提供了<code>application</code>可调用对象（WSGI规范没有规定它的实现方式）。</li>
<li>每当收到来自HTTP客户端的请求的时候，服务器端调用<code>application</code>可调用对象。它把一个包含<code>WSGI/CGI</code>变量的字典<code>environ</code>和一个<code>start_response</code>可调用对象作为参数传递给<code>application</code>可调用对象。</li>
<li>框架/应用程序生成一个HTTP状态（status）和HTTP响应头（headers），并传递给<code>start_response</code>可调用对象，让服务器把它们存储起来。框架/应用程序也返回了一个响应正文(body)。</li>
<li>服务器把状态、响应头以及响应正文合并为一个HTTP响应，然后把它传输给客户端（这个步骤不是规范的一部分，但它是流程的下一个逻辑步骤，为了清晰可见我把它加到这里）<br>下面是这个接口的可视化表现：<img src="/imgs/WS_part2_wsgi_interface.png" width="400" height="250">
</li>
</ol>
<p>　　到现在为止，你已经见到了Pyramid, Flask和Django Web应用程序，你也见到了实现WSGI规范的服务器端代码。你见到了不用任何框架实现的精简代码片段。<br>　　当你用上述其中之一的框架开发web应用程序时候，你是在一个高层面工作，并没有直接与WSGI打交道，但是我知道你一定对WSGI接口的框架端非常好奇，因为你在阅读这篇文章。那么，让我们来创建一个不使用Pyramid, Flask或者Django的微型WSGI Web应用/Web框架，并用你的服务器运行它：</p>
<pre><code>def app(environ, start_response):
    &quot;&quot;&quot;A barebones WSGI application.

    This is a starting point for your own Web framework :)
    &quot;&quot;&quot;
    status = &apos;200 OK&apos;
    response_headers = [(&apos;Content-Type&apos;, &apos;text/plain&apos;)]
    start_response(status, response_headers)
    return [&apos;Hello world from a simple WSGI application!\n’]
</code></pre><p>　　同样的，把上面的代码保存为<code>wsgiapp.py</code>或者直接从<a href="https://github.com/rspivak/lsbaws/blob/master/part2/wsgiapp.py" target="_blank" rel="external">GitHub</a>上下载，然后用你的web server运行：</p>
<pre><code>(lsbaws) $ python webserver2.py wsgiapp:app
WSGIServer: Serving HTTP on port 8888 …
</code></pre><p>　　输入下面的地址，回车，你会看到下面的结果：<br><img src="/imgs/WS_part2_browser_simple_wsgi_app.png" width="400" height="250"></p>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>　　在学习如何创建一个web server的同时，你刚刚写出了自己的微型WSGI Web框架。真是意外之喜。<br>　　现在让我们回到服务器给客户端传输什么。下面是当你用HTTP客户端调用你的Pyramid应用程序时，服务器生成的HTTP响应。<br><img src="/imgs/WS_part2_http_response.png" width="400" height="250"></p>
<p>　　上述响应和你在<a href="http://zhangyuyu.github.io/2016/03/05/WebServer1/" target="_blank" rel="external">第一部分</a>看到的有些类似，但是也有一些新的内容。比如，有四个之前没见过的HTTP headers: <code>Content-Type</code>，<code>Content-Length</code>，<code>Date</code>，<code>Server</code>。这些都是web server生成的响应头信息中应该含有的。虽然它们都不是被严格要求的，但是这些头信息的目的是传输有关HTTP请求/响应的附加信息。<br>　　现在你更多的了解了关于WSGI的接口，下面是同一个HTTP响应关于哪些部分生成它的详细信息：<br><img src="/imgs/WS_part2_http_response_explanation.png" width="400" height="250"></p>
<p>　　到现在我还没有说任何有关<code>environ</code>字典的信息，但是，它基本上就是一个Pyhon字典，这个字典必须包含某些有WSGI规定所规定的WSGI和CGI变量。解析完请求之后，服务器从HTTP请求中拿到了字典所需要的值。字典的内容如下：<br><img src="/imgs/WS_part2_environ.png" width="400" height="250"></p>
<p>　　Web 框架用这个字典的信息，来决定使用哪个view（基于指定路由和请求方法等）；决定从哪里读取请求的正文；以及把错误信息写在哪里，如果有的话。
　　</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　目前为止，现在你已经创建了你自己的WSGI Web server，并且你已经用不同的Web框架写了Web应用程序。这一路你也创建了精简的web应用/Web框架。这真是一件了不起的旅程。让我们重述为了服务一个针对WSGI应用的请求，你的WSGI Web server要做的事情：</p>
<ol>
<li>首先，服务器启动并且加载由Web框架/应用提供的<code>application</code>可调用对象。</li>
<li>其次，服务器读取一个请求</li>
<li>然后，服务器解析请求</li>
<li>紧接着，服务器用请求数据构建一个<code>environ</code>字典</li>
<li>然后，服务器把<code>environ</code>字典和一个<code>start_response</code>可调用对象作为参数传递给<code>application</code>可调用对象，并且获得相应正文。</li>
<li>之后，服务器用通过调用<code>application</code>可调用对象获得body数据，以及通过<code>start_response</code>可调用对象设置的状态和响应头信息一起构造一个HTTP响应。</li>
<li>最后，服务器把HTTP响应传输回客户端。<img src="/imgs/WS_part2_server_summary.png" width="400" height="250">
</li>
</ol>
<p>　　这就是全部了，你现在有了一个可以工作的WSGI服务器，它可以服务那些用WSGI兼容的Web框架（Django，Flask，Pyramid或者你自己写的WSGI框架）开发的Web应用程序。最好的是服务器能够在不改变服务器代码的情况下与多个Web框架使用。还不错！<br>在你离开之前，还有一个问题需要你思考，“如何让你的服务器一次处理多个请求？”<br>　　敬请关注，在第三部分我会展示给你一种实现方式。谢谢！
　　</p>
<blockquote>
<p>本文翻译自Ruslan’s Blog <a href="https://ruslanspivak.com/lsbaws-part2/" target="_blank" rel="external">Let’s Build A Web Server. Part 2.</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　还记得吗，在第一部分我问了一个问题：如何在你刚写出来的web server上运行一个Django应用，Flask应用和Pyramid应用，同时不做出改动就能适应这些不同的Web框架呢？往下读就可以找到答案。&lt;br&gt;　　&lt;br&gt;　　在以前，你选择的Python web框架
    
    </summary>
    
      <category term="Web Server" scheme="http://yoursite.com/categories/Web-Server/"/>
    
    
      <category term="webServer" scheme="http://yoursite.com/tags/webServer/"/>
    
  </entry>
  
  <entry>
    <title>创建你自己的Web Server - part 1</title>
    <link href="http://yoursite.com/2016/03/05/WebServer1/"/>
    <id>http://yoursite.com/2016/03/05/WebServer1/</id>
    <published>2016-03-05T06:58:00.000Z</published>
    <updated>2016-03-05T08:16:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>　　一天，女士外出散步，经过施工现场看到三个工人正在干活。<br>　　女士上前询问第一个工人：“你在干什么？”，被问题惹恼的第一个工人咆哮道：“难道你没看见我正在铺砖吗？”。<br>　　女士不满意刚才的答案，于是问第二个人他正在干什么。“我正在建造一堵墙。”第二个工人说着，便把注意力转向第一个工人说道：“喂，你刚刚超过了墙的末尾， 你需要把最后一块砖拿走。”<br>　　女士对第二个人的回答仍然不满意，于是她问第三个人正在干什么。第三个人看着天空回答她：“我正在建造世界上最大的教堂”。<br>　　正当第三个人站在那里仰望天空的时候，前两个人开始争论那块错误的砖块。于是第三个工人转向前两个人：“你们俩不用担心那块砖，这只是内部墙，它会被砖块砌满，没人见过那块砖。只需要把它挪到其它层就可以了。”<br><br>　　这个故事的寓意是：当你知道了整个系统并且理解不同的部分是如何组合在一起（砖，墙，教堂），你就可以更快的识别并修复问题（错误的砖块）。</p>
</blockquote>
<p>　　这与从头开始创建自己的web server有什么关系呢？<br>　　我相信要想成为一名更优秀的程序员，你必须更好的了解底层的软件系统，也就是日常使用的基础并且包括编程语言、编译器与中断、数据库与操作系统，web服务器与web框架。为了更好更深入的理解这些系统，你必须从头一点一点的开始重新构建它们。</p>
<blockquote>
<p>孔夫子云：<br>“吾听吾忘”<br><img src="/imgs/WS_confucius_hear.png" width="400" height="250"><br>“吾见吾记”<br><img src="/imgs/WS_confucius_see.png" width="400" height="250"><br>“吾做吾悟”<br><img src="/imgs/WS_confucius_do.png" width="400" height="250"><br>　　我希望在这一点上你们可以确信，从头开始构建不同的软件系统来学习它们如何运行是一个不错的方法。<br>　　在接下来的三部分的系列中，我会展示如何构建你自己基本的web服务器。让我们开始吧！</p>
</blockquote>
<h3 id="首先，什么是web-server呢？"><a href="#首先，什么是web-server呢？" class="headerlink" title="首先，什么是web server呢？"></a>首先，什么是web server呢？</h3><img src="/imgs/WS_HTTP_request_response.png" width="400" height="250">
<p>　　简而言之，web server是一个坐落在物理服务器上的网络服务器（啊，在服务器上的服务器），并且等待客户端发送请求。当它收到请求时，它就生成一个响应，并将其发送回客户端。客户端和服务器之间的通信使用HTTP协议。一个客户端可以是你的浏览器或者任何其他支持HTTP的软件。<br>　　那么web server非常简单的实现会是什么样子？下面是我的理解。示例是用Python，即使你不会Python（它是一种非常简单的语言，试一试！），你应该能够通过代码和下面的解释理解内容。</p>
<pre><code>import socket

HOST, PORT = &apos;&apos;, 8888

listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listen_socket.bind((HOST, PORT))
listen_socket.listen(1)
print &apos;Serving HTTP on port %s ...&apos; % PORT
while True:
    client_connection, client_address = listen_socket.accept()
    request = client_connection.recv(1024)
    print request

    http_response = &quot;&quot;&quot;\
HTTP/1.1 200 OK

Hello, World!
&quot;&quot;&quot;
    client_connection.sendall(http_response)
    client_connection.close()
</code></pre><p>　　保存上面的代码到<code>webserver.1py</code>文件或者在<a href="https://github.com/rspivak/lsbaws/blob/master/part1/webserver1.py" target="_blank" rel="external">GitHub</a>上直接下载，然后用下面的命令运行：</p>
<pre><code>$ python webserver1.py
Serving HTTP on port 8888 …
</code></pre><p>　　然后在浏览器地址栏输入<code>http://localhost:8888/hello</code>，然后回车，见证奇迹的时刻到来了。你应该可以看到<code>Hello World!</code>显示在浏览器中，如下所示：<br><img src="/imgs/WS_browser_hello_world.png" width="400" height="250"></p>
<p>　　试着做一下吧，你在测试时候我会等你的。做完了吗？好极了。现在我们一起讨论它是如何生效的吧。首先让我们从你输入的网址开始，它叫做<a href="http://baike.baidu.com/link?url=cigkFmQSCQHgSk9SfSVZH7palffbNp6nHiV0WjRy4LkAFH02SIDw-htgvq-wBlMDAORPltXx1i-xcqNpLeGxla" target="_blank" rel="external">URL</a>,下面是它的基本结构：<br><img src="/imgs/WS_URL_Web_address.png" width="400" height="250"></p>
<p>　　这就是你如何告诉浏览器，它需要找到并且连接的web server地址，同时获取服务器页面的方式。在你的浏览器发送一个HTTP请求，它首先需要和Web server建立一个TCP连接。然后它基于TCP连接给服务器发送一个HTTP请求等待服务器发送一个HTTP的响应回来。当收到响应之后，它会显示响应信息<code>Hello World!</code>。
　　</p>
<h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>　　让我们更详细的探讨如何在发送HTTP请求和响应之前，建立客户端和服务器TCP连接。要做到这一点，它们都使用所谓的sockets。如果不直接使用浏览器，可以通过手动在命令行使用telnet来模拟浏览器。在运行web server的同一台计算机上，通过命令行激活一个telnet会话指定连接主机为localhost，连接端口为8888，然后回车：</p>
<pre><code>$ telnet localhost 8888
Trying 127.0.0.1 …
Connected to localhost.
</code></pre><p>　　这样，你就和服务器建立了一个TCP连接，这个服务器运行在本机，并且准备发送和接收HTTP消息。通过下面的图片，你可以看到一个服务器要经过的能够接收TCP连接的标准步骤。<br><img src="/imgs/WS_socket.png" width="400" height="250"></p>
<p>　　在同一个telnet会话里，输入命令<code>GET /Hello HTTP/1.1</code>然后回车：</p>
<pre><code>$ telnet localhost 8888
Trying 127.0.0.1 …
Connected to localhost.
GET /hello HTTP/1.1

HTTP/1.1 200 OK
Hello, World!
</code></pre><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>　　刚才，你手动的模拟了浏览器，发送了一个HTTP请求并且收到了HTTP响应，下面是一个HTTP请求的基本结构：<br><img src="/imgs/WS_HTTP_request_anatomy.png" width="400" height="250"></p>
<p>　　Http请求包含：请求行，以表明HTTP方法（GET，因为我们请求服务器返回给我们一些信息）；路径/hello，以表明我们想要的服务器页面；以及协议版本。<br>　　为了简单起见，我们的web server在这一点上完全无视上述请求行，你一样可以输入其他任何东西代替<code>GET /Hello HTTP/1.1</code>,也会得到”Hello, World!“的响应。一旦你输入了请求行并按下回车，客户端会发送请求给服务器，服务器解析请求行，并打印，然后返回适当的HTTP响应。
　　</p>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>　　下面是服务器返回给客户端的HTTP响应（以telnet为例）：<br><img src="/imgs/WS_HTTP_response_anatomy.png" width="400" height="250"></p>
<p>　　让我们深入剖析它，响应包含：状态行<code>HTTP/1.1 200 OK</code>，紧接着是需要的空行，然后就是HTTP的响应正文。响应状态行<code>HTTP/1.1 200 OK</code>包含HTTP的版本，HTTP的状态码（status code），以及对状态码的简短描述<code>OK</code>(reason-phrase)。当浏览器得到响应，会把响应正文展示出来，这就是你为什么在浏览器看到<code>Hello World!</code>的原因。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结　　"></a>总结　　</h3><p>　　上述是web server如何运行的基本模型。总而言之，web server创建一个监听socket并且开始循环的接收新的连接。客户端初始化一个TCP连接，当连接成功建立之后，客户端发送HTTP请求给服务器，服务器返回用于展示给用户的HTTP响应。要建立一个TCP响应，客户端和服务器都要使用sockets。<br>　　现在你有了一个非常基本的web server了， 你可以用浏览器和一些其他的HTTP客户端测试它。正如你所看到和你所希望的一样，你也可以通过telnet手动输入HTTP请求成为人工HTTP客户端。<br>　　下面提一个问题：你如何用你刚写出来的web server去运行一个Django应用，Flask应用和Pyramid应用，同时不对这个服务器做出单一改变来容纳所有这些不同的Web框架呢？在接下来的第二部分我会展示如何实现，敬请关注。</p>
<blockquote>
<p>本文翻译自Ruslan’s Blog <a href="https://ruslanspivak.com/lsbaws-part1/" target="_blank" rel="external">Let’s Build A Web Server. Part 1.</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　　一天，女士外出散步，经过施工现场看到三个工人正在干活。&lt;br&gt;　　女士上前询问第一个工人：“你在干什么？”，被问题惹恼的第一个工人咆哮道：“难道你没看见我正在铺砖吗？”。&lt;br&gt;　　女士不满意刚才的答案，于是问第二个人他正在干什么。“我正在建造
    
    </summary>
    
      <category term="Web Server" scheme="http://yoursite.com/categories/Web-Server/"/>
    
    
      <category term="webServer" scheme="http://yoursite.com/tags/webServer/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant</title>
    <link href="http://yoursite.com/2015/11/21/Vagrant/"/>
    <id>http://yoursite.com/2015/11/21/Vagrant/</id>
    <published>2015-11-21T07:11:35.000Z</published>
    <updated>2015-11-21T08:35:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Vagrant的认识"><a href="#一、Vagrant的认识" class="headerlink" title="一、Vagrant的认识"></a>一、Vagrant的认识</h3><p>　　Vagrant 是一款用来构建虚拟开发环境的工具，它底层支持VirtualBox、VMware甚至AWS作为虚拟机系统。</p>
<blockquote>
<p>Vagrant的作用：<br>1、统一开发环境。一次配置打包，统一分发给团队成员，统一团队开发环境，解决诸如“编码问题”，“缺少模块”，“配置文件不同”带来的问题；<br>2、避免重复搭建开发环境。新员工加入，不用浪费时间搭建开发环境，快速加入开发，减少时间成本的浪费；<br>3、多个相互隔离开发环境。可以在不用box里跑不同的语言，或者编译安装同一语言不同版本，搭建多个相互隔离的开发环境，卸载清除时也很快捷轻松。</p>
</blockquote>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="1、安装-VirtualBox"><a href="#1、安装-VirtualBox" class="headerlink" title="1、安装 VirtualBox"></a>1、安装 VirtualBox</h4><h4 id="2、安装-Vagrant"><a href="#2、安装-Vagrant" class="headerlink" title="2、安装 Vagrant"></a>2、安装 Vagrant</h4><p>下载地址：<a href="http://www.vagrantup.com/downloads" target="_blank" rel="external">http://www.vagrantup.com/downloads</a></p>
<blockquote>
<p>Window下可以使用软件包管理工具chocolate安装，参照<a><a href="https://chocolatey.org/" target="_blank" rel="external">https://chocolatey.org/</a></a><br>Mac OSX下可以使用brew安装。</p>
</blockquote>
<h4 id="3、安装系统镜像"><a href="#3、安装系统镜像" class="headerlink" title="3、安装系统镜像"></a>3、安装系统镜像</h4><p>3.1 通过Vagrant Cloud方式</p>
<ul>
<li>新建一个文件夹，如AgentBox,然后进入目录</li>
<li>在<a><a href="https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1" target="_blank" rel="external">https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1</a></a>上搜索想安装的镜像，找到对应的安装指令，如<code>$ vagrant init ubuntu/precise64; vagrant up --provider virtualbox</code>。　</li>
</ul>
<p>3.2 通过添加box方式</p>
<ul>
<li>在<a><a href="http://www.vagrantbox.es/" target="_blank" rel="external">http://www.vagrantbox.es/</a></a>下载镜像。</li>
<li><code>$ vagrant box add {title} {url}</code><ul>
<li>假设我们下载的镜像存放路径是~/box/precise64.box,在终端里输入:<br><code>$ vagrant box add AgentBox ~/box/precise64.box</code><br>AgentBox是我们给这个box命的名字，~/box/precise64.box是box 所在路径。</li>
<li>box文件也可以是远程地址:<code>vagrant box add AgentBox http://files.vagrantup.com/lucid64.box</code></li>
</ul>
</li>
<li>初始化开发环境<br>　　先进入box里面，然后<code>$ vagrant init AgentBox</code></li>
<li>启动环境<code>vagrant up</code></li>
</ul>
<h3 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h3><p>1、 添加box<br>vagrant box add AgentBox ~/box/precise64.box</p>
<blockquote>
<p>box文件也可以是远程地址 base 为默认名称<br>vagrant box add base <a href="http://files.vagrantup.com/lucid64.box" target="_blank" rel="external">http://files.vagrantup.com/lucid64.box</a></p>
</blockquote>
<p>2、vagrant init，初始化</p>
<blockquote>
<p>如果你添加的box名称不是base，那么需要在初始化的时候指定名称，例如vagrant init AgentBox</p>
</blockquote>
<p>3、vagrant up，启动虚拟机<br>4、vagrant ssh，ssh到虚拟机<br>5、vagrant reload，重启虚拟机（重新载入配置文件）<br>6、vagrant package –base precise64_default_1447845103364_6382 –output precise64.box打包分发<br>7、vagrant box list<br>8、vagrant status</p>
<h3 id="四、主要配置"><a href="#四、主要配置" class="headerlink" title="四、主要配置"></a>四、主要配置</h3><p>　　开发目录下有一个文件Vagrantfile，里面包含有大量的配置信息，主要包括三个方面的配置，虚拟机的配置、SSH配置、Vagrant的一些基础配置。</p>
<p>1、box设置</p>
<pre><code>config.vm.box = &quot;AgentBox&quot;
</code></pre><p>2、hostname设置</p>
<pre><code>config.vm.hostname = &quot;for_work&quot;
</code></pre><p>3、虚拟机网络设置</p>
<pre><code>config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;
config.vm.network &quot;public_network&quot;
</code></pre><p>4、同步目录</p>
<pre><code>config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;
</code></pre><p>5、端口转发</p>
<pre><code>config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080
</code></pre><p>6、内存和cpu核心</p>
<pre><code>config.vm.provider &quot;virtualbox&quot; do |vb|
  #Display the VirtualBox GUI when booting the machine
  vb.gui = true
  #Customize the amount of memory on the VM:
  vb.memory = &quot;1024&quot;
  vb.cpus = 2
  vb.name = &quot;my_vm&quot;
end
</code></pre><blockquote>
<p>更多资源：<br>GETTING STARTED：<a><a href="https://docs.vagrantup.com/v2/getting-started/" target="_blank" rel="external">https://docs.vagrantup.com/v2/getting-started/</a></a><br>Vagrant简介和安装配置：<a><a href="http://rmingwang.com/vagrant-commands-and-config.html" target="_blank" rel="external">http://rmingwang.com/vagrant-commands-and-config.html</a></a><br>Docker学习总结之Docker与Vagrant之间的特点比较：<a><a href="http://www.linuxidc.com/Linux/2014-09/106783.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-09/106783.htm</a></a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Vagrant的认识&quot;&gt;&lt;a href=&quot;#一、Vagrant的认识&quot; class=&quot;headerlink&quot; title=&quot;一、Vagrant的认识&quot;&gt;&lt;/a&gt;一、Vagrant的认识&lt;/h3&gt;&lt;p&gt;　　Vagrant 是一款用来构建虚拟开发环境的工具，它底层
    
    </summary>
    
    
      <category term="Vagrant" scheme="http://yoursite.com/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>AnguarJS跨域请求</title>
    <link href="http://yoursite.com/2015/11/21/Anguar%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2015/11/21/Anguar跨域请求/</id>
    <published>2015-11-21T05:18:41.000Z</published>
    <updated>2015-11-21T06:49:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　本节用Yeoman和AngularJS搭建一个功能完整的应用CustomerUI，向后端CustomerApi发送跨域请求。<br>　　跨域资源共享（Cross-Origin Resource Sharing）是一种允许当前域（domain）的资源（比如html/js/web service）被其他域的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。</p>
<h3 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h3><h4 id="1-在main-html中"><a href="#1-在main-html中" class="headerlink" title="1.在main.html中"></a>1.在<code>main.html</code>中</h4><pre><code>&lt;div class=&quot;jumbotron&quot;&gt;
  &lt;h1&gt;Hello!&lt;/h1&gt;
&lt;/div&gt;

&lt;div class=&quot;row marketing&quot;&gt;
  &lt;a class=&quot;btn btn-lg btn-success&quot; ng-href=&quot;#/createCustomer&quot;&gt;Create&lt;/a&gt;
  &lt;a class=&quot;btn btn-lg btn-success&quot; ng-href=&quot;#/getCustomer&quot;&gt;GetByName&lt;/a&gt;
&lt;/div&gt;
</code></pre><h4 id="2-在getView-html中"><a href="#2-在getView-html中" class="headerlink" title="2.在getView.html中"></a>2.在<code>getView.html</code>中</h4><pre><code>&lt;p&gt;This is the get customer by name view.&lt;/p&gt;
&lt;h4&gt;Name&lt;/h4&gt;
&lt;input type=&quot;text&quot; ng-model=&quot;name&quot;/&gt;
&lt;button class=&quot;btn btn-lg btn-success&quot; ng-click=&quot;getCustomer()&quot; &gt;Get&lt;/button&gt;&lt;br&gt;&lt;br&gt;
{{info}}
</code></pre><h4 id="3-在createView-html中"><a href="#3-在createView-html中" class="headerlink" title="3.在createView.html中"></a>3.在<code>createView.html</code>中</h4><pre><code>&lt;p&gt;This is the create customer view.&lt;/p&gt;
&lt;h4&gt;Name&lt;/h4&gt;
&lt;input type=&quot;text&quot; ng-model=&quot;name&quot;/&gt;
&lt;h4&gt;Age&lt;/h4&gt;
&lt;input type=&quot;text&quot; ng-model=&quot;age&quot;/&gt;&lt;br&gt;&lt;br&gt;
&lt;button class=&quot;btn btn-lg btn-success&quot; ng-click=&quot;createCustomer()&quot; &gt;Create&lt;/button&gt;&lt;br&gt;&lt;br&gt;
{{info}}
</code></pre><h3 id="二、controller"><a href="#二、controller" class="headerlink" title="二、controller"></a>二、controller</h3><h4 id="1-在getCustomer-js中"><a href="#1-在getCustomer-js中" class="headerlink" title="1.在getCustomer.js中"></a>1.在<code>getCustomer.js</code>中</h4><pre><code>&apos;use strict&apos;;

angular.module(&apos;customerUiApp&apos;)
  .controller(&apos;GetCtrl&apos;, [&apos;$scope&apos;, &apos;$http&apos;, function ($scope, $http) {

     $scope.getCustomer = function(){
       var url = &apos;http://localhost:8080/customers?name=&apos; + $scope.name;
       $http({
          url : url,
          method : &apos;GET&apos;
       }).then(function(response) {
          $scope.info = response.data;
          alert(&apos;Get &apos;+$scope.name+&apos; successfully!&apos;);
        },function(response) {
          $scope.info = response.data || &quot;Request failed&quot;;
          alert($scope.info);
       });
     };
  }]);      
</code></pre><h4 id="2-在createCustomer-js中"><a href="#2-在createCustomer-js中" class="headerlink" title="2.在createCustomer.js中"></a>2.在<code>createCustomer.js</code>中</h4><pre><code>&apos;use strict&apos;;

angular.module(&apos;customerUiApp&apos;)
  .controller(&apos;CreateCtrl&apos;, [&apos;$scope&apos;, &apos;$http&apos;, function ($scope, $http) {
    $scope.createCustomer = function(){
       $http({
          url : &apos;http://localhost:8080/customers&apos;,
          method : &apos;POST&apos;,
          data: {
              name : $scope.name,
              age : $scope.age
          }
       }).then(function(response) {
          $scope.info = response.data;
          alert(&apos;Create &apos;+$scope.name+&apos; successfully!&apos;);
        },function(response) {
          $scope.info = response.data || &quot;Request failed&quot;;
          alert($scope.info);
       });
    };

  }]);
</code></pre><h3 id="三、配置路由"><a href="#三、配置路由" class="headerlink" title="三、配置路由"></a>三、配置路由</h3><p>在<code>app.js</code>中</p>
<pre><code>&apos;use strict&apos;;

angular.module(&apos;customerUiApp&apos;, [&apos;ngRoute&apos;])
  .config(function ($routeProvider) {
    $routeProvider
      .when(&apos;/&apos;, {
        templateUrl: &apos;views/main.html&apos;
      })
      .when(&apos;/createCustomer&apos;, {
        templateUrl: &apos;views/createView.html&apos;,
        controller: &apos;CreateCtrl&apos;
      })
      .when(&apos;/getCustomer&apos;, {
        templateUrl: &apos;views/getView.html&apos;,
        controller: &apos;GetCtrl&apos;
      })
      .otherwise({
        redirectTo: &apos;/&apos;
      });
  });
</code></pre><h3 id="四、基准HTML文件"><a href="#四、基准HTML文件" class="headerlink" title="四、基准HTML文件"></a>四、基准HTML文件</h3><p>在<code>index.html</code>中</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;AngularTest&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot; /&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;
  &lt;/head&gt;

  &lt;body ng-app=&quot;customerUiApp&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
    &lt;div ng-view=&quot;&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;script src=&quot;bower_components/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;bower_components/angular-route/angular-route.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;scripts/controllers/createCustomer.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;scripts/controllers/getCustomer.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>导入主程序<code>app.js</code>以及<code>createCustomer.js</code>、<code>getCustomer.js</code>controller。</p>
<h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><h4 id="1、在test-spec-controllers-getCustomer-js中"><a href="#1、在test-spec-controllers-getCustomer-js中" class="headerlink" title="1、在test/spec/controllers/getCustomer.js中"></a>1、在test/spec/controllers/getCustomer.js中</h4><pre><code>&apos;use strict&apos;;

describe(&apos;Controller: GetCtrl&apos;, function () {
  beforeEach(module(&apos;customerUiApp&apos;));

  var GetCtrl,scope,$httpBackend;

  beforeEach(inject(function ($controller, $rootScope, _$httpBackend_) {
    scope = $rootScope.$new();
    $httpBackend = _$httpBackend_;
    GetCtrl = $controller(&apos;GetCtrl&apos;, {
      $scope: scope
    });
  }));

  it(&apos;should send get request&apos;, function () {
    $httpBackend
      .expect(&apos;GET&apos;, &apos;http://localhost:8080/customers?name=Alex&apos;)
      .respond( {name :&apos;Alex&apos;, age:&apos;20&apos;});
    scope.name = &apos;Alex&apos;;

    scope.getCustomer();
    $httpBackend.flush();

    expect(scope.info.name).toBe(&apos;Alex&apos;);
    expect(scope.info.age).toBe(&apos;20&apos;);
  });
});
</code></pre><h4 id="2、在test-spec-controllers-createCustomer-js中"><a href="#2、在test-spec-controllers-createCustomer-js中" class="headerlink" title="2、在test/spec/controllers/createCustomer.js中"></a>2、在test/spec/controllers/createCustomer.js中</h4><pre><code>&apos;use strict&apos;;

describe(&apos;Controller: CreateCtrl&apos;, function () {
  beforeEach(module(&apos;customerUiApp&apos;));

  var CreateCtrl,scope,$httpBackend;

  beforeEach(inject(function ($controller, $rootScope, _$httpBackend_) {
    scope = $rootScope.$new();
    $httpBackend = _$httpBackend_;
    CreateCtrl = $controller(&apos;CreateCtrl&apos;, {
      $scope: scope
    });
  }));

  it(&apos;should send post request&apos;, function () {
    $httpBackend
      .expect(&apos;POST&apos;, &apos;http://localhost:8080/customers&apos;)
      .respond( {name :&apos;Alex&apos;, age:&apos;20&apos;});
    scope.name = &apos;Alex&apos;;

    scope.createCustomer();
    $httpBackend.flush();

    expect(scope.info.name).toBe(&apos;Alex&apos;);
    expect(scope.info.age).toBe(&apos;20&apos;);
  });
});
</code></pre><h3 id="六、运行及结果"><a href="#六、运行及结果" class="headerlink" title="六、运行及结果"></a>六、运行及结果</h3><h4 id="1、本地启动CustomerApi运行在8080端口"><a href="#1、本地启动CustomerApi运行在8080端口" class="headerlink" title="1、本地启动CustomerApi运行在8080端口"></a>1、本地启动CustomerApi运行在8080端口</h4><h4 id="2、grunt-serve启动CustomerUI"><a href="#2、grunt-serve启动CustomerUI" class="headerlink" title="2、grunt serve启动CustomerUI"></a>2、<code>grunt serve</code>启动CustomerUI</h4><h4 id="3、在terminal中输入下述命令，使其允许跨域请求"><a href="#3、在terminal中输入下述命令，使其允许跨域请求" class="headerlink" title="3、在terminal中输入下述命令，使其允许跨域请求"></a>3、在terminal中输入下述命令，使其允许跨域请求</h4><pre><code>open /Applications/Google\ Chrome.app --args --allow-file-access-from-files --disable-web-security
</code></pre><h4 id="4、输入url"><a href="#4、输入url" class="headerlink" title="4、输入url"></a>4、输入url</h4><p>　　在<strong>弹出</strong>的浏览器输入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a><br>　　<img src="/imgs/CustomerUI.png" width="400" height="250"></p>
<h4 id="5、点击GetByName"><a href="#5、点击GetByName" class="headerlink" title="5、点击GetByName"></a>5、点击<code>GetByName</code></h4><p>　　进入get customer by name界面如下：<br>　　<img src="/imgs/GetByName.png" width="400" height="250"><br>　　输入name,出现CustomerApi的认证如下：<br>　　<img src="/imgs/Authentication.png" width="400" height="250"><br>　　输入用户名user和密码password，得到：<br>　　<img src="/imgs/GetSuccessfully.png" width="400" height="250"><br>　　显示通过CustomerApi获取到的Customer信息如下：<br>　　<img src="/imgs/GetResults.png" width="400" height="250">
　　</p>
<blockquote>
<p>更多资源：<br>enable cross-origin resource sharing:<a><a href="http://enable-cors.org/index.html" target="_blank" rel="external">http://enable-cors.org/index.html</a></a><br>CustomerUI代码：<a><a href="https://github.com/zhangyuyu/CustomerUI" target="_blank" rel="external">https://github.com/zhangyuyu/CustomerUI</a></a><br>CustomerApi代码：<a><a href="https://github.com/zhangyuyu/CustomerAPI" target="_blank" rel="external">https://github.com/zhangyuyu/CustomerAPI</a></a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本节用Yeoman和AngularJS搭建一个功能完整的应用CustomerUI，向后端CustomerApi发送跨域请求。&lt;br&gt;　　跨域资源共享（Cross-Origin Resource Sharing）是一种允许当前域（domain）的资源（比如html/js/
    
    </summary>
    
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>Yeoman</title>
    <link href="http://yoursite.com/2015/11/21/Yeoman/"/>
    <id>http://yoursite.com/2015/11/21/Yeoman/</id>
    <published>2015-11-21T01:15:32.000Z</published>
    <updated>2015-11-21T06:38:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、认识Yeoman"><a href="#一、认识Yeoman" class="headerlink" title="一、认识Yeoman"></a>一、认识Yeoman</h3><p>　　Yeoman的logo是一个戴帽子的男人。<br>　　<img src="/imgs/yeoman.png" width="400" height="250"><br>　　Yeoman旨在为开发者提供一系列健壮的工具、程序库和工作流，快速构建出漂亮、引人注目的Web应用。它不只是一个工具，还是一个工作流。它其实包括了三个部分yo、grunt、bower，分别用于项目的启动、文件操作、包管理。</p>
<blockquote>
<p>Yo:项目初始化工具，用于构建特定框架的生态系统,可以生成一套启动某类项目必需的项目文件,我们称之为生成器(generator)。<br>Bower：一个客户端技术的软件包管理器，用于依赖管理。它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。使用它以后你再也不用手动地去一个个下载你的前端库了。<br>Grunt： GruntJS是基于JavaScript的命令行构建工具，它可以帮助开发者们自动化重复性的工作,自动运行你所设定的任务。</p>
</blockquote>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="1、在安装Yeoman之前，你需要确认以下配置："><a href="#1、在安装Yeoman之前，你需要确认以下配置：" class="headerlink" title="1、在安装Yeoman之前，你需要确认以下配置："></a>1、在安装Yeoman之前，你需要确认以下配置：</h4><ul>
<li>Node.js 版本在0.10以上</li>
<li>npm 版本在1.3.7以上</li>
</ul>
<h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><pre><code>npm install -g yo grunt-cli bower
</code></pre><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><h4 id="1、创建一个文件夹CustomerUI，并进入"><a href="#1、创建一个文件夹CustomerUI，并进入" class="headerlink" title="1、创建一个文件夹CustomerUI，并进入"></a>1、创建一个文件夹CustomerUI，并进入</h4><h4 id="2、安装Yeoman生成器"><a href="#2、安装Yeoman生成器" class="headerlink" title="2、安装Yeoman生成器"></a>2、安装Yeoman生成器</h4><p>2.1 搜索安装：</p>
<pre><code>yo
</code></pre><img src="/imgs/yo.png" width="400" height="300">
<p>　　用键盘的上下键来操作菜单，当选项’install a generator’被高亮的时候按下回车键。接下来我们需要寻找一个合适的生成器。搜索’angular’的话，你会得到很多搜索结果。这些生成器都是由许多Yeoman开源社区贡献的。<br>　　<img src="/imgs/yo-search.png" width="400" height="500"><br>　　在这个例子里，我们使用的是’generator-angular’。当选中了’generator-angular’后，按下回车执行安装，它所依赖的Node包就会开始被下载了。</p>
<p>2.2 如果你知道要安装的生成器的名字：</p>
<pre><code>yo angular
</code></pre><img src="/imgs/yo-angular.png" width="400" height="300">
<h4 id="3、选择"><a href="#3、选择" class="headerlink" title="3、选择"></a>3、选择</h4><p>3.1 询问是否需要Sass，Sass运行环境是 ruby，可以直接输入no跳过。<br>3.2 询问是否需要安装 Bootstrap 框架? 需要就输入yes。<br>3.3 询问是否要安装上面提到的 angular 相关包,可以用空格选择或者取消选择,回车开始执行。    </p>
<h4 id="4、目录"><a href="#4、目录" class="headerlink" title="4、目录"></a>4、目录</h4><img src="/imgs/CustomerUIStructure.png" width="200" height="150">
<ul>
<li>app/：Web应用的父级目录。<ul>
<li>index.html： Angular应用的基准HTML文件（base html file）</li>
<li>404.html、favicon.ico和robots.txt：通用的Web文件，Yeoman已经将它创建出来了，你不需要再手动去创建</li>
<li>bower_components：存放项目相关的JavaScript或Web依赖，由bower安装的</li>
<li>scripts：我们的JS文件<ul>
<li>app.js：主程序</li>
<li>controllers：Angular控制器</li>
</ul>
</li>
<li>styles：我们的CSS文件</li>
<li>views：Angular模板</li>
</ul>
</li>
<li>Gruntfile.js、package.json以及node_modules：Grunt需要使用的依赖以及配置。</li>
<li>test和karma.conf.js/karma-e2e.conf.js：测试框架以及针对这个项目的单元测试，包括了为控制器写的样板测试（boilerplate tests）。</li>
</ul>
<h4 id="5、运行"><a href="#5、运行" class="headerlink" title="5、运行"></a>5、运行</h4><pre><code>grunt serve
</code></pre><p>在浏览器输入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、认识Yeoman&quot;&gt;&lt;a href=&quot;#一、认识Yeoman&quot; class=&quot;headerlink&quot; title=&quot;一、认识Yeoman&quot;&gt;&lt;/a&gt;一、认识Yeoman&lt;/h3&gt;&lt;p&gt;　　Yeoman的logo是一个戴帽子的男人。&lt;br&gt;　　&lt;img src=
    
    </summary>
    
    
      <category term="AngularJs" scheme="http://yoursite.com/tags/AngularJs/"/>
    
  </entry>
  
  <entry>
    <title>Servlet life</title>
    <link href="http://yoursite.com/2015/10/25/servlet-life/"/>
    <id>http://yoursite.com/2015/10/25/servlet-life/</id>
    <published>2015-10-25T14:19:46.000Z</published>
    <updated>2015-10-26T14:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、整体工作流程"><a href="#一、整体工作流程" class="headerlink" title="一、整体工作流程"></a>一、整体工作流程</h3><blockquote>
<p>1、Client对Web Server发出请求<br><br>2、Web Server接收到请求后，将其发送给Servlet容器<br><br>3、Servlet容器产生Servlet实例对象并调用ServletAPI中相应的方法来对Client的请求进行处理，然后将处理的相应结果返回给WEB Server。<br><br>4、Web server将从Servlet实例中收到响应并发送回客户端。<br></p>
</blockquote>
<img src="/imgs/client-server.png" width="600" height="200">
<h3 id="二、阶段流程"><a href="#二、阶段流程" class="headerlink" title="二、阶段流程"></a>二、阶段流程</h3><p>　　为了细化上述过程，可分为application的deploy过程和request的发送过程来讲：</p>
<h4 id="1、deploy阶段："><a href="#1、deploy阶段：" class="headerlink" title="1、deploy阶段："></a>1、deploy阶段：</h4><p>　　以Tomcat的容器为例，真正管理Servlet的容器是Context容器。一个Context对应一个Web工程。Context容器直接管理Servlet在容器中的包装类Wrapper。<br>　　deploy过程中，首先会生成context对象，config对象。（listener、filter的初始化过程也是在此阶段先后完成的）。<br>　　<img src="/imgs/servlet-container.png" width="300" height="500"></p>
<h4 id="2、发送request阶段"><a href="#2、发送request阶段" class="headerlink" title="2、发送request阶段"></a>2、发送request阶段</h4><p>(1）在默认情况下，Servlet实例是在第一个请求到来的时候创建，以后复用。如果有的Servlet需要复杂的操作需要载初始化时完成，比如打开文件、初始化网络连接等，可以通知服务器在启动的时候创建该Servlet的实例，配置<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>。<br>(2）init()<br>　　一旦Servlet实例被创建，Web服务器会自动调用init(ServletConfig config)方法来初始化该Servlet。其中方法参数config中包含了Servlet的配置信息，比如初始化参数，该对象在deploy阶段创建。<br>　　init()方法只执行一次。<br>(3)service()<br>　　 service()方法为Servlet的核心方法，Client的业务逻辑应该在该方法内执行，解析Client请求-〉执行业务逻辑-〉输出响应页面到Client。<br>(4）destroy()<br>　　当Web Server认为Servlet实例没有存在的必要了，比如应用重新装载，或服务器关闭，以及Servlet很长时间都没有被访问过。Web Server可以从内存中销毁该实例。Web Server必须保证在销毁Servlet实例之前调用该实例的destroy()方法，以便回收Servlet申请的资源或进行其它的重要的处理。</p>
<blockquote>
<p>当先后发送多个request时候，init()只执行一次。servlet容器处理多个请求通过产生多个线程，每个线程执行servlet的单实例的service()方法。</p>
</blockquote>
<img src="/imgs/servletLife.png" width="600" height="280">
<h3 id="三、Filter"><a href="#三、Filter" class="headerlink" title="三、Filter"></a>三、Filter</h3><p>　　Filter不是一个servlet,它不能产生一个response,但是它能够在一个request到达servlet之前预处理request,也可以在离开servlet时处理response。</p>
<blockquote>
<p>Filter常用来：<br></p>
<ul>
<li>日志文件记录request参数<br></li>
<li>身份验证或认证request的resource<br></li>
<li>在request发送给Servlet之前格式化request的header或者body<br></li>
<li>压缩发回给Client的reponse数据</li>
</ul>
</blockquote>
<p>　　一个filter有三个阶段init()、doFilter()、destroy()。</p>
<h4 id="1、init"><a href="#1、init" class="headerlink" title="1、init()"></a>1、init()</h4><p>　　filter的init()是在上述的deploy阶段完成的。</p>
<h4 id="2、doFilter"><a href="#2、doFilter" class="headerlink" title="2、doFilter()　"></a>2、doFilter()　</h4><p>　　一个Servlet初始化之后，每次request到达该Servlet的service()方法之前，都会先做doFilter()。能够配置一个filter到一个或多个servlet；单个servlet或servlet组能够被多个filter使用。</p>
<h4 id="3、destroy"><a href="#3、destroy" class="headerlink" title="3、destroy()"></a>3、destroy()</h4><p>　　　当Servlet进行destroy之后，对应的Filter也会destroy。</p>
<blockquote>
<p>当有多个Filter时，按照web.xml中声明的顺序执行filter。</p>
</blockquote>
<h3 id="四、Listener"><a href="#四、Listener" class="headerlink" title="四、Listener"></a>四、Listener</h3><p>　　Listener是Servlet的监听器，它可以监听客户端的请求、服务端的操作等。如监听context、session、application的create,destroy,可以监听到context、session、application<br>属性绑定的变化。通过监听器，可以自动激发一些操作，比如监听在线的用户的数量。<br>　　以实现ServletContextListener接口监听context的create和destroy为例：<br>　　contextInitialized()是在上述deploy阶段Filter的init()之前执行的。<br>　　contextDestroyed()是在Servlet的destroy()及Filter的destroy()之后执行的。
　　</p>
<h3 id="五、执行顺序"><a href="#五、执行顺序" class="headerlink" title="五、执行顺序"></a>五、执行顺序</h3><p>　　在<a href="https://github.com/zhangyuyu/ServletLife" target="_blank" rel="external">ServletLife</a>的工程下，执行命令<code>gradle tomcatRunWar</code>。根据下面控制台打印信息，可以看出listen-&gt;filter-&gt;servlet的顺序：</p>
<pre><code>*************Context created on*************
***********This is the filter init***********
Started Tomcat Server
The Server is running at http://localhost:8080/ServletLife
**********This is the servlet init***********
*****************do filter*****************
***********This is the servlet service***********
***********This is the servlet destroy***********
***********This is the filter destroy***********
*************Context destroy*************
</code></pre><h3 id="六、对应一个故事"><a href="#六、对应一个故事" class="headerlink" title="六、对应一个故事"></a>六、对应一个故事</h3><blockquote>
<p></p><h5 align="center">T公司CX项目开发经历</h5><br>1、T公司接到一个CX项目<br><br>　　根据项目计划书划分职能（BA、开发A功能人员、开发B功能人员……）<br><br>　　确定BA具体人员<br><br>2、需求R1<br><br>　　准备安排具体人员A、B<br><br>　　BA分析问题<br><br>　　A、B开始认真干活<br><br>3、需求R2<br><br>　　BA分析问题<br><br>　　A、B继续干活<br><br>　　……<br><br>4、项目完成了，开发人员解散<br><br>　　BA也role off<br><p></p>
</blockquote>
<p>　　故事中，T对应一个Web container, CX对应一个context, BA对应Filter，A\B分别对应一个Servlet，需求R1\R2分别对应两次request。<br>　　第一个阶段对应deploy阶段：划分职能可以代表生成context、config对象；确定BA的具体人员则代表着Filter的初始化。<br>　　第二个阶段对应发送request阶段：安排A、B的巨头人员代表Servlet的初始化；BA分析问题代表着Filter的doFilter(）操作；认真干活则代表Servlet的service()操作。<br>　　第三个阶段是发送另一个request，此过程中没有安排具体的人员（Servlet的初始化），对应的是servlet的多线程操作。<br>　　第四个阶段对应destroy过程，开发人员解散代表Servlet的destroy，BA的role off则代表着Filter的destroy。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、整体工作流程&quot;&gt;&lt;a href=&quot;#一、整体工作流程&quot; class=&quot;headerlink&quot; title=&quot;一、整体工作流程&quot;&gt;&lt;/a&gt;一、整体工作流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、Client对Web Server发出请求&lt;br&gt;&lt;br&gt;2、
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>手动创建Servlet异常处理</title>
    <link href="http://yoursite.com/2015/10/15/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2015/10/15/手动创建Servlet异常处理/</id>
    <published>2015-10-15T13:19:45.000Z</published>
    <updated>2015-10-17T09:08:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、创建产生异常的servlet"><a href="#1、创建产生异常的servlet" class="headerlink" title="1、创建产生异常的servlet"></a>1、创建产生异常的servlet</h3><p>在ExceptionServlet.java中：</p>
<pre><code>import javax.servlet.*;
import java.io.IOException;
import java.io.PrintWriter;

public class ExceptionServlet implements Servlet {

    @Override
    public void init(ServletConfig servletConfig) {

    }

    @Override
    public ServletConfig getServletConfig() {
        return null;
    }

    @Override
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
        throw new ServletException(&quot;hello&quot;);  
    }

    @Override
    public String getServletInfo() {
        return null;
    }

    @Override
    public void destroy() {

    }
}
</code></pre><h3 id="2、创建异常处理类"><a href="#2、创建异常处理类" class="headerlink" title="2、创建异常处理类"></a>2、创建异常处理类</h3><p>在ErrorHandle.java中：</p>
<pre><code>import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;

// 扩展 HttpServlet 类
public class ErrorHandler extends HttpServlet {

  // 处理 GET 方法请求的方法
  public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
  {
      PrintWriter out = response.getWriter();
      // 分析 Servlet 异常       
      Throwable throwable = (Throwable)request.getAttribute(&quot;javax.servlet.error.exception&quot;);
      Integer statusCode = (Integer)request.getAttribute(&quot;javax.servlet.error.status_code&quot;);
      String servletName = (String)request.getAttribute(&quot;javax.servlet.error.servlet_name&quot;);
      String requestUri = (String)request.getAttribute(&quot;javax.servlet.error.request_uri&quot;);

      if (throwable != null){
         out.println(&quot;Exception Type : &quot; + throwable.getClass( ).getName( ));
         out.println(&quot;The exception message: &quot; + throwable.getMessage( ));
      }
      if (statusCode != null){
         out.println(&quot;The status code : &quot; + statusCode);
      }
      out.println(&quot;Servlet Name : &quot; + servletName);
      out.println(&quot;The request URI: &quot; + requestUri);

  }
  // 处理 POST 方法请求的方法
  public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
     doGet(request, response);
  }
}
</code></pre><h3 id="3、编译"><a href="#3、编译" class="headerlink" title="3、编译"></a>3、编译</h3><pre><code>javac -cp /usr/local/Cellar/tomcat/8.0.26/libexec/lib/servlet-api.jar /usr/local/Cellar/tomcat/8.0.26/libexec/webapps/test/WEB-INF/classes/*.java
</code></pre><h3 id="4、部署"><a href="#4、部署" class="headerlink" title="4、部署"></a>4、部署</h3><p>在web.xml中</p>
<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;ErrorHandler&lt;/servlet-name&gt;
    &lt;servlet-class&gt;ErrorHandler&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;ErrorHandler&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/error&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;error-page&gt;
    &lt;error-code&gt;404&lt;/error-code&gt;
    &lt;location&gt;/error&lt;/location&gt;
&lt;/error-page&gt;

&lt;error-page&gt;
    &lt;error-code&gt;403&lt;/error-code&gt;
    &lt;location&gt;/error&lt;/location&gt;
&lt;/error-page&gt;

&lt;error-page&gt;
    &lt;exception-type&gt;javax.servlet.ServletException&lt;/exception-type &gt;
    &lt;location&gt;/error&lt;/location&gt;
&lt;/error-page&gt;

&lt;error-page&gt;
    &lt;exception-type&gt;java.io.IOException&lt;/exception-type &gt;
    &lt;location&gt;/errorr&lt;/location&gt;
&lt;/error-page&gt;
</code></pre><h3 id="5、启动tomcat"><a href="#5、启动tomcat" class="headerlink" title="5、启动tomcat"></a>5、启动tomcat</h3><pre><code>$ cd /usr/local/Cellar/tomcat/8.0.26/libexec/bin
$ ./startup.sh    
</code></pre><h3 id="6、运行及结果"><a href="#6、运行及结果" class="headerlink" title="6、运行及结果"></a>6、运行及结果</h3><p>　　使用上面会产生异常的Servlet，或者输入一个错误的URL，会触发Web容器调用ErrorHandler的Servlet，并显示适当的信息。<br><br>　　如果使用上面会产生异常的ExceptionServlet(<a href="http://localhost:8080/test/exception)，那么它将显示：" target="_blank" rel="external">http://localhost:8080/test/exception)，那么它将显示：</a></p>
<blockquote>
<p>Exception Type : javax.servlet.ServletException<br><br>The exception message: hello<br><br>The status code : 500<br><br>Servlet Name : ExceptionServlet<br><br>The request URI: /test/exception</p>
</blockquote>
<p>　　如果输入了一个错误的URL(<a href="http://localhost:8080/test/ex)，那么它将显示`The" target="_blank" rel="external">http://localhost:8080/test/ex)，那么它将显示`The</a> status code : 404`
　　</p>
<h3 id="7、目录结构"><a href="#7、目录结构" class="headerlink" title="7、目录结构"></a>7、目录结构</h3><pre><code>|---test
    |---WEB-INF
        |---classes
            |---ServletException.java
            |---ErrorHandler.java
        |---lib
        |---web.xml
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、创建产生异常的servlet&quot;&gt;&lt;a href=&quot;#1、创建产生异常的servlet&quot; class=&quot;headerlink&quot; title=&quot;1、创建产生异常的servlet&quot;&gt;&lt;/a&gt;1、创建产生异常的servlet&lt;/h3&gt;&lt;p&gt;在ExceptionServ
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>手动创建Servlet过滤器</title>
    <link href="http://yoursite.com/2015/10/15/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://yoursite.com/2015/10/15/手动创建Servlet过滤器/</id>
    <published>2015-10-15T12:18:09.000Z</published>
    <updated>2015-10-21T14:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　Servlet 过滤器是可用于 Servlet 编程的 Java 类，主要用于：</p>
<blockquote>
<p>在客户端的请求访问后端资源之前，拦截这些请求。<br><br>在服务器的响应发送回客户端之前，处理这些响应。</p>
</blockquote>
<p>　　在前面《手动创建Servlet》实现的基础上，增加一个filter,在服务器的响应发送回客户端之前，打印log。</p>
<h3 id="1、创建Filter"><a href="#1、创建Filter" class="headerlink" title="1、创建Filter"></a>1、创建Filter</h3><p>在test/WEB_INF/classes下新建一个LogFilter.java</p>
<pre><code>import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;

public class LogFilter implements Filter  {
    public void  init(FilterConfig config) 
                         throws ServletException{
        // 获取初始化参数
        String testParam = config.getInitParameter(&quot;test-param&quot;); 

        // 输出初始化参数
        System.out.println(&quot;********Test Param: &quot; + testParam); 

   }
    public void  doFilter(ServletRequest request, 
                 ServletResponse response,
                 FilterChain chain) 
                 throws java.io.IOException, ServletException {

        PrintWriter out = response.getWriter();
        out.println(&quot;[ Time : &quot;+ new Date().toString()+&quot; ]&quot;);    
        // 把请求传回过滤链
        chain.doFilter(request,response);
   }
   public void destroy( ){
      /* 在 Filter 实例被 Web 容器从服务移除之前调用 */
   }
 }
</code></pre><p>　　过滤器是一个实现了 javax.servlet.Filter 接口的Java类.javax.servlet.Filter 接口定义了三个方法:</p>
<blockquote>
<p>（1）public void doFilter (ServletRequest, ServletResponse, FilterChain)<br>该方法在每次一个请求/响应对因客户端在链的末端请求资源而通过链传递时由容器调用。<br><br>（2）public void init(FilterConfig filterConfig)<br>该方法由Web容器调用，指示一个过滤器被放入服务。<br><br>（3）public void destroy()<br>该方法由Web容器调用，指示一个过滤器被取出服务。</p>
</blockquote>
<h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><p>　　编译ServletExample以及LogFilter：</p>
<pre><code>javac -cp /usr/local/Cellar/tomcat/8.0.26/libexec/lib/servlet-api.jar /usr/local/Cellar/tomcat/8.0.26、libexec/webapps/test/WEB-INF/classes/LogFilter.java
</code></pre><h3 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;web-app&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;ServletExample&lt;/servlet-name&gt;
        &lt;servlet-class&gt;ServletExample&lt;/servlet-class&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;ServletExample&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/test&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;filter&gt;
       &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;
       &lt;filter-class&gt;LogFilter&lt;/filter-class&gt;
       &lt;init-param&gt;
          &lt;param-name&gt;test-param&lt;/param-name&gt;
          &lt;param-value&gt;Initialization Paramter&lt;/param-value&gt;
       &lt;/init-param&gt;
    &lt;/filter&gt;

    &lt;filter-mapping&gt;
       &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;
       &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
&lt;/web-app&gt;
</code></pre><p>　　过滤器被部署在部署web.xml中然后映射到部署的Servlet名称或 URL模式。有多个过滤器时，执行的顺序是按它们在声明的顺序。
　　</p>
<h3 id="4、启动tomcat"><a href="#4、启动tomcat" class="headerlink" title="4、启动tomcat"></a>4、启动tomcat</h3><pre><code>$ cd /usr/local/Cellar/tomcat/8.0.26/libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行"><a href="#5、运行" class="headerlink" title="5、运行"></a>5、运行</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/hello" target="_blank" rel="external">http://localhost:8080/test/hello</a>
　　</p>
<h3 id="6、结果"><a href="#6、结果" class="headerlink" title="6、结果"></a>6、结果</h3><pre><code>[ Time : Thu Oct 15 20:56:29 CST 2015 ]
Hello World
</code></pre><h3 id="7、目录结构"><a href="#7、目录结构" class="headerlink" title="7、目录结构"></a>7、目录结构</h3><pre><code>|---test
    |---WEB-INF
        |---classes
            |---ServletExample.java
            |---LogFilter.java
        |---lib
        |---web.xml
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Servlet 过滤器是可用于 Servlet 编程的 Java 类，主要用于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在客户端的请求访问后端资源之前，拦截这些请求。&lt;br&gt;&lt;br&gt;在服务器的响应发送回客户端之前，处理这些响应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>手动创建Servlet连接数据库</title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet连接数据库/</id>
    <published>2015-09-20T02:20:41.000Z</published>
    <updated>2015-10-21T14:34:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、准备数据库"><a href="#1、准备数据库" class="headerlink" title="1、准备数据库"></a>1、准备数据库</h3><h4 id="1-在本地mysql中create-一个数据库"><a href="#1-在本地mysql中create-一个数据库" class="headerlink" title="(1)在本地mysql中create 一个数据库"></a>(1)在本地mysql中create 一个数据库</h4><pre><code>$ mysql.server start
$ mysql -uroot -p
mysql&gt; show databases;
mysql&gt; create database test;
mysql&gt; use test;
mysql&gt; create table raw_report(
       name varchar(20),
       sex varchar(10),
       age varchar(10),
       birthday varchar(20)
  );
mysql&gt; INSERT raw_report(name, sex, age, birthday) VALUES(&apos;Alex&apos;,&apos;M&apos;,&apos;20&apos;,&apos;08/07/1995&apos;);
mysql&gt; INSERT raw_report(name, sex, age, birthday) VALUES(&apos;Alice&apos;,&apos;F&apos;,&apos;18&apos;,&apos;08/07/1997&apos;);
mysql&gt; INSERT raw_report(name, sex, age, birthday) VALUES(&apos;Bob&apos;,&apos;M&apos;,&apos;21&apos;,&apos;08/07/1994&apos;);
mysql&gt; INSERT raw_report(name, sex, age, birthday) VALUES(&apos;Mary&apos;,&apos;F&apos;,&apos;23&apos;,&apos;08/07/1992&apos;);
</code></pre><h3 id="2、创建servlet"><a href="#2、创建servlet" class="headerlink" title="2、创建servlet"></a>2、创建servlet</h3><p>　　在test/WEB_INF/classes下新建一个DBServlet.java</p>
<pre><code>import java.io.*;                                    //导入java.io包
import java.util.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class DBServlet extends HttpServlet{            //定义一个继承HttpServlet的公有类
    ServletConfig config=null;                        //定义一个ServletConfig对象
    private String driverName=&quot;&quot;;                    //定义私有字符串常量并初始化
    private String username=&quot;&quot;;                    //定义的数据库用户名
    private String password=&quot;&quot;;                    //定义的数据库连接密码
    private String dbName=&quot;&quot;;                        //定义的数据库名
    private Connection conn;                        //初始化连接
    private Statement stmt;                        //初始化数据库操作
    ResultSet rs=null;   
                             //初始化结果集
    public void init(ServletConfig config)throws ServletException{
        super.init(config);                            //继承父类的init()方法
        this.config=config;                            //获取配置信息
        driverName=config.getInitParameter(&quot;driverName&quot;);//从配置文件中获取JDBC驱动名
        username=config.getInitParameter(&quot;username&quot;);    //获取数据库用户名
        password=config.getInitParameter(&quot;password&quot;);    //获取数据库连接密码
        dbName=config.getInitParameter(&quot;dbName&quot;);    //获取要连接的数据库
    }

    public void doGet(HttpServletRequest req,HttpServletResponse resp)throws IOException,ServletException{
        resp.setContentType(&quot;text/html;charset=GBK&quot;);    //设置字符编码格式
        PrintWriter out=resp.getWriter();                //实例化对象，用于页面输出
        out.println(&quot;&lt;html&gt;&quot;);                    //实现生成静态Html
        out.println(&quot;&lt;head&gt;&quot;);
        out.println(&quot;&lt;meta http-equiv=\&quot;Content-Type\&quot;content=\&quot;text/html;charset=GBK\&quot;&gt;&quot;);
        out.println(&quot;&lt;title&gt;DataBase Connection&lt;/title&gt;&quot;);
        out.println(&quot;&lt;/head&gt;&quot;);
        out.println(&quot;&lt;body bgcolor=\&quot;white\&quot;&gt;&quot;);
        out.println(&quot;&lt;center&gt;&quot;);
        String url=&quot;jdbc:mysql://localhost:3306/test&quot;;
        try{
                Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
                conn=DriverManager.getConnection(url,username,password);
                stmt=conn.createStatement();
                String sql=&quot;select * from raw_report&quot;;
                rs=stmt.executeQuery(sql);

                out.println(&quot;Servlet访问数据库成功&quot;);
                out.println(&quot;&lt;table border=1 bordercolorlight=#000000&gt;&quot;);
                out.println(&quot;&lt;tr&gt;&lt;td width=40&gt;name&lt;/td&gt;&quot;);
                out.println(&quot;&lt;td&gt;sex&lt;/td&gt;&quot;);
                out.println(&quot;&lt;td&gt;age&lt;/td&gt;&quot;);
                out.println(&quot;&lt;td&gt;birthday&lt;/td&gt;&quot;);
                while(rs.next()){
                     out.println(&quot;&lt;tr&gt;&lt;td&gt;&quot;+rs.getString(1)+&quot;&lt;/td&gt;&quot;);
                     out.println(&quot;&lt;td&gt;&quot;+rs.getString(2)+&quot;&lt;/td&gt;&quot;);
                     out.println(&quot;&lt;td&gt;&quot;+rs.getString(3)+&quot;&lt;/td&gt;&quot;);
                     out.println(&quot;&lt;td&gt;&quot;+rs.getString(4)+&quot;&lt;/td&gt;&quot;);
                     out.println(&quot;&lt;tr&gt;&quot;);
                }
                out.println(&quot;&lt;/table&gt;&quot;);

                rs.close();
                stmt.close();
                conn.close();    

            }catch(Exception e){
                e.printStackTrace();
                out.println(e.toString());    
            }
            out.println(&quot;&lt;/center&gt;&quot;);
            out.println(&quot;&lt;/body&gt;&quot;);
            out.println(&quot;&lt;/html&gt;&quot;);
        }

        public void doPost(HttpServletRequest req,HttpServletResponse resp)throws IOException,ServletException{
            this.doGet(req,resp);
        }

        public void destory(){
            config=null;
            driverName=null;
            username=null;
            password=null;
            dbName=null;
            conn=null;
            stmt=null;
            rs=null;
        }
}
</code></pre><h3 id="3、编译生成class文件"><a href="#3、编译生成class文件" class="headerlink" title="3、编译生成class文件"></a>3、编译生成class文件</h3><pre><code>javac -cp /usr/local/Cellar/tomcat/8.0.24/libexec/lib/servlet-api.jar /usr/local/Cellar/tomcat/8.0.24/libexec/webapps/test/WEB-INF/classes/DBServlet.java
</code></pre><h3 id="4、部署"><a href="#4、部署" class="headerlink" title="4、部署"></a>4、部署</h3><p>　　在web.xml中</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;web-app&gt;
    &lt;servlet&gt;
    &lt;description&gt;This is the description of my J2EE component&lt;/description&gt;
    &lt;display-name&gt;This is the display name of my J2EE component&lt;/display-name&gt;
    &lt;servlet-name&gt;DBServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;DBServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
            &lt;param-name&gt;driverName&lt;/param-name&gt;
            &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
        &lt;param-name&gt;username&lt;/param-name&gt;            
            &lt;param-value&gt;用户名&lt;/param-value&gt;                
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;password&lt;/param-name&gt;        
            &lt;param-value&gt;密码&lt;/param-value&gt;                
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;dbName&lt;/param-name&gt;    
            &lt;param-value&gt;test&lt;/param-value&gt;    
        &lt;/init-param&gt;

  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
     &lt;servlet-name&gt;DBServlet&lt;/servlet-name&gt;
     &lt;url-pattern&gt;/DB&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;

&lt;/web-app&gt;
</code></pre><h3 id="5、启动tomcat"><a href="#5、启动tomcat" class="headerlink" title="5、启动tomcat"></a>5、启动tomcat</h3><pre><code>$ cd /usr/local/Cellar/tomcat/8.0.24/libexec/bin
$ ./startup.sh    
</code></pre><h3 id="6、运行"><a href="#6、运行" class="headerlink" title="6、运行"></a>6、运行</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/DB" target="_blank" rel="external">http://localhost:8080/test/DB</a></p>
<h3 id="7、目录结构"><a href="#7、目录结构" class="headerlink" title="7、目录结构"></a>7、目录结构</h3><pre><code>|---test
    |---WEB-INF
        |---classes
            |---DBServlet.java
        |---lib
        |---web.xml
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、准备数据库&quot;&gt;&lt;a href=&quot;#1、准备数据库&quot; class=&quot;headerlink&quot; title=&quot;1、准备数据库&quot;&gt;&lt;/a&gt;1、准备数据库&lt;/h3&gt;&lt;h4 id=&quot;1-在本地mysql中create-一个数据库&quot;&gt;&lt;a href=&quot;#1-在本地mysql
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>手动创建Servlet转发页面</title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet%E8%BD%AC%E5%8F%91%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet转发页面/</id>
    <published>2015-09-20T02:12:41.000Z</published>
    <updated>2015-10-21T14:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　在上一篇的基础上，本节实现转发页面。</p>
<h3 id="1、创建servlet"><a href="#1、创建servlet" class="headerlink" title="1、创建servlet"></a>1、创建servlet</h3><h4 id="（1）在test目录下，新建一个index-html"><a href="#（1）在test目录下，新建一个index-html" class="headerlink" title="（1）在test目录下，新建一个index.html"></a>（1）在test目录下，新建一个index.html</h4><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos; ?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html lang=&quot;en&quot;
      xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
      xmlns:h=&quot;http://java.sun.com/jsf/html&quot;&gt;
    &lt;head&gt;
        &lt;title&gt;Hello index!&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=&quot;hello&quot; method=&quot;GET&quot;&gt;
            First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot; /&gt;&lt;br /&gt;
            Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;   /&gt;&lt;br /&gt;
            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><h4 id="（2）在test-WEB-INF-classes下新建一个HEllo-java"><a href="#（2）在test-WEB-INF-classes下新建一个HEllo-java" class="headerlink" title="（2）在test/WEB_INF/classes下新建一个HEllo.java"></a>（2）在test/WEB_INF/classes下新建一个HEllo.java</h4><pre><code>import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Hello extends HttpServlet {

    public void doGet(HttpServletRequest request,HttpServletResponse response)throws ServletException, IOException{
        response.setContentType(&quot;text/html&quot;);

        PrintWriter out = response.getWriter();
        String title = &quot;Using GET Method to Read Form Data&quot;;
        String docType =
        &quot;&lt;!doctype html public \&quot;-//w3c//dtd html 4.0 &quot; +
        &quot;transitional//en\&quot;&gt;\n&quot;;
        out.println(docType +
                  &quot;&lt;html&gt;\n&quot; +
                  &quot;&lt;head&gt;&lt;title&gt;&quot; + title + &quot;&lt;/title&gt;&lt;/head&gt;\n&quot; +
                  &quot;&lt;body&gt;\n&quot; +
                  &quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot; + title + &quot;&lt;/h1&gt;\n&quot; +
                  &quot;&lt;b&gt;First Name&lt;/b&gt;: &quot;
                  + request.getParameter(&quot;first_name&quot;) + &quot;\n&quot; +
                  &quot;&lt;b&gt;Last Name&lt;/b&gt;: &quot;
                  + request.getParameter(&quot;last_name&quot;) + &quot;\n&quot; +
                  &quot;&lt;/body&gt;&quot;+&quot;&lt;/html&gt;&quot;);
  }
}
</code></pre><h3 id="2、编译生成class文件"><a href="#2、编译生成class文件" class="headerlink" title="2、编译生成class文件"></a>2、编译生成class文件</h3><pre><code>javac -cp /usr/local/Cellar/tomcat/8.0.26/libexec/lib/servlet-api.jar /usr/local/Cellar/tomcat/8.0.26/libexec/webapps/test/WEB-INF/classes/Hello.java
</code></pre><h3 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h3><p>　在web.xml中</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;web-app&gt;
    &lt;!-- Define servlets that are included in the example application --&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;servlet-class&gt;Hello&lt;/servlet-class&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</code></pre><h3 id="4、启动tomcat"><a href="#4、启动tomcat" class="headerlink" title="4、启动tomcat"></a>4、启动tomcat</h3><pre><code>$ cd /usr/local/Cellar/tomcat/8.0.24/libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行及结果"><a href="#5、运行及结果" class="headerlink" title="5、运行及结果"></a>5、运行及结果</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/index.html，填写内容，点击submit，跳转到了hello页面。" target="_blank" rel="external">http://localhost:8080/test/index.html，填写内容，点击submit，跳转到了hello页面。</a></p>
<h3 id="6、目录结构"><a href="#6、目录结构" class="headerlink" title="6、目录结构"></a>6、目录结构</h3><pre><code>|---test
    |---index.html
    |---WEB-INF
        |---classes
            |---Hello.java
        |---lib
        |---web.xml
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　在上一篇的基础上，本节实现转发页面。&lt;/p&gt;
&lt;h3 id=&quot;1、创建servlet&quot;&gt;&lt;a href=&quot;#1、创建servlet&quot; class=&quot;headerlink&quot; title=&quot;1、创建servlet&quot;&gt;&lt;/a&gt;1、创建servlet&lt;/h3&gt;&lt;h4 id=&quot;（
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>手动创建Servlet</title>
    <link href="http://yoursite.com/2015/09/20/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAServlet/"/>
    <id>http://yoursite.com/2015/09/20/手动创建Servlet/</id>
    <published>2015-09-20T01:34:01.000Z</published>
    <updated>2015-10-21T14:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、创建servlet"><a href="#1、创建servlet" class="headerlink" title="1、创建servlet"></a>1、创建servlet</h3><p>　　（笔者的tomcat安装在/usr/local/Cellar/tomcat/8.0.26/）<br>　　在tomcat下的webapps下创建一个名为test的文件夹，然后在test里创建一个名为<em>WEB-INF</em>的文件（文件名严格遵守），在WEB-INF中再创建一个classes文件夹、一个lib文件夹、一个web.xml文件，然后在classes文件夹下创建一个Java文件ServletExample.java</p>
<pre><code>import javax.servlet.*;
import java.io.IOException;
import java.io.PrintWriter;

public class ServletExample implements Servlet {
    private int count;

    @Override
    public void init(ServletConfig servletConfig) throws ServletException {

    }

    @Override
    public ServletConfig getServletConfig() {
        return null;
    }

    @Override
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
        PrintWriter out = servletResponse.getWriter();
        out.print(&quot;Hello World&quot;);

    }

    @Override
    public String getServletInfo() {
        return null;
    }

    @Override
    public void destroy() {

    }
}
</code></pre><h3 id="2、编译生成class文件"><a href="#2、编译生成class文件" class="headerlink" title="2、编译生成class文件"></a>2、编译生成class文件</h3><p>　　进行编译，这时候要手动指明jar包的位置，不然的话会找不到。</p>
<pre><code>javac -cp /usr/local/Cellar/tomcat/8.0.26/libexec/lib/servlet-api.jar /usr/local/Cellar/tomcat/8.0.26/libexec/webapps/test/WEB-INF/classes/ServletExample.java
</code></pre><h3 id="3、部署servlet"><a href="#3、部署servlet" class="headerlink" title="3、部署servlet"></a>3、部署servlet</h3><p>　　在上述新建的web.xml中，</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;web-app&gt;
    &lt;!-- Define servlets that are included in the example application --&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;ServletExample&lt;/servlet-name&gt;
        &lt;servlet-class&gt;ServletExample&lt;/servlet-class&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;ServletExample&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/test&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;　　
</code></pre><p>　　其中，<servlet-name>对应创建的servlet的java文件名，<servlet-class>指明servlet所在的的路径包括包和类名，<url-pattern>可以任意取。每添加一个servlet时就必须在web.xml中进行部署。</url-pattern></servlet-class></servlet-name></p>
<h3 id="4、启动tomcat"><a href="#4、启动tomcat" class="headerlink" title="4、启动tomcat"></a>4、启动tomcat</h3><p>　　到tomcat的bin目录下，运行startup.sh文件。(保险起见，可以在运行startup.sh之前，先运行shutdown.sh)</p>
<pre><code>$ cd /usr/local/Cellar/tomcat/8.0.26/libexec/bin
$ ./startup.sh    
</code></pre><h3 id="5、运行及结果"><a href="#5、运行及结果" class="headerlink" title="5、运行及结果"></a>5、运行及结果</h3><p>　　在浏览器输入<a href="http://localhost:8080/test/test，结果为显示`Hello" target="_blank" rel="external">http://localhost:8080/test/test，结果为显示`Hello</a> World`　</p>
<h3 id="6、目录结构"><a href="#6、目录结构" class="headerlink" title="6、目录结构"></a>6、目录结构</h3><pre><code>|---test
    |---WEB-INF
        |---classes
            |---ServletExample.java
        |---lib
        |---web.xml
</code></pre><p>　　</p>
<blockquote>
<p>此外，可以在tomcat下的conf里的tomcat-users.xml配置username和password进行manager webapp。</p>
<pre><code>&lt;role rolename=&quot;zhang&apos;yu&quot;/&gt;
&lt;user username=&quot;用户名&quot; password=&quot;密码&quot; roles=&quot;manager-gui&quot;/&gt;
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、创建servlet&quot;&gt;&lt;a href=&quot;#1、创建servlet&quot; class=&quot;headerlink&quot; title=&quot;1、创建servlet&quot;&gt;&lt;/a&gt;1、创建servlet&lt;/h3&gt;&lt;p&gt;　　（笔者的tomcat安装在/usr/local/Cellar/t
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
</feed>
